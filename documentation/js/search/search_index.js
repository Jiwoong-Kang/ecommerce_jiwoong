var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenStrategy.html",[0,0.693,1,2.749]],["body/injectables/AccessTokenStrategy.html",[0,0.989,1,3.925,2,1.451,3,0.149,4,0.134,5,0.134,6,5.718,7,3.784,8,1.641,9,5.07,10,0.526,11,1.878,12,2.193,13,3.925,14,2.329,15,2.93,16,3.689,17,3.323,18,1.061,19,4.338,20,1.815,21,0.013,22,1.3,23,0.733,24,1.39,25,5.812,26,4.728,27,4.338,28,3.784,29,1.402,30,1.956,31,0.51,32,0.765,33,2.93,34,2.13,35,4.338,36,2.93,37,2.748,38,4.581,39,1.738,40,2.228,41,3.784,42,0.149,43,0.087,44,2.62,45,1.945,46,2.93,47,4.338,48,4.338,49,4.338,50,4.338,51,1.355,52,1.557,53,4.338,54,0.009,55,0.009]],["title/controllers/AppController.html",[56,1.695,57,2.953]],["body/controllers/AppController.html",[3,0.142,4,0.127,5,0.127,10,0.502,11,1.821,12,2.142,14,1.66,18,0.756,21,0.013,29,1.339,31,0.434,32,0.73,42,0.142,43,0.083,44,3.24,45,1.885,51,1.759,52,1.487,54,0.009,55,0.009,56,2.345,57,4.087,58,1.725,59,3.613,60,6.87,61,1.294,62,4.142,63,4.142,64,3.804,65,4.056,66,3.613,67,6.402,68,5.633,69,4.142,70,6.402,71,6.402,72,6.402,73,3.265,74,3.613,75,0.99,76,4.142,77,4.142,78,4.142,79,3.613,80,4.142,81,4.142,82,6.402,83,6.87,84,5.633,85,4.142,86,3.613,87,4.142,88,4.142,89,4.142,90,4.142,91,4.142]],["title/modules/AppModule.html",[92,1.271,93,2.953]],["body/modules/AppModule.html",[3,0.104,4,0.093,5,0.093,21,0.013,31,0.534,32,0.533,39,1.212,42,0.104,43,0.061,54,0.007,55,0.007,57,3.901,58,1.874,65,4.23,66,2.638,73,2.384,92,1.68,93,5.949,94,1.309,95,1.422,96,1.553,97,1.553,98,1.422,99,2.762,100,1.553,101,2.638,102,2.638,103,2.638,104,4.509,105,4.509,106,4.509,107,4.23,108,3.991,109,4.509,110,4.509,111,4.509,112,4.509,113,3.782,114,2.312,115,1.553,116,1.553,117,3.024,118,2.312,119,1.808,120,3.024,121,2.384,122,3.024,123,2.194,124,3.024,125,3.024,126,3.024,127,2.638,128,3.024,129,3.024,130,3.024,131,3.024,132,2.194,133,1.713,134,2.384,135,4.502,136,3.024,137,3.024,138,3.024,139,3.024,140,6.369,141,3.024,142,8.221,143,3.024,144,3.024,145,3.024,146,3.024,147,3.024,148,3.024,149,3.024,150,3.024,151,3.024,152,3.024,153,3.024,154,3.024,155,3.024,156,3.024,157,3.024,158,3.024,159,3.024,160,3.024,161,3.024,162,3.024,163,3.024,164,3.024,165,3.024,166,3.024,167,3.024,168,3.024,169,3.024,170,3.024,171,3.024,172,3.024]],["title/injectables/AppService.html",[0,0.693,65,2.579]],["body/injectables/AppService.html",[0,1.184,2,1.923,3,0.197,4,0.177,5,0.177,10,0.696,11,2.248,18,1.049,21,0.013,29,1.857,31,0.39,32,1.013,42,0.197,43,0.116,51,1.795,54,0.011,55,0.011,65,4.406,74,6.778,75,1.663,173,5.013,174,5.747,175,5.747,176,4.53]],["title/classes/Auth.html",[43,0.082,177,2.749]],["body/classes/Auth.html",[3,0.217,4,0.195,5,0.195,21,0.012,42,0.217,43,0.127,54,0.011,55,0.011,177,4.973,178,1.977,179,5.523]],["title/controllers/AuthController.html",[56,1.695,180,2.953]],["body/controllers/AuthController.html",[3,0.063,4,0.056,5,0.056,10,0.222,11,0.981,12,2.69,14,0.735,17,1.682,18,1.244,20,1.993,21,0.013,22,1.427,23,0.825,24,1.525,29,2.202,30,3.071,31,0.477,32,0.323,40,0.942,42,0.063,43,0.037,44,1.369,45,1.016,51,2.163,52,2.445,54,0.005,55,0.005,56,0.764,58,0.764,61,2.128,177,1.239,180,2.203,181,1.6,182,1.162,183,3.036,184,3.036,185,3.036,186,3.036,187,4.515,188,3.036,189,4.515,190,3.036,191,2.649,192,4.515,193,3.036,194,3.036,195,2.649,196,1.834,197,4.252,198,1.834,199,1.834,200,4.419,201,1.834,202,3.64,203,3.036,204,1.834,205,1.834,206,3.853,207,3.036,208,1.834,209,1.834,210,4.747,211,3.036,212,1.834,213,1.834,214,1.834,215,1.834,216,1.834,217,1.834,218,1.834,219,1.834,220,1.834,221,1.834,222,1.834,223,1.834,224,1.834,225,1.834,226,1.834,227,1.834,228,1.834,229,1.834,230,1.834,231,1.834,232,1.834,233,3.036,234,1.834,235,1.6,236,3.053,237,3.036,238,1.834,239,1.636,240,1.834,241,1.039,242,1.239,243,1.239,244,1.239,245,2.203,246,2.393,247,1.162,248,0.636,249,1.331,250,2.05,251,3.049,252,1.6,253,1.834,254,1.834,255,1.6,256,1.6,257,1.6,258,2.322,259,1.446,260,1.331,261,1.834,262,3.629,263,1.331,264,1.039,265,1.331,266,1.331,267,1.834,268,1.331,269,1.834,270,1.331,271,1.834,272,1.834,273,1.834,274,1.834,275,2.95,276,2.05,277,1.834,278,1.834,279,1.6,280,1.6,281,1.331,282,1.834,283,1.834,284,1.834,285,2.134,286,3.378,287,5.029,288,5.002,289,1.834,290,1.834,291,1.331,292,1.834,293,1.834,294,1.834,295,1.834,296,1.834,297,1.834,298,1.834,299,1.834,300,1.834,301,1.834,302,3.036,303,1.834,304,3.036,305,3.884,306,1.834,307,1.834,308,1.834,309,3.036,310,1.834,311,1.834,312,1.834,313,3.036,314,1.834,315,1.834]],["title/modules/AuthModule.html",[92,1.271,104,2.749]],["body/modules/AuthModule.html",[1,4.893,3,0.132,4,0.118,5,0.118,21,0.013,31,0.539,32,0.678,39,1.541,42,0.132,43,0.077,54,0.008,55,0.008,58,2.229,92,1.923,94,1.665,95,1.808,96,1.975,97,1.975,98,1.808,99,3.163,100,1.975,104,5.584,107,4.591,113,4.105,114,2.75,115,1.975,116,1.975,118,2.75,119,3.2,123,2.79,127,3.355,180,4.467,258,4.331,259,3.031,316,3.355,317,3.845,318,3.355,319,4.893,320,4.893,321,4.893,322,4.893,323,3.845,324,3.355,325,2.597,326,3.845,327,3.845,328,3.845,329,3.845,330,6.657,331,3.845,332,3.845,333,3.845,334,3.355]],["title/injectables/AuthService.html",[0,0.693,258,2.433]],["body/injectables/AuthService.html",[0,0.568,2,0.688,3,0.07,4,0.063,5,0.063,10,0.249,11,1.078,12,2.469,14,1.336,16,2.943,17,2.465,18,1.178,20,1.95,21,0.013,22,1.397,23,0.788,24,1.493,26,2.252,28,2.909,29,2.018,30,2.566,31,0.496,32,0.363,39,0.824,40,1.057,41,1.795,42,0.07,43,0.041,44,2.397,45,1.618,51,1.872,52,2.316,54,0.005,55,0.005,75,1.681,176,2.629,191,2.909,195,2.909,206,3.267,235,2.909,236,3.225,239,1.108,241,1.165,249,1.492,250,2.252,251,3.59,252,1.795,256,1.795,257,1.795,258,1.994,275,2.909,280,2.909,285,1.618,287,3.315,325,1.389,335,1.795,336,3.335,337,3.335,338,2.514,339,3.335,340,4.838,341,3.335,342,3.335,343,2.057,344,5.23,345,3.798,346,4.206,347,4.191,348,2.057,349,2.057,350,2.057,351,3.335,352,2.057,353,2.994,354,3.335,355,2.057,356,2.909,357,2.057,358,3.335,359,2.057,360,3.335,361,2.057,362,2.057,363,3.335,364,2.057,365,2.892,366,1.492,367,1.622,368,1.492,369,2.057,370,1.795,371,1.622,372,1.637,373,1.057,374,1.795,375,2.057,376,1.622,377,2.057,378,1.795,379,1.622,380,2.057,381,2.057,382,2.057,383,1.389,384,1.492,385,1.795,386,1.389,387,1.492,388,3.335,389,2.057,390,2.74,391,2.375,392,1.492,393,1.492,394,2.629,395,2.057,396,4.22,397,4.838,398,2.057,399,1.303,400,2.057,401,2.057,402,2.057,403,2.057,404,1.797,405,2.057,406,2.057,407,3.335,408,2.057,409,2.057,410,2.057,411,2.057,412,2.057,413,1.492,414,3.335,415,2.909,416,2.057,417,3.335,418,2.057,419,4.206,420,4.206,421,1.795,422,2.84,423,3.335,424,2.057,425,1.492,426,1.795,427,2.057,428,2.057,429,1.795,430,3.335,431,2.057,432,1.622,433,2.057,434,2.057,435,1.795,436,2.057,437,2.057,438,1.389]],["title/classes/BaseEntity.html",[43,0.082,439,2.433]],["body/classes/BaseEntity.html",[3,0.165,4,0.148,5,0.148,10,0.584,18,1.332,21,0.013,23,0.92,31,0.327,42,0.165,43,0.097,54,0.01,55,0.01,61,2.279,75,1.49,178,1.506,338,4.923,439,3.724,440,4.206,441,1.592,442,6.903,443,6.903,444,2.989,445,4.661,446,4.625,447,6.903,448,4.822,449,6.903,450,4.822,451,6.231,452,4.822,453,6.903,454,4.822,455,4.822,456,2.477,457,4.822]],["title/interfaces/BufferedFile.html",[458,1.695,459,1.998]],["body/interfaces/BufferedFile.html",[3,0.154,4,0.138,5,0.183,8,1.267,10,0.544,21,0.013,22,1.004,23,0.976,42,0.253,54,0.009,55,0.009,75,1.97,441,1.519,444,1.943,445,3.031,446,2.683,458,2.955,459,2.919,460,2.543,461,2.543,462,2.843,463,5.701,464,5.356,465,5.149,466,5.356,467,5.149,468,4.986,469,4.986,470,2.955,471,2.843,472,3.766,473,3.766,474,3.256,475,3.031,476,3.031]],["title/classes/ChangePasswordDto.html",[43,0.082,202,2.749]],["body/classes/ChangePasswordDto.html",[3,0.18,4,0.162,5,0.162,10,0.637,18,1.202,21,0.013,23,0.831,31,0.447,42,0.18,43,0.132,54,0.01,55,0.01,61,2.057,75,1.802,178,1.643,202,4.448,248,1.823,287,5.667,441,1.683,477,6.272,478,4.59,479,7.19,480,5.262,481,5.262,482,5.262,483,5.262,484,5.192,485,5.216,486,4.147,487,2.981,488,3.693,489,4.147]],["title/entities/Consent.html",[490,2.193,491,2.306]],["body/entities/Consent.html",[3,0.134,4,0.121,5,0.121,8,1.107,10,0.475,18,1.331,21,0.013,23,0.92,24,1.298,31,0.422,42,0.134,43,0.079,54,0.008,55,0.008,61,2.277,285,2.619,338,4.922,439,3.244,441,1.387,456,2.015,490,2.924,491,3.074,492,2.222,493,3.422,494,5.428,495,5.428,496,5.428,497,5.428,498,5.428,499,5.287,500,6.149,501,6.171,502,3.923,503,3.923,504,3.923,505,3.923,506,3.923,507,3.092,508,5.427,509,3.923,510,4.924,511,4.278,512,2.846,513,2.222,514,3.797]],["title/controllers/ConsentController.html",[56,1.695,515,2.953]],["body/controllers/ConsentController.html",[3,0.136,4,0.122,5,0.122,10,0.481,11,1.77,12,2.449,18,0.999,20,1.71,21,0.013,22,1.225,23,0.691,24,1.309,29,1.77,30,2.468,31,0.497,32,0.7,38,3.132,42,0.136,43,0.08,45,1.329,51,1.957,52,1.965,54,0.008,55,0.008,56,1.654,58,1.654,61,1.71,182,2.517,197,4.483,200,5.065,239,3.375,242,3.697,243,3.697,244,2.683,247,2.517,248,1.377,262,2.882,263,2.882,264,2.251,265,2.882,285,1.329,286,2.683,291,3.972,491,2.251,515,3.972,516,3.466,517,5.465,518,5.465,519,3.973,520,4.868,521,3.466,522,3.973,523,3.973,524,3.466,525,3.973,526,3.969,527,3.973,528,3.132,529,2.882,530,3.973,531,3.973,532,2.375,533,3.973,534,3.973]],["title/modules/ConsentModule.html",[92,1.271,105,2.749]],["body/modules/ConsentModule.html",[3,0.167,4,0.15,5,0.15,21,0.013,31,0.527,32,0.861,42,0.167,43,0.098,54,0.01,55,0.01,58,2.615,92,2.169,94,2.114,95,2.295,96,2.508,97,2.508,98,2.295,99,3.567,100,2.508,105,5.402,113,4.398,114,3.226,115,2.508,116,2.508,118,3.226,123,3.542,491,2.766,515,5.037,526,4.919,535,4.259,536,4.882,537,4.259,538,4.882,539,4.882,540,4.882,541,3.297,542,2.508,543,3.542,544,4.882]],["title/injectables/ConsentService.html",[0,0.693,526,2.579]],["body/injectables/ConsentService.html",[0,0.911,2,1.287,3,0.132,4,0.118,5,0.118,10,0.466,11,1.73,12,2.424,14,2.145,17,3.219,18,1.124,20,1.923,21,0.013,22,1.377,23,0.777,24,1.472,29,1.73,30,2.413,31,0.505,32,0.678,40,1.975,42,0.132,43,0.077,44,2.413,45,1.791,51,1.672,52,2.39,54,0.008,55,0.008,275,2.413,285,2.609,444,1.665,456,1.975,491,2.178,513,2.178,517,4.669,518,4.669,520,4.87,526,3.391,528,3.031,529,2.79,542,1.975,543,2.79,545,3.355,546,3.845,547,4.496,548,3.845,549,5.353,550,5.353,551,3.845,552,5.353,553,3.845,554,2.79,555,3.845,556,5.353,557,3.845,558,3.845,559,3.355,560,3.355,561,3.845,562,3.845]],["title/classes/CreateAuthDto.html",[43,0.082,563,2.953]],["body/classes/CreateAuthDto.html",[3,0.216,4,0.194,5,0.194,21,0.012,42,0.216,43,0.127,54,0.011,55,0.011,178,1.969,563,5.33,564,5.5,565,4.97]],["title/classes/CreateConsentDto.html",[43,0.082,520,2.433]],["body/classes/CreateConsentDto.html",[3,0.154,4,0.139,5,0.139,10,0.545,18,1.349,21,0.013,23,0.932,31,0.305,42,0.154,43,0.091,54,0.009,55,0.009,61,2.308,178,1.406,248,1.56,441,1.522,488,3.901,494,5.824,495,5.824,496,5.824,497,5.824,498,5.824,499,5.426,501,5.601,520,3.561,566,6.624,567,3.548,568,5.825,569,4.501,570,4.501,571,4.302,572,4.501,573,4.501,574,4.501,575,3.474]],["title/classes/CreateOrderDto.html",[43,0.082,576,2.579]],["body/classes/CreateOrderDto.html",[3,0.216,4,0.194,5,0.194,21,0.012,42,0.216,43,0.127,54,0.011,55,0.011,178,1.969,576,4.655,577,5.5,578,4.97]],["title/classes/CreateProductDto.html",[43,0.082,579,2.579]],["body/classes/CreateProductDto.html",[3,0.139,4,0.125,5,0.125,10,0.491,18,1.377,21,0.013,22,1.417,23,0.951,24,1.328,31,0.275,42,0.139,43,0.082,54,0.008,55,0.008,61,2.356,75,1.836,178,1.267,248,1.405,441,1.419,470,2.835,488,3.945,499,3.75,568,5.945,571,3.146,575,3.545,579,3.518,580,6.699,581,3.197,582,4.991,583,3.785,584,5.524,585,4.991,586,4.594,587,4.991,588,4.844,589,4.056,590,4.844,591,4.056,592,4.056,593,4.844,594,4.056,595,5.553,596,4.056,597,5.553,598,4.056,599,4.028,600,4.056]],["title/classes/CreateProfileDto.html",[43,0.082,601,2.579]],["body/classes/CreateProfileDto.html",[3,0.129,4,0.116,5,0.116,10,0.458,18,1.351,21,0.013,23,0.933,31,0.414,42,0.129,43,0.076,54,0.008,55,0.008,61,2.311,75,1.58,178,1.181,248,1.31,441,1.351,446,3.162,470,2.751,488,3.878,514,3.56,568,5.482,575,3.269,583,3.162,601,3.351,602,6.585,603,2.98,604,5.322,605,5.322,606,5.322,607,6.125,608,6.125,609,4.809,610,5.322,611,5.289,612,3.78,613,5.289,614,3.78,615,5.289,616,5.289,617,4.614,618,3.78,619,5.289,620,3.572,621,4.794,622,3.78,623,3.78,624,5.289,625,3.78,626,5.289,627,3.78,628,3.298,629,3.298,630,3.78,631,3.298]],["title/classes/CreateUserDto.html",[43,0.082,236,2.306]],["body/classes/CreateUserDto.html",[3,0.127,4,0.114,5,0.114,10,0.449,18,1.308,21,0.013,22,1.351,23,0.928,24,1.796,31,0.469,42,0.127,43,0.105,54,0.008,55,0.008,61,2.237,75,1.796,178,1.158,236,2.956,248,1.285,353,2.614,372,3.516,373,1.905,404,3.252,422,3.524,441,1.333,484,4.759,485,5.338,486,2.923,487,2.101,488,3.547,489,2.923,491,4.058,520,3.609,528,2.923,529,2.69,543,2.69,575,2.838,632,6.419,633,2.69,634,3.609,635,3.235,636,3.708,637,2.69,638,3.306,639,3.708,640,3.708,641,3.708,642,3.708,643,6.552,644,5.218,645,3.708,646,4.113,647,3.708,648,3.708,649,3.708,650,3.785,651,3.708,652,3.708,653,3.708,654,3.708]],["title/modules/DatabaseModule.html",[92,1.271,106,2.749]],["body/modules/DatabaseModule.html",[3,0.178,4,0.16,5,0.16,16,3.514,21,0.013,23,0.657,31,0.486,32,0.918,39,2.087,42,0.178,43,0.105,54,0.01,55,0.01,79,4.544,92,2.044,94,2.255,106,4.42,118,3.362,119,3.912,366,3.779,404,2.806,492,2.951,541,3.517,542,2.676,571,3.708,655,5.209,656,5.209,657,4.106,658,5.209,659,5.209,660,4.544,661,5.209,662,4.106,663,5.209,664,4.544,665,5.209,666,5.209,667,5.209,668,5.209,669,5.209,670,5.209,671,5.209]],["title/classes/EmailDto.html",[43,0.082,210,2.953]],["body/classes/EmailDto.html",[3,0.191,4,0.172,5,0.172,10,0.676,18,1.019,21,0.013,23,0.704,31,0.464,42,0.191,43,0.137,54,0.01,55,0.01,61,1.743,75,1.634,178,1.743,210,4.956,248,1.934,353,3.197,441,1.746,487,3.162,488,3.509,575,2.624,637,4.049,638,4.328,650,4.956,672,4.869,673,5.582]],["title/modules/EmailModule.html",[92,1.271,107,2.579]],["body/modules/EmailModule.html",[3,0.177,4,0.159,5,0.159,21,0.013,31,0.484,32,0.912,39,2.073,42,0.177,43,0.104,54,0.01,55,0.01,92,2.228,94,2.24,95,2.432,96,2.658,97,2.658,98,2.432,99,3.665,100,3.665,107,5.069,114,3.348,115,2.658,116,2.658,118,2.658,119,3.896,345,5.269,378,4.514,674,4.514,675,4.514,676,4.514,677,5.174]],["title/injectables/EmailService.html",[0,0.693,345,2.579]],["body/injectables/EmailService.html",[0,1.036,2,1.555,3,0.159,4,0.143,5,0.143,10,0.563,11,1.967,14,1.863,15,3.139,16,3.761,18,1.238,20,1.9,21,0.013,22,1.361,23,0.856,24,1.455,29,1.503,31,0.488,32,0.82,39,1.863,42,0.159,43,0.094,44,3.058,45,1.555,51,1.452,54,0.009,55,0.009,177,3.139,285,1.555,345,3.855,441,1.555,532,2.779,678,4.055,679,6.783,680,6.085,681,6.085,682,6.085,683,6.783,684,4.649,685,4.649,686,6.783,687,4.649,688,6.085,689,4.055,690,4.649,691,4.649,692,4.649,693,4.649,694,4.649,695,4.649,696,4.649]],["title/classes/EmailVerificationDto.html",[43,0.082,206,2.749]],["body/classes/EmailVerificationDto.html",[3,0.177,4,0.159,5,0.159,10,0.627,18,1.19,21,0.013,23,0.822,31,0.442,42,0.177,43,0.131,54,0.01,55,0.01,61,2.036,75,1.791,178,1.616,206,4.401,248,1.793,353,3.089,441,1.665,485,4.728,487,2.931,488,3.665,575,3.064,637,3.754,638,4.129,650,4.728,697,6.224,698,4.514,699,7.135,700,5.174,701,6.517,702,5.174,703,5.174]],["title/injectables/GoogleAuthGuard.html",[0,0.693,266,2.953]],["body/injectables/GoogleAuthGuard.html",[0,1.194,2,1.952,3,0.2,4,0.18,5,0.18,8,1.981,21,0.013,31,0.511,32,1.028,34,2.864,42,0.2,43,0.117,54,0.011,55,0.011,266,5.09,372,2.864,373,2.996,704,5.088,705,3.695,706,7.017,707,3.939]],["title/injectables/GoogleAuthStrategy.html",[0,0.693,319,2.749]],["body/injectables/GoogleAuthStrategy.html",[0,0.814,2,1.099,3,0.113,4,0.101,5,0.101,8,1.351,10,0.398,11,1.547,12,1.888,13,3.811,14,1.918,15,2.219,16,3.377,17,3.074,18,0.874,20,1.495,21,0.013,22,1.387,23,0.604,24,1.144,29,1.062,31,0.467,32,0.579,33,3.811,34,1.613,36,3.811,37,2.082,39,1.317,40,1.688,42,0.113,43,0.066,44,2.158,45,1.601,46,2.219,52,1.718,54,0.007,55,0.007,75,1.645,241,1.861,275,2.545,276,3.231,285,1.601,319,3.231,353,2.853,365,3.374,372,3.377,373,1.688,383,2.219,384,2.384,386,2.219,390,2.711,391,2.349,392,3.471,393,2.384,413,3.471,425,2.384,634,1.964,708,4.923,709,2.219,710,4.785,711,2.59,712,2.59,713,4.449,714,3.098,715,4.449,716,6.2,717,3.286,718,3.772,719,3.772,720,2.866,721,2.59,722,3.286,723,2.866,724,3.286,725,2.59,726,3.286,727,3.286,728,3.772,729,4.785,730,2.384,731,3.772,732,2.59,733,3.772,734,2.384,735,3.286,736,3.772,737,2.59,738,2.59]],["title/interfaces/HasFile.html",[458,1.695,472,2.579]],["body/interfaces/HasFile.html",[3,0.169,4,0.152,5,0.234,8,1.391,10,0.597,21,0.013,22,1.103,23,0.797,42,0.26,54,0.01,55,0.01,75,1.951,441,1.615,444,2.134,445,3.328,446,2.946,458,3.063,459,2.42,460,2.792,461,2.792,462,3.122,463,5.518,464,4.584,465,3.575,466,4.584,467,3.575,468,4.267,469,4.71,470,2.631,471,3.122,472,4.419,473,4.003,474,3.575,475,3.328,476,3.328]],["title/injectables/JwtAuthGuard.html",[0,0.693,264,2.306]],["body/injectables/JwtAuthGuard.html",[0,1.208,2,1.989,3,0.204,4,0.183,5,0.183,8,2.003,21,0.013,31,0.482,32,1.048,34,2.918,42,0.204,43,0.12,54,0.011,55,0.011,264,4.02,705,3.766,707,4.014,739,5.185,740,7.097]],["title/injectables/KakaoAuthGuard.html",[0,0.693,268,2.953]],["body/injectables/KakaoAuthGuard.html",[0,1.194,2,1.952,3,0.2,4,0.18,5,0.18,8,1.981,21,0.013,31,0.511,32,1.028,34,2.864,42,0.2,43,0.117,54,0.011,55,0.011,268,5.09,372,2.864,373,2.996,705,3.695,707,3.939,741,5.088,742,7.017]],["title/injectables/KakaoAuthStrategy.html",[0,0.693,320,2.749]],["body/injectables/KakaoAuthStrategy.html",[0,0.852,2,1.171,3,0.12,4,0.108,5,0.108,8,1.414,10,0.424,11,1.619,12,1.957,13,3.95,14,2.007,15,2.363,16,3.45,17,3.133,18,0.914,20,1.564,21,0.013,22,1.309,23,0.632,24,1.198,29,1.131,31,0.477,32,0.617,33,3.95,34,1.718,36,3.95,37,2.217,39,1.402,40,1.798,42,0.12,43,0.07,44,2.258,45,1.676,46,2.363,52,1.798,54,0.008,55,0.008,75,1.68,241,1.983,275,3.046,276,3.382,285,1.676,320,3.382,353,2.533,365,3.496,372,3.134,373,1.798,383,2.363,384,2.539,386,2.363,390,2.837,391,2.459,392,3.633,393,2.539,413,3.633,425,2.539,634,2.092,709,2.363,711,2.759,712,2.759,713,4.61,714,3.001,715,4.61,718,3.948,721,2.759,725,2.759,728,3.948,730,2.539,731,3.948,732,2.759,733,3.948,734,2.539,736,3.948,737,2.759,738,2.759,743,5.102,744,5.008,745,3.5,746,3.5,747,3.5,748,4.369,749,3.5,750,3.5]],["title/injectables/LocalAuthGuard.html",[0,0.693,260,2.953]],["body/injectables/LocalAuthGuard.html",[0,1.194,2,1.952,3,0.2,4,0.18,5,0.18,8,1.981,21,0.013,31,0.511,32,1.028,34,2.864,42,0.2,43,0.117,54,0.011,55,0.011,260,5.09,372,2.864,373,2.996,705,3.695,707,3.939,751,5.088,752,7.017]],["title/injectables/LocalAuthStrategy.html",[0,0.693,321,2.749]],["body/injectables/LocalAuthStrategy.html",[0,1.036,2,1.555,3,0.159,4,0.143,5,0.143,8,1.718,9,5.308,10,0.563,11,1.967,12,2.269,13,4.109,14,1.863,18,1.111,20,1.9,21,0.013,22,1.361,23,0.768,24,1.455,29,1.503,30,2.096,31,0.488,32,0.82,33,3.139,34,2.282,36,3.139,37,2.945,42,0.159,43,0.094,46,3.139,51,1.452,52,1.669,54,0.009,55,0.009,75,1.832,258,4.58,259,3.665,321,4.109,353,2.937,404,3.876,532,2.779,709,3.139,753,5.917,754,4.649,755,4.649,756,6.085,757,4.649,758,3.665,759,4.649,760,4.649]],["title/classes/LoginUserDto.html",[43,0.082,251,2.749]],["body/classes/LoginUserDto.html",[3,0.175,4,0.157,5,0.157,10,0.619,18,1.18,21,0.013,23,0.815,31,0.439,42,0.175,43,0.13,54,0.01,55,0.01,61,2.019,75,1.782,178,1.595,248,1.769,251,4.365,353,3.071,404,3.82,441,1.651,484,5.095,485,4.689,486,4.025,487,2.893,488,3.643,489,4.025,575,3.038,633,3.704,637,3.704,638,4.095,646,5.095,650,4.689,761,6.186,762,5.106,763,5.106,764,5.106]],["title/modules/MinioClientModule.html",[92,1.271,108,2.433]],["body/modules/MinioClientModule.html",[3,0.158,4,0.142,5,0.142,12,1.546,16,3.524,21,0.013,31,0.487,32,0.815,39,1.852,42,0.158,43,0.093,54,0.009,55,0.009,92,2.112,94,2.001,95,2.173,96,2.374,97,2.374,98,2.173,99,3.474,100,3.474,108,4.66,114,3.113,115,2.374,116,2.374,118,3.113,119,4.043,132,4.397,133,2.618,366,3.353,461,2.618,501,3.643,657,3.643,662,3.643,765,4.031,766,4.031,767,4.031,768,4.893,769,4.621,770,3.643,771,4.621,772,3.643,773,3.643,774,4.621,775,4.621,776,4.621,777,4.621,778,4.621,779,4.621,780,4.621,781,4.621,782,4.621]],["title/injectables/MinioClientService.html",[0,0.693,768,2.433]],["body/injectables/MinioClientService.html",[0,0.496,2,0.583,3,0.06,4,0.054,5,0.203,10,0.211,11,0.941,12,2.202,14,1.167,16,2.738,18,1.067,20,1.519,21,0.013,22,1.088,23,0.83,24,1.163,29,1.414,30,1.69,31,0.357,32,0.307,39,0.699,42,0.06,43,0.035,44,2.636,45,1.956,51,1.367,52,1.746,54,0.004,55,0.004,75,1.821,132,2.718,133,3.44,241,0.988,275,3.416,285,1.759,338,4.013,365,3.334,387,4.775,390,2.978,391,2.738,394,4.144,399,2.374,441,0.744,444,1.261,459,3.076,461,3.44,513,0.988,514,2.019,571,0.988,734,4.405,768,1.74,772,1.375,773,3.449,783,1.521,784,6.932,785,5.257,786,3.747,787,2.911,788,3.747,789,3.747,790,2.54,791,1.744,792,4.376,793,1.744,794,1.744,795,3.747,796,3.747,797,1.744,798,6.072,799,2.911,800,4.376,801,1.744,802,2.911,803,1.744,804,5.257,805,1.744,806,1.744,807,1.744,808,1.744,809,1.744,810,1.744,811,1.744,812,1.043,813,1.178,814,4.865,815,1.744,816,1.744,817,1.744,818,1.744,819,3.747,820,3.747,821,5.257,822,3.747,823,3.747,824,5.257,825,3.747,826,3.747,827,3.747,828,5.257,829,3.747,830,3.747,831,3.747,832,4.586,833,3.269,834,3.747,835,3.269,836,3.747,837,2.53,838,3.747,839,3.747,840,3.747,841,5.257,842,3.747,843,5.257,844,1.744,845,1.744,846,2.911,847,1.744,848,3.747,849,3.747,850,2.954,851,3.747,852,3.747,853,3.747,854,2.616,855,1.744,856,1.744,857,1.744,858,1.744,859,1.744,860,2.911,861,2.911,862,1.744,863,1.744,864,1.744,865,1.744,866,1.265,867,2.911,868,1.744,869,1.744,870,2.911,871,1.744,872,1.521,873,1.375]],["title/injectables/NaverAuthGuard.html",[0,0.693,270,2.953]],["body/injectables/NaverAuthGuard.html",[0,1.194,2,1.952,3,0.2,4,0.18,5,0.18,8,1.981,21,0.013,31,0.511,32,1.028,34,2.864,42,0.2,43,0.117,54,0.011,55,0.011,270,5.09,372,2.864,373,2.996,705,3.695,707,3.939,874,5.088,875,7.017]],["title/injectables/NaverAuthStrategy.html",[0,0.693,322,2.749]],["body/injectables/NaverAuthStrategy.html",[0,0.857,2,1.179,3,0.121,4,0.108,5,0.108,8,1.421,10,0.427,11,1.627,12,1.964,13,3.964,14,2.017,15,2.379,16,3.458,17,3.14,18,0.919,20,1.572,21,0.013,22,1.313,23,0.635,24,1.203,29,1.139,31,0.478,32,0.621,33,3.964,34,1.73,36,3.964,37,2.232,39,1.412,40,1.81,42,0.121,43,0.071,44,2.269,45,1.684,46,2.379,52,1.807,54,0.008,55,0.008,75,1.684,241,1.996,275,2.887,276,3.398,285,1.684,322,3.398,353,2.542,365,3.509,372,3.144,373,1.81,383,2.379,384,2.556,386,2.379,390,2.851,391,2.471,392,3.651,393,2.556,413,3.651,425,2.556,634,2.106,709,2.379,711,2.777,712,2.777,713,4.628,714,3.011,715,4.628,718,3.967,721,2.777,723,3.074,725,2.777,728,3.967,731,3.967,732,2.777,733,3.967,734,2.556,736,3.967,737,2.777,738,2.777,748,4.39,876,5.121,877,5.033,878,3.524,879,2.777,880,3.524,881,3.524,882,3.524,883,3.524]],["title/classes/Order.html",[43,0.082,884,2.433]],["body/classes/Order.html",[3,0.204,4,0.183,5,0.183,10,0.72,18,1.085,21,0.012,23,0.75,42,0.204,43,0.12,54,0.011,55,0.011,178,1.857,441,1.813,884,4.697,885,5.185,886,7.587,887,6.618,888,5.944]],["title/controllers/OrderController.html",[56,1.695,889,2.953]],["body/controllers/OrderController.html",[3,0.128,4,0.115,5,0.115,10,0.452,11,1.695,18,1.264,20,2.053,21,0.013,22,1.471,23,0.829,24,1.572,29,2.238,31,0.47,32,0.658,42,0.128,43,0.075,45,1.25,51,2.163,54,0.008,55,0.008,56,1.555,58,1.555,61,2.163,75,1.829,182,2.366,239,2.825,242,4.093,247,2.366,248,1.294,281,2.709,444,3.109,532,2.233,576,4.548,873,2.944,884,2.233,889,3.805,890,3.258,891,3.323,892,5.734,893,4.575,894,4.575,895,4.575,896,3.258,897,3.735,898,3.735,899,3.258,900,5.245,901,3.735,902,3.258,903,5.245,904,3.735,905,3.258,906,5.082,907,5.245,908,3.735,909,3.735,910,3.84,911,3.258,912,3.258,913,4.134,914,3.258,915,3.735,916,3.735,917,3.735,918,3.735,919,3.735,920,3.735,921,3.735,922,3.735,923,3.735,924,3.735,925,3.735]],["title/modules/OrderModule.html",[92,1.271,109,2.749]],["body/modules/OrderModule.html",[3,0.183,4,0.164,5,0.164,21,0.013,31,0.491,32,0.94,42,0.183,43,0.107,54,0.01,55,0.01,58,2.766,92,2.26,94,2.309,95,2.507,96,2.74,97,2.74,98,2.507,99,3.716,100,2.74,109,5.363,114,3.412,115,2.74,116,2.74,889,5.248,910,5.031,911,4.653,926,4.653,927,4.653,928,5.334,929,5.334]],["title/injectables/OrderService.html",[0,0.693,910,2.579]],["body/injectables/OrderService.html",[0,0.937,2,1.339,3,0.137,4,0.123,5,0.123,10,0.485,11,1.779,18,1.296,20,2.115,21,0.013,22,1.515,23,0.854,24,1.619,29,2.429,31,0.427,32,0.706,42,0.137,43,0.081,51,2.218,54,0.008,55,0.008,75,1.698,391,1.966,444,3.177,470,3.234,576,4.498,884,4.244,891,3.487,892,5.908,893,4.801,894,4.801,895,4.801,896,4.801,899,4.801,902,4.801,905,4.801,906,5.075,910,3.487,912,3.493,913,4.338,914,3.493,930,3.493,931,4.004,932,4.004,933,4.004,934,4.004,935,4.004,936,7.101,937,4.004,938,4.004,939,4.004]],["title/classes/PageDto.html",[43,0.082,940,2.433]],["body/classes/PageDto.html",[3,0.157,4,0.141,5,0.141,10,0.555,14,1.836,18,1.229,20,1.431,21,0.013,22,1.025,23,0.902,24,1.095,31,0.457,42,0.157,43,0.121,45,2.553,54,0.009,55,0.009,61,1.882,178,1.431,248,1.587,441,1.54,487,2.595,488,3.459,571,3.413,635,3.996,837,5.253,940,3.602,941,3.996,942,5.019,943,6.026,944,5.859,945,5.001,946,6.026,947,4.581,948,4.581,949,6.734,950,2.902,951,3.611,952,4.581,953,4.581]],["title/classes/PageMetaDto.html",[43,0.082,945,2.579]],["body/classes/PageMetaDto.html",[3,0.132,4,0.118,5,0.118,10,0.466,14,2.145,18,1.357,20,1.201,21,0.013,22,0.86,23,0.938,24,0.919,31,0.363,42,0.132,43,0.077,45,2.748,54,0.008,55,0.008,61,2.263,178,1.201,248,1.332,438,2.597,441,1.368,470,3.156,488,4.114,499,4.496,837,2.597,945,3.391,954,5.976,955,3.355,956,6.157,957,6.157,958,5.077,959,5.371,960,6.157,961,5.371,962,3.845,963,4.829,964,5.353,965,3.845,966,3.845,967,3.845,968,3.845,969,3.845,970,3.845,971,3.031,972,3.845,973,2.072,974,5.371,975,3.845,976,4.669,977,3.845,978,3.845,979,3.845,980,3.845,981,3.845,982,3.845]],["title/interfaces/PageMetaDtoParameters.html",[458,1.695,963,2.953]],["body/interfaces/PageMetaDtoParameters.html",[3,0.193,4,0.173,5,0.173,10,0.681,21,0.013,23,0.866,31,0.382,42,0.193,54,0.01,55,0.01,441,1.753,458,2.341,460,3.185,470,3.084,837,3.797,950,3.562,958,5.595,963,4.978,971,4.432,973,4.429,983,4.905,984,4.905,985,3.797]],["title/classes/PageOptionsDto.html",[43,0.082,973,2.193]],["body/classes/PageOptionsDto.html",[3,0.113,4,0.102,5,0.102,10,0.4,18,1.257,21,0.013,22,1.266,23,0.952,24,1.804,31,0.448,42,0.113,43,0.114,45,2.65,51,1.031,54,0.007,55,0.007,61,2.062,75,1.7,86,4.187,121,2.601,178,1.031,248,1.143,353,2.45,399,3.584,422,2.228,438,4.919,441,1.226,470,3.033,487,1.869,514,4.001,575,2.256,621,2.394,638,2.09,790,4.187,884,4.354,954,5.604,959,4.935,961,4.935,973,2.586,974,2.878,976,2.878,986,2.878,987,5.658,988,4.8,989,3.3,990,3.3,991,3.3,992,3.3,993,5.658,994,3.3,995,3.3,996,3.3,997,4.8,998,3.3,999,3.3,1000,4.104,1001,4.8,1002,3.3,1003,3.3,1004,3.3,1005,3.3,1006,6.888,1007,3.3,1008,6.888,1009,2.601,1010,3.3,1011,3.3,1012,4.8,1013,3.3,1014,4.8,1015,3.3]],["title/entities/Product.html",[490,2.193,854,2.433]],["body/entities/Product.html",[3,0.137,4,0.123,5,0.123,8,1.127,10,0.484,18,1.371,21,0.013,22,1.405,23,0.947,24,1.314,31,0.373,42,0.137,43,0.08,54,0.008,55,0.008,61,2.346,75,1.829,338,4.977,439,3.284,441,1.404,456,2.051,470,2.817,490,2.96,492,2.262,499,3.71,500,3.484,510,5.402,512,2.897,514,2.151,571,4.153,582,4.951,583,3.755,584,5.479,585,4.951,586,4.557,587,4.951,854,3.284,1016,3.484,1017,4.793,1018,3.993,1019,3.993,1020,3.993,1021,3.993,1022,3.993,1023,3.993,1024,3.993,1025,4.793]],["title/controllers/ProductController.html",[56,1.695,1026,2.953]],["body/controllers/ProductController.html",[3,0.069,4,0.062,5,0.183,10,0.243,11,1.058,12,2.479,18,1.028,20,1.64,21,0.013,22,1.432,23,0.95,24,1.256,29,1.82,30,2.368,31,0.457,32,0.354,42,0.069,43,0.04,45,0.672,51,1.759,52,2.021,54,0.005,55,0.005,56,0.837,58,0.837,61,1.759,64,2.21,75,1.738,182,1.273,239,2.23,242,1.357,243,1.357,244,1.357,245,2.374,246,4.14,247,1.273,248,0.696,281,1.458,441,0.836,444,2.771,459,2.914,470,1.986,532,1.201,575,3.008,579,4.492,582,2.579,583,4.389,585,3.761,586,4.085,587,3.761,588,1.753,590,1.753,593,1.753,620,2.21,812,1.201,813,1.357,835,1.753,854,4.588,873,1.584,940,1.201,942,3.802,950,1.273,973,3.033,985,1.357,1000,1.458,1026,2.374,1027,1.753,1028,4.771,1029,2.854,1030,4.139,1031,3.272,1032,4.139,1033,3.611,1034,3.272,1035,2.01,1036,1.753,1037,2.01,1038,2.01,1039,2.01,1040,2.854,1041,2.01,1042,2.01,1043,2.854,1044,2.01,1045,2.01,1046,2.01,1047,2.854,1048,3.272,1049,4.162,1050,4.489,1051,4.162,1052,4.162,1053,2.01,1054,3.461,1055,1.753,1056,3.547,1057,2.01,1058,2.01,1059,2.854,1060,3.611,1061,1.753,1062,1.753,1063,1.458,1064,1.357,1065,1.584,1066,2.622,1067,1.753,1068,1.584,1069,1.584,1070,1.584,1071,1.458,1072,1.753,1073,1.753,1074,1.584,1075,1.458,1076,2.01,1077,2.01,1078,4.912,1079,2.01,1080,2.01,1081,2.854,1082,2.854,1083,2.854,1084,2.854,1085,2.854,1086,2.854,1087,2.01,1088,1.753,1089,2.01,1090,2.01,1091,2.01,1092,2.01,1093,2.01,1094,2.854,1095,2.01,1096,2.01,1097,2.01,1098,2.01,1099,2.01,1100,2.01,1101,2.01,1102,2.01,1103,2.01]],["title/modules/ProductModule.html",[92,1.271,110,2.749]],["body/modules/ProductModule.html",[3,0.166,4,0.149,5,0.149,21,0.013,31,0.526,32,0.855,42,0.166,43,0.098,54,0.01,55,0.01,58,2.604,92,2.162,94,2.101,95,2.281,96,2.492,97,2.492,98,2.281,99,3.556,100,2.492,108,4.633,110,5.395,114,3.213,115,2.492,116,2.492,118,3.213,133,2.748,134,3.824,541,3.276,542,2.492,812,2.9,854,2.9,1026,5.022,1066,4.91,1067,4.232,1068,3.824,1104,4.232,1105,4.232,1106,4.852,1107,4.852,1108,4.852,1109,4.852]],["title/injectables/ProductService.html",[0,0.693,1066,2.579]],["body/injectables/ProductService.html",[0,0.644,2,0.807,3,0.083,4,0.074,5,0.074,10,0.292,11,1.223,12,2.567,14,1.517,18,1.165,20,1.907,21,0.013,22,1.366,23,0.77,24,1.46,29,1.973,30,2.594,31,0.472,32,0.425,42,0.083,43,0.048,44,1.707,45,1.266,51,1.994,52,2.588,54,0.006,55,0.006,64,2.556,75,1.626,133,1.366,241,1.366,275,3.251,365,1.441,387,1.749,390,2.999,391,3.134,394,1.9,444,2.863,456,1.238,459,3.134,492,1.366,542,1.238,547,3.575,554,1.749,579,4.494,586,3.84,768,3.816,770,1.9,812,2.263,813,1.628,854,3.816,866,1.749,872,4.076,940,1.441,942,1.628,945,3.354,950,2.398,951,1.9,958,2.746,973,3.289,985,1.628,1029,3.302,1033,4.076,1036,3.302,1050,4.429,1054,3.84,1055,2.103,1056,3.575,1063,1.749,1066,2.398,1068,1.9,1069,1.9,1070,1.9,1110,2.103,1111,5.294,1112,3.785,1113,3.785,1114,3.785,1115,2.411,1116,2.411,1117,3.785,1118,2.411,1119,2.411,1120,3.785,1121,2.411,1122,3.785,1123,2.411,1124,3.785,1125,2.411,1126,2.411,1127,2.411,1128,4.673,1129,2.411,1130,2.411,1131,2.411,1132,3.302,1133,2.411,1134,2.411,1135,2.103,1136,2.103,1137,2.103,1138,2.103,1139,2.103,1140,2.103,1141,2.411,1142,2.411,1143,3.785,1144,2.411,1145,2.411,1146,3.785,1147,4.673,1148,4.076,1149,3.785,1150,3.785,1151,3.785,1152,2.411,1153,3.785,1154,2.411,1155,2.411,1156,2.411,1157,4.673]],["title/entities/Profile.html",[490,2.193,714,1.913]],["body/entities/Profile.html",[3,0.118,4,0.106,5,0.106,8,0.975,10,0.418,18,1.346,21,0.013,23,0.961,24,1.186,31,0.456,42,0.118,43,0.069,54,0.008,55,0.008,61,2.303,75,1.517,285,2.55,338,4.943,439,2.965,441,1.267,446,2.965,456,1.774,470,2.642,490,2.672,492,1.956,507,2.722,510,5.311,511,3.91,512,2.505,513,1.956,514,3.418,604,5.064,605,5.064,606,5.064,607,5.813,608,5.813,609,4.576,610,5.064,620,3.35,621,5.35,628,3.012,629,3.012,631,3.012,714,2.332,1158,3.012,1159,3.453,1160,3.453,1161,3.453,1162,4.327,1163,3.453,1164,3.453,1165,3.453,1166,3.453,1167,4.961,1168,3.453,1169,3.453]],["title/controllers/ProfileController.html",[56,1.695,1170,2.953]],["body/controllers/ProfileController.html",[3,0.139,4,0.125,5,0.125,10,0.491,11,1.795,12,2.464,18,1.014,20,1.734,21,0.013,22,1.242,23,0.701,24,1.328,29,1.795,30,2.504,31,0.5,32,0.715,42,0.139,43,0.082,45,1.357,51,1.734,52,1.993,54,0.008,55,0.008,56,1.689,58,1.689,61,1.734,182,2.569,197,4.508,200,5.093,239,3.411,242,3.75,243,3.75,244,2.739,245,4.028,247,2.569,248,1.405,262,2.942,263,2.942,264,2.298,265,2.942,286,2.739,291,4.028,521,3.538,524,3.538,532,2.424,601,5.173,714,1.907,1170,4.028,1171,3.538,1172,5.524,1173,5.524,1174,4.056,1175,4.056,1176,4.056,1177,4.056,1178,4.012,1179,4.056,1180,3.538,1181,3.197,1182,4.056,1183,4.056,1184,4.056,1185,4.056]],["title/modules/ProfileModule.html",[92,1.271,111,2.749]],["body/modules/ProfileModule.html",[3,0.167,4,0.15,5,0.15,21,0.013,31,0.527,32,0.861,42,0.167,43,0.098,54,0.01,55,0.01,58,2.615,92,2.169,94,2.114,95,2.295,96,2.508,97,2.508,98,2.295,99,3.567,100,2.508,111,5.402,113,4.398,114,3.226,115,2.508,116,2.508,118,3.226,123,3.542,541,3.297,542,2.508,714,2.295,1170,5.037,1178,4.919,1186,4.259,1187,4.882,1188,4.259,1189,4.882,1190,3.848,1191,4.882,1192,4.882,1193,4.882]],["title/injectables/ProfileService.html",[0,0.693,1178,2.579]],["body/injectables/ProfileService.html",[0,0.921,2,1.306,3,0.134,4,0.12,5,0.12,10,0.473,11,1.748,12,2.436,14,2.167,17,3.232,18,1.133,20,1.938,21,0.013,22,1.388,23,0.783,24,1.484,29,1.748,30,2.438,31,0.507,32,0.688,40,2.005,42,0.134,43,0.079,44,2.438,45,1.809,51,1.689,52,2.405,54,0.008,55,0.008,275,2.438,285,2.617,444,1.69,456,2.005,513,2.211,542,2.005,547,4.525,554,2.832,559,3.405,560,3.405,601,5.146,714,1.835,1172,4.718,1173,4.718,1178,3.426,1180,3.405,1181,3.077,1190,3.077,1194,3.405,1195,3.903,1196,3.903,1197,5.408,1198,5.408,1199,3.903,1200,5.408,1201,3.903,1202,3.903,1203,5.408,1204,3.903,1205,3.903,1206,3.903,1207,3.903]],["title/modules/RedisModule.html",[92,1.271,112,2.749]],["body/modules/RedisModule.html",[3,0.174,4,0.157,5,0.157,12,1.703,16,3.655,21,0.013,31,0.505,32,0.897,39,2.039,42,0.174,43,0.102,51,1.59,54,0.01,55,0.01,92,2.015,94,2.204,112,4.356,118,3.313,119,3.856,347,4.012,366,3.692,370,4.44,371,4.012,404,2.742,432,4.012,571,2.883,657,4.012,660,4.44,662,4.012,664,4.44,1208,5.09,1209,5.09,1210,6.45,1211,5.627,1212,5.09,1213,5.09,1214,5.09,1215,5.09,1216,5.09,1217,5.09,1218,5.09,1219,5.09]],["title/interfaces/RequestWithUser.html",[197,2.433,458,1.695]],["body/interfaces/RequestWithUser.html",[3,0.195,4,0.176,5,0.176,8,1.954,10,0.691,21,0.013,23,0.72,31,0.47,42,0.195,54,0.011,55,0.011,197,4.138,285,2.758,441,1.769,458,2.375,460,3.232,513,3.232,1075,4.138,1220,4.977,1221,7.454]],["title/interfaces/StoredFile.html",[458,1.695,471,2.579]],["body/interfaces/StoredFile.html",[3,0.175,4,0.157,5,0.199,8,1.825,21,0.013,22,1.142,23,0.644,42,0.263,54,0.01,55,0.01,75,1.93,444,2.211,445,3.448,446,3.052,458,3.103,459,2.507,460,2.893,461,2.893,462,3.235,463,5.144,464,4.689,465,3.704,466,4.689,467,3.704,468,4.365,469,4.789,470,2.691,471,4.095,472,4.493,473,4.493,474,3.704,475,3.448,476,3.448]],["title/interfaces/StoredFileMetadata.html",[458,1.695,473,2.579]],["body/interfaces/StoredFileMetadata.html",[3,0.15,4,0.135,5,0.18,8,1.235,10,0.53,21,0.013,22,1.572,23,0.986,24,1.398,42,0.251,54,0.009,55,0.009,75,1.98,441,1.493,444,3.042,445,4.744,446,3.935,458,2.925,459,2.148,460,2.478,461,2.478,462,2.772,463,4.775,464,5.311,465,3.174,466,5.311,467,3.174,468,4.944,469,4.944,470,2.925,471,2.772,472,3.703,473,4.17,474,5.096,475,2.954,476,2.954]],["title/interfaces/TokenPayload.html",[26,2.749,458,1.695]],["body/interfaces/TokenPayload.html",[3,0.206,4,0.185,5,0.185,10,0.728,21,0.012,23,0.759,26,4.825,42,0.206,54,0.011,55,0.011,75,1.823,356,6.881,441,1.826,458,2.504,460,3.406,1222,5.246]],["title/injectables/TransformInterceptor.html",[0,0.693,1223,3.208]],["body/injectables/TransformInterceptor.html",[0,1.03,2,1.542,3,0.158,4,0.142,5,0.142,10,0.558,11,1.955,18,0.841,20,1.439,21,0.013,22,1.031,23,0.763,24,1.102,29,1.489,31,0.411,32,0.812,42,0.231,43,0.093,51,1.889,54,0.009,55,0.009,239,3.259,275,2.727,470,1.918,850,3.632,944,3.632,1223,4.768,1224,3.343,1225,6.753,1226,4.608,1227,6.255,1228,7.171,1229,7.171,1230,4.608,1231,6.049,1232,6.753,1233,6.049,1234,4.608,1235,4.02,1236,4.02,1237,3.632,1238,4.02,1239,4.608,1240,4.608,1241,4.02,1242,4.608,1243,4.608,1244,4.608,1245,4.608,1246,4.608,1247,4.608,1248,4.608,1249,4.608,1250,4.608,1251,4.608]],["title/classes/UpdateAuthDto.html",[43,0.082,1252,3.208]],["body/classes/UpdateAuthDto.html",[3,0.203,4,0.182,5,0.182,8,1.999,21,0.013,31,0.481,42,0.203,43,0.119,54,0.011,55,0.011,178,1.85,563,4.296,565,4.668,891,3.752,1252,5.581,1253,5.166,1254,7.08,1255,3.752,1256,3.999,1257,3.999,1258,5.922]],["title/classes/UpdateConsentDto.html",[43,0.082,1259,3.208]],["body/classes/UpdateConsentDto.html",[3,0.204,4,0.183,5,0.183,8,2.003,21,0.013,31,0.482,42,0.204,43,0.12,54,0.011,55,0.011,178,1.857,248,2.06,520,3.553,529,4.312,567,4.686,891,3.766,1255,3.766,1259,5.594,1260,5.185,1261,7.097]],["title/classes/UpdateOrderDto.html",[43,0.082,906,2.749]],["body/classes/UpdateOrderDto.html",[3,0.203,4,0.182,5,0.182,8,1.999,21,0.013,31,0.481,42,0.203,43,0.119,54,0.011,55,0.011,178,1.85,576,3.752,578,4.668,891,3.752,906,4.781,913,4.668,1255,3.752,1256,3.999,1257,3.999,1262,5.166,1263,7.08]],["title/classes/UpdateProductDto.html",[43,0.082,1056,2.749]],["body/classes/UpdateProductDto.html",[3,0.203,4,0.182,5,0.182,8,1.999,21,0.013,31,0.481,42,0.203,43,0.119,54,0.011,55,0.011,178,1.85,579,3.752,581,4.668,1056,4.781,1069,4.668,1070,4.668,1255,3.752,1256,3.999,1257,3.999,1264,5.166,1265,7.08]],["title/classes/UpdateProfileDto.html",[43,0.082,1266,3.208]],["body/classes/UpdateProfileDto.html",[3,0.204,4,0.183,5,0.183,8,2.003,21,0.013,31,0.482,42,0.204,43,0.12,54,0.011,55,0.011,178,1.857,248,2.06,601,3.766,603,4.686,891,3.766,1181,4.686,1255,3.766,1266,5.594,1267,5.185,1268,7.097]],["title/classes/UpdateUserDto.html",[43,0.082,1269,2.749]],["body/classes/UpdateUserDto.html",[3,0.203,4,0.182,5,0.182,8,1.999,21,0.013,31,0.481,42,0.203,43,0.119,54,0.011,55,0.011,178,1.85,236,3.355,249,4.296,250,3.999,633,4.296,1255,3.752,1256,3.999,1257,3.999,1269,4.781,1270,5.166,1271,7.08]],["title/entities/User.html",[285,1.362,490,2.193]],["body/entities/User.html",[3,0.091,4,0.082,5,0.082,8,0.749,10,0.321,12,0.888,18,1.246,21,0.013,22,1.247,23,0.901,24,1.438,31,0.485,32,0.468,42,0.091,43,0.082,51,0.829,52,1.464,54,0.006,55,0.006,61,2.132,75,1.632,275,1.196,285,1.661,338,4.799,353,2.413,367,2.091,368,1.925,372,3.351,373,1.363,383,1.792,385,3.557,386,1.792,387,1.925,390,1.503,391,1.303,404,3.24,439,2.437,441,1.042,456,1.363,490,2.196,491,3.746,492,1.503,507,3.214,510,4.727,511,3.914,512,1.925,514,3.002,543,1.925,571,4.119,620,1.792,621,4.951,634,2.969,714,3.209,1009,2.091,1017,2.314,1025,2.314,1064,4.062,1065,2.091,1162,3.557,1190,2.091,1237,2.091,1272,2.314,1273,4.966,1274,5.573,1275,5.573,1276,4.077,1277,2.653,1278,2.653,1279,2.653,1280,2.653,1281,2.653,1282,2.653,1283,2.653,1284,2.653,1285,2.653,1286,4.966,1287,2.653,1288,2.653,1289,4.077,1290,4.966,1291,3.557,1292,2.653,1293,4.966,1294,2.653,1295,2.653,1296,2.314,1297,2.653,1298,2.653,1299,4.077,1300,2.653,1301,2.653,1302,2.653,1303,2.653,1304,2.653,1305,2.653,1306,2.653,1307,2.314,1308,2.653,1309,2.653,1310,2.653,1311,2.653,1312,2.653]],["title/controllers/UserController.html",[56,1.695,1313,2.953]],["body/controllers/UserController.html",[3,0.097,4,0.087,5,0.178,10,0.344,11,1.389,12,2.388,17,2.243,18,0.946,20,1.618,21,0.013,22,1.387,23,0.901,24,1.239,29,1.674,30,1.937,31,0.514,32,0.501,40,1.46,42,0.097,43,0.057,45,0.951,51,1.618,52,1.86,54,0.007,55,0.007,56,1.183,58,1.183,61,1.618,64,2.902,75,1.62,182,1.801,197,3.452,200,3.9,236,3.513,239,2.315,243,2.902,244,1.919,245,3.117,246,4.084,247,1.801,248,0.985,249,2.062,250,1.919,262,2.062,263,2.062,264,1.61,265,2.062,281,2.062,285,2.266,286,1.919,291,2.062,353,1.861,404,2.315,422,1.919,435,2.479,441,0.726,444,1.861,459,2.835,513,1.61,532,1.699,575,2.435,583,3.707,620,1.919,634,3.452,638,1.801,646,2.24,714,1.336,812,1.699,813,1.919,940,1.699,942,3.498,950,1.801,973,3.514,985,1.919,1040,2.479,1043,3.748,1047,2.479,1049,3.748,1050,4.189,1051,3.748,1052,3.748,1054,3.117,1059,3.748,1060,3.748,1061,2.479,1062,2.479,1063,2.062,1064,1.919,1065,2.24,1071,2.062,1072,2.479,1073,2.479,1074,2.24,1075,2.062,1081,2.479,1082,2.479,1083,2.479,1084,2.479,1085,2.479,1094,2.479,1269,3.9,1313,3.117,1314,2.479,1315,4.519,1316,4.297,1317,5.181,1318,2.479,1319,2.842,1320,2.842,1321,2.842,1322,2.842,1323,2.842,1324,2.842,1325,2.842,1326,2.842,1327,2.842,1328,2.842,1329,2.842,1330,2.842,1331,2.842,1332,2.842]],["title/modules/UserModule.html",[92,1.271,113,2.306]],["body/modules/UserModule.html",[3,0.154,4,0.139,5,0.139,17,3.53,21,0.013,31,0.534,32,0.794,39,1.804,40,2.312,42,0.154,43,0.091,54,0.009,55,0.009,58,2.48,92,2.085,94,1.949,95,2.116,96,2.312,97,2.312,98,2.116,99,3.429,100,3.429,108,4.539,113,4.508,114,3.06,115,2.312,116,2.312,118,3.06,119,3.561,133,2.55,134,3.548,285,1.506,324,3.927,325,3.04,334,3.927,513,2.55,541,3.04,542,2.312,812,2.691,1313,4.843,1333,3.927,1334,3.927,1335,4.501,1336,3.927,1337,4.501,1338,4.501,1339,4.501]],["title/injectables/UserService.html",[0,0.693,17,1.762]],["body/injectables/UserService.html",[0,0.609,2,0.752,3,0.077,4,0.069,5,0.069,10,0.272,11,1.157,12,2.534,14,1.435,16,3.05,17,1.55,18,1.134,20,1.941,21,0.013,22,1.487,23,0.784,24,1.486,29,1.914,30,2.507,31,0.494,32,0.396,39,0.901,42,0.077,43,0.045,44,2.295,45,1.703,51,1.941,52,2.581,54,0.005,55,0.005,64,2.418,75,1.416,133,1.273,202,3.754,236,3.654,241,1.273,250,1.518,255,1.96,275,3.137,276,2.418,285,2.437,325,1.518,344,5.42,353,2.565,365,1.343,367,1.771,368,1.63,390,2.028,391,2.499,404,1.929,415,1.96,426,1.96,444,1.933,456,1.154,459,2.499,492,1.273,542,1.154,547,3.438,554,1.63,634,2.14,714,1.056,768,3.714,770,1.771,812,2.14,813,1.518,940,1.343,945,3.225,950,2.268,951,1.771,958,2.597,973,3.191,985,1.518,1000,1.63,1050,3.693,1054,2.597,1063,1.63,1132,3.123,1135,1.96,1136,1.96,1137,1.96,1138,1.96,1139,1.96,1140,1.96,1148,1.96,1269,3.438,1315,3.123,1318,3.123,1340,1.96,1341,3.581,1342,3.581,1343,3.581,1344,3.581,1345,4.463,1346,2.247,1347,2.247,1348,3.581,1349,3.581,1350,2.247,1351,3.581,1352,2.247,1353,2.247,1354,3.581,1355,2.247,1356,3.581,1357,2.247,1358,2.247,1359,2.247,1360,2.247,1361,2.247,1362,2.247,1363,2.247,1364,2.247,1365,3.581,1366,2.247,1367,3.581,1368,2.247,1369,2.247,1370,2.247,1371,2.247,1372,2.247,1373,3.581,1374,2.247,1375,3.581,1376,2.247,1377,2.247,1378,2.247,1379,3.581,1380,2.247,1381,3.581,1382,3.581,1383,2.247,1384,2.247,1385,2.247]],["title/coverage.html",[1386,4.388]],["body/coverage.html",[0,1.313,1,1.553,5,0.071,6,2.007,7,2.007,17,0.996,21,0.013,23,0.29,26,1.553,43,0.157,54,0.006,55,0.006,56,2.611,57,1.669,59,2.007,65,1.457,98,1.081,133,1.303,173,2.007,177,1.553,179,2.007,180,1.669,181,2.007,197,1.375,202,1.553,206,1.553,210,1.669,236,1.303,251,1.553,258,1.375,260,1.669,264,1.303,266,1.669,268,1.669,270,1.669,285,0.77,319,1.553,320,1.553,321,1.553,322,1.553,335,2.007,345,1.457,376,1.813,379,1.813,391,1.129,439,1.375,440,2.007,458,2.611,459,1.129,461,3.186,462,3.268,471,1.457,472,1.457,473,1.457,477,2.007,478,2.007,490,2.779,491,1.303,493,2.007,515,1.669,516,2.007,520,1.375,526,1.457,545,2.007,563,1.669,564,2.007,565,2.875,566,2.007,567,2.875,576,1.457,577,2.007,578,2.875,579,1.457,580,2.007,581,2.875,601,1.457,602,2.007,603,2.875,632,2.007,633,3.288,672,2.007,678,2.007,697,2.007,698,2.007,704,2.007,705,3.563,708,2.007,709,3.483,714,1.081,739,2.007,741,2.007,743,2.007,751,2.007,753,2.007,761,2.007,768,1.375,783,2.007,837,1.553,850,2.875,854,1.375,866,6.124,874,2.007,876,2.007,884,1.375,885,2.007,889,1.669,890,2.007,906,1.553,910,1.457,930,2.007,940,1.375,941,2.007,945,1.457,954,2.875,955,2.007,963,1.669,971,1.813,973,1.239,983,2.007,984,2.007,986,2.007,1016,2.007,1026,1.669,1027,2.007,1056,1.553,1066,1.457,1071,1.669,1110,2.007,1158,2.007,1170,1.669,1171,2.007,1178,1.457,1194,2.007,1220,2.007,1222,2.007,1223,1.813,1224,2.646,1252,1.813,1253,2.007,1259,1.813,1260,2.007,1262,2.007,1264,2.007,1266,1.813,1267,2.007,1269,1.553,1270,2.007,1272,2.007,1313,1.669,1314,2.007,1340,2.007,1386,1.813,1387,2.3,1388,2.3,1389,2.3,1390,6.505,1391,2.3,1392,2.3,1393,7.909,1394,2.007,1395,5.158,1396,7.003,1397,2.3,1398,6.271,1399,5.158,1400,5.624,1401,2.007,1402,2.007,1403,2.007,1404,2.007,1405,2.007,1406,2.007,1407,4.532,1408,2.3,1409,2.007]],["title/dependencies.html",[95,2.303,1410,2.96]],["body/dependencies.html",[21,0.013,32,0.7,34,1.951,37,4.637,38,4.316,39,1.592,43,0.11,54,0.008,55,0.008,73,3.132,95,1.868,121,3.132,132,2.882,248,1.377,325,2.683,347,4.316,368,2.882,371,4.316,432,3.132,456,2.041,487,2.251,542,2.041,689,3.466,719,4.316,720,4.776,730,3.972,758,4.316,772,3.132,773,3.132,832,3.466,879,4.316,1009,3.132,1074,3.132,1075,2.882,1211,3.466,1235,3.466,1256,2.683,1257,2.683,1291,3.466,1307,3.466,1411,3.973,1412,3.973,1413,3.973,1414,6.264,1415,3.973,1416,3.973,1417,3.973,1418,3.973,1419,3.973,1420,3.973,1421,3.973,1422,3.973,1423,3.973,1424,3.973,1425,5.475,1426,3.973,1427,3.973,1428,3.973,1429,3.973,1430,3.973,1431,3.973,1432,3.973,1433,3.973,1434,3.973,1435,7.081,1436,3.973,1437,5.475,1438,3.973,1439,3.973,1440,3.973,1441,3.973,1442,3.973,1443,3.973,1444,3.973,1445,3.973,1446,3.973,1447,3.973,1448,3.973,1449,3.973,1450,3.973,1451,3.973,1452,3.973,1453,3.973,1454,3.973,1455,5.475,1456,3.973,1457,3.973,1458,3.973,1459,3.973,1460,3.973,1461,3.973,1462,3.973]],["title/miscellaneous/enumerations.html",[1463,1.922,1464,4.273]],["body/miscellaneous/enumerations.html",[10,0.57,21,0.013,54,0.009,55,0.009,285,2.052,372,3.011,374,5.35,399,5.305,438,4.141,599,3.413,607,4.834,608,4.834,719,4.834,730,4.449,758,4.834,879,4.834,884,3.666,887,5.35,1064,4.141,1296,5.35,1463,2.665,1464,4.105,1465,4.705,1466,4.705,1467,4.705,1468,4.705,1469,4.705,1470,4.705,1471,4.705,1472,4.705,1473,4.705,1474,5.35,1475,4.705,1476,5.35,1477,4.705,1478,4.705,1479,4.705,1480,4.705,1481,4.705,1482,4.705,1483,6.132,1484,4.705,1485,4.705,1486,4.705,1487,4.705,1488,4.705,1489,4.705,1490,4.705]],["title/miscellaneous/functions.html",[1463,1.922,1491,4.273]],["body/miscellaneous/functions.html",[10,0.726,20,1.871,21,0.012,22,1.34,23,0.756,24,1.432,54,0.011,55,0.011,98,3.578,399,3.795,470,2.968,514,3.227,1224,4.345,1236,5.225,1237,4.722,1238,5.225,1401,6.219,1406,5.225,1463,3.393,1491,5.225,1492,5.99,1493,5.225]],["title/index.html",[10,0.411,1494,3.393,1495,3.393]],["body/index.html",[4,0.145,21,0.013,54,0.009,55,0.009,396,4.105,547,3.177,575,3.207,583,2.813,1386,3.709,1496,4.705,1497,4.705,1498,6.132,1499,4.705,1500,4.705,1501,4.705,1502,4.705,1503,4.705,1504,4.705,1505,6.822,1506,4.705,1507,4.705,1508,4.705,1509,7.829,1510,4.705,1511,4.105,1512,4.705,1513,7.687,1514,4.705,1515,4.705,1516,6.132,1517,4.705,1518,4.705,1519,4.705,1520,4.705,1521,6.132,1522,6.132,1523,4.705,1524,4.705,1525,4.705,1526,6.132,1527,6.132,1528,4.105,1529,4.705,1530,4.705,1531,4.705,1532,4.705,1533,3.709,1534,4.705,1535,4.705,1536,4.705,1537,4.705,1538,4.705,1539,4.705,1540,4.705,1541,4.705,1542,4.105,1543,4.105,1544,4.705,1545,4.705,1546,4.705,1547,4.705,1548,4.705,1549,4.705,1550,4.105]],["title/modules.html",[94,2.41]],["body/modules.html",[21,0.01,54,0.01,55,0.01,93,3.896,94,2.325,104,3.627,105,3.627,106,3.627,107,3.402,108,3.21,109,3.627,110,3.627,111,3.627,112,3.627,113,3.042,279,7.17,1533,6.479,1551,8.219,1552,8.319,1553,6.671,1554,6.671]],["title/overview.html",[1555,4.856]],["body/overview.html",[1,3.83,2,1.109,17,3.082,21,0.013,54,0.007,55,0.007,58,1.38,65,3.593,92,1.035,93,5.974,94,1.435,95,1.558,96,1.702,97,1.702,98,1.558,99,1.702,100,1.702,101,2.891,102,2.891,103,2.891,104,5.468,105,4.807,106,3.83,107,4.51,108,4.359,109,4.465,110,4.807,111,4.807,112,3.83,113,4.334,114,2.473,115,1.702,116,1.702,178,1.035,258,3.39,316,2.891,318,2.891,319,3.83,320,3.83,321,3.83,322,3.83,345,4.51,460,1.877,492,1.877,526,3.593,535,2.891,537,2.891,599,2.404,617,2.891,674,2.891,675,2.891,676,2.891,765,2.891,766,2.891,767,2.891,768,4.255,910,3.593,926,2.891,927,2.891,1066,3.593,1104,2.891,1105,2.891,1178,3.593,1186,2.891,1188,2.891,1333,2.891,1334,2.891,1336,2.891,1555,2.891,1556,4.2,1557,3.314,1558,3.314]],["title/properties.html",[441,1.252,1410,2.96]],["body/properties.html",[21,0.013,54,0.011,55,0.011,441,1.611,583,3.769,1543,5.5,1550,5.5,1559,6.305,1560,6.305,1561,6.305]],["title/miscellaneous/typealiases.html",[1463,1.922,1562,4.898]],["body/miscellaneous/typealiases.html",[10,0.749,21,0.012,23,0.78,54,0.011,55,0.011,461,3.501,462,3.915,469,4.904,475,4.173,476,4.173,1224,4.483,1241,6.335,1463,3.501,1493,5.391,1563,6.18,1564,6.18]],["title/miscellaneous/variables.html",[1463,1.922,1565,4.273]],["body/miscellaneous/variables.html",[8,0.304,10,0.13,12,0.36,21,0.013,22,0.241,23,0.136,43,0.022,51,0.599,52,0.386,54,0.003,55,0.003,176,2.483,200,0.727,239,0.58,264,0.61,275,1.42,285,0.36,286,0.727,353,1.123,376,1.512,379,1.512,391,0.528,399,1.996,421,0.939,422,2.127,429,3.153,438,3.83,468,3.46,510,4.179,514,1.697,575,0.506,599,1.391,609,3.159,833,1.673,866,4.408,942,0.727,944,2.849,1000,0.781,1064,1.295,1071,1.391,1078,1.673,1086,0.939,1088,2.263,1227,0.939,1394,0.939,1402,0.939,1403,0.939,1404,0.939,1405,1.673,1409,2.748,1463,0.61,1474,2.263,1476,4.047,1511,1.673,1528,0.939,1533,0.848,1542,1.673,1556,2.748,1565,0.939,1566,1.076,1567,1.076,1568,1.076,1569,1.076,1570,1.076,1571,1.076,1572,1.076,1573,1.076,1574,1.076,1575,1.076,1576,1.076,1577,1.918,1578,1.076,1579,1.076,1580,1.076,1581,1.076,1582,1.076,1583,1.076,1584,1.076,1585,1.918,1586,1.076,1587,1.076,1588,1.076,1589,1.918,1590,3.15,1591,1.076,1592,1.076,1593,1.076,1594,1.076,1595,3.614,1596,2.595,1597,4.008,1598,2.595,1599,4.64,1600,1.076,1601,1.076,1602,1.076,1603,1.918,1604,1.918,1605,1.076,1606,1.918,1607,1.076,1608,2.595,1609,1.918,1610,1.076,1611,1.918,1612,1.076,1613,1.918,1614,1.076,1615,1.076,1616,1.076,1617,1.076,1618,4.64,1619,4.64,1620,1.918,1621,2.595,1622,1.076,1623,1.918,1624,1.076,1625,1.076,1626,1.076,1627,1.076,1628,1.918,1629,6.189,1630,1.076,1631,2.595,1632,4.008,1633,3.15,1634,1.076,1635,5.508,1636,1.076,1637,1.076,1638,1.076,1639,1.076,1640,1.076,1641,1.076,1642,1.076,1643,1.076,1644,1.918,1645,3.15,1646,6.839,1647,1.918,1648,1.076,1649,1.076,1650,1.918,1651,1.918,1652,1.076,1653,1.076,1654,1.918,1655,1.076,1656,1.918,1657,1.076,1658,1.918,1659,1.076,1660,1.076,1661,1.076,1662,1.076,1663,1.076,1664,1.076,1665,1.076,1666,1.076,1667,2.595,1668,1.076,1669,2.595,1670,1.076,1671,1.076,1672,3.15,1673,6.709,1674,1.918,1675,4.008,1676,1.076,1677,1.076,1678,1.918,1679,6.189,1680,1.918,1681,1.076,1682,1.076,1683,2.595,1684,1.076,1685,4.008,1686,1.076,1687,1.918,1688,2.595,1689,4.346,1690,1.076,1691,3.15,1692,1.076,1693,3.614,1694,3.614,1695,3.614,1696,1.076,1697,1.076,1698,1.076,1699,1.076,1700,1.076,1701,1.076,1702,2.595,1703,1.076,1704,1.918,1705,1.076,1706,1.918,1707,1.076,1708,1.076,1709,1.076,1710,1.076,1711,1.918,1712,6.478,1713,6.478,1714,6.478,1715,6.478,1716,6.478,1717,6.478,1718,6.478,1719,6.637,1720,7.698,1721,7.698,1722,7.698,1723,7.614,1724,6.189,1725,1.076,1726,1.076,1727,1.076,1728,3.15,1729,1.076,1730,1.076,1731,1.076,1732,1.076,1733,1.076,1734,1.076,1735,1.076,1736,1.076,1737,1.076,1738,1.076,1739,1.076,1740,1.076,1741,1.076,1742,1.076,1743,1.076,1744,1.076,1745,1.076,1746,1.076,1747,1.076,1748,1.076,1749,1.076,1750,1.076,1751,1.076,1752,1.076,1753,1.076,1754,7.543,1755,1.918,1756,1.918,1757,1.918,1758,1.918,1759,1.918,1760,5.124,1761,6.478,1762,1.918,1763,1.918,1764,1.918,1765,1.918,1766,1.918,1767,1.918,1768,1.918,1769,6.478,1770,1.918,1771,1.918,1772,1.918,1773,1.918,1774,1.918,1775,1.918,1776,1.918,1777,1.076,1778,1.076,1779,1.076,1780,1.076,1781,1.076,1782,1.076,1783,1.076,1784,1.076,1785,1.076,1786,1.076,1787,1.076,1788,3.15,1789,1.076,1790,1.076,1791,1.076,1792,1.076,1793,1.076,1794,1.076,1795,1.076,1796,1.076,1797,1.076,1798,1.076]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"interfaces/BufferedFile.html":{},"classes/ChangePasswordDto.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"modules/ConsentModule.html":{},"injectables/ConsentService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateConsentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailVerificationDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"interfaces/HasFile.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUser.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":866,"title":{},"body":{"injectables/MinioClientService.html":{},"injectables/ProductService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1560,"title":{},"body":{"properties.html":{}}}],["0.1",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.1.8",{"_index":1436,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":1445,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1455,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1462,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["0.5.1",{"_index":1444,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1454,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1393,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1392,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1391,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1390,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1396,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1400,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1397,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1399,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1407,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1398,"title":{},"body":{"coverage.html":{}}}],["000000",{"_index":701,"title":{},"body":{"classes/EmailVerificationDto.html":{}}}],["007bff",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["01234",{"_index":1792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["03",{"_index":616,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["07/01/2024",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["07/15/2024",{"_index":1738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0px",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":1457,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":1456,"title":{},"body":{"dependencies.html":{}}}],["1.0.3",{"_index":1438,"title":{},"body":{"dependencies.html":{}}}],["1.0.38",{"_index":1439,"title":{},"body":{"dependencies.html":{}}}],["1.0.4",{"_index":1440,"title":{},"body":{"dependencies.html":{}}}],["1.0.6",{"_index":1458,"title":{},"body":{"dependencies.html":{}}}],["1.1.25",{"_index":1412,"title":{},"body":{"dependencies.html":{}}}],["1.4.12",{"_index":1432,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1450,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1447,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":1426,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":1448,"title":{},"body":{"dependencies.html":{}}}],["1.8.6",{"_index":1428,"title":{},"body":{"dependencies.html":{}}}],["1.paragraph_block",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.spacer_block",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10",{"_index":1000,"title":{},"body":{"classes/PageOptionsDto.html":{},"controllers/ProductController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":1414,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1421,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1418,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1417,"title":{},"body":{"dependencies.html":{}}}],["10.2.3",{"_index":1420,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1088,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["1024",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["10px",{"_index":1613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10})@type(undefined)@isoptional",{"_index":1002,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["11",{"_index":617,"title":{},"body":{"classes/CreateProfileDto.html":{},"overview.html":{}}}],["1234",{"_index":839,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["12px",{"_index":1624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14px",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["15000",{"_index":595,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["15px",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16px",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17.1.1",{"_index":1413,"title":{},"body":{"dependencies.html":{}}}],["17.1.14",{"_index":1430,"title":{},"body":{"dependencies.html":{}}}],["184",{"_index":624,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["1999",{"_index":615,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["1})@type(undefined)@isoptional",{"_index":998,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["2",{"_index":1474,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":1443,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":1452,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1441,"title":{},"body":{"dependencies.html":{}}}],["2.4.6",{"_index":1423,"title":{},"body":{"dependencies.html":{}}}],["2.paragraph_block",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["20",{"_index":1557,"title":{},"body":{"overview.html":{}}}],["200",{"_index":1237,"title":{},"body":{"injectables/TransformInterceptor.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["20px",{"_index":1597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["22",{"_index":1558,"title":{},"body":{"overview.html":{}}}],["23502",{"_index":1488,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["23505",{"_index":1486,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["24px",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["26",{"_index":613,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["3",{"_index":1476,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["3.2.3",{"_index":1415,"title":{},"body":{"dependencies.html":{}}}],["3.paragraph_block",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.spacer_block",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["300",{"_index":82,"title":{},"body":{"controllers/AppController.html":{}}}],["30px",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["32px",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["333",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["36px",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":599,"title":{},"body":{"classes/CreateProductDto.html":{},"miscellaneous/enumerations.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["4.0.1",{"_index":1437,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":1442,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":737,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["409",{"_index":738,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["40px",{"_index":1623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["50",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"classes/PageOptionsDto.html":{}}}],["5000",{"_index":1101,"title":{},"body":{"controllers/ProductController.html":{}}}],["5px",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.4.15",{"_index":1434,"title":{},"body":{"dependencies.html":{}}}],["6.9.14",{"_index":1453,"title":{},"body":{"dependencies.html":{}}}],["600px",{"_index":1605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["640000",{"_index":1087,"title":{},"body":{"controllers/ProductController.html":{}}}],["7",{"_index":1556,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["7.4.0",{"_index":1419,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1461,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":1664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8",{"_index":652,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.12.0",{"_index":1459,"title":{},"body":{"dependencies.html":{}}}],["8px",{"_index":1610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__dirname",{"_index":668,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["_accesstoken",{"_index":718,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["_refreshtoken",{"_index":713,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["aaa",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abstract",{"_index":457,"title":{},"body":{"classes/BaseEntity.html":{}}}],["access_token_expiration_time",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["access_token_secret",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["accesskey",{"_index":777,"title":{},"body":{"modules/MinioClientModule.html":{}}}],["accessors",{"_index":790,"title":{},"body":{"injectables/MinioClientService.html":{},"classes/PageOptionsDto.html":{}}}],["accesstokenstrategy",{"_index":1,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["action",{"_index":936,"title":{},"body":{"injectables/OrderService.html":{}}}],["addbearerauth",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["additional",{"_index":1051,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["address",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["addressofhome",{"_index":604,"title":{},"body":{"classes/CreateProfileDto.html":{},"entities/Profile.html":{}}}],["adds",{"_index":937,"title":{},"body":{"injectables/OrderService.html":{}}}],["addtag('jiwoong",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adipiscing",{"_index":1749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin",{"_index":1296,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["adressjanedoe@example.com",{"_index":1733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ads",{"_index":1768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["age",{"_index":605,"title":{},"body":{"classes/CreateProfileDto.html":{},"entities/Profile.html":{}}}],["agency",{"_index":1787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agreeofetc",{"_index":494,"title":{},"body":{"entities/Consent.html":{},"classes/CreateConsentDto.html":{}}}],["agreeofmarketing",{"_index":495,"title":{},"body":{"entities/Consent.html":{},"classes/CreateConsentDto.html":{}}}],["agreeofpersonalinfo",{"_index":496,"title":{},"body":{"entities/Consent.html":{},"classes/CreateConsentDto.html":{}}}],["agreeofterm",{"_index":497,"title":{},"body":{"entities/Consent.html":{},"classes/CreateConsentDto.html":{}}}],["aliases",{"_index":1563,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["amazing",{"_index":1534,"title":{},"body":{"index.html":{}}}],["amet",{"_index":1747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amz",{"_index":836,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["answers",{"_index":1782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":1078,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["apibearerauth()@get()@useguards(jwtauthguard",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiconsumes",{"_index":1062,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiconsumes('multipart/form",{"_index":1082,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":488,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateConsentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"classes/EmailVerificationDto.html":{},"classes/LoginUserDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{}}}],["apiproperty({description",{"_index":619,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["apiproperty({example",{"_index":568,"title":{},"body":{"classes/CreateConsentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{}}}],["apiproperty({type",{"_index":635,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":1006,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["apipropertyoptional({enum",{"_index":994,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["apipropertyoptional({example",{"_index":988,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":997,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["apitags",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["apitags('auth",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('consent",{"_index":530,"title":{},"body":{"controllers/ConsentController.html":{}}}],["apitags('order",{"_index":915,"title":{},"body":{"controllers/OrderController.html":{}}}],["apitags('product",{"_index":1076,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('profile",{"_index":1182,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apitags('user",{"_index":1327,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":1511,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["appcontroller",{"_index":57,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apple",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applications",{"_index":1504,"title":{},"body":{"index.html":{}}}],["appmimetype",{"_index":469,"title":{},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"miscellaneous/typealiases.html":{}}}],["appmodule",{"_index":93,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":65,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arial",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":1286,"title":{},"body":{"entities/User.html":{}}}],["asc",{"_index":887,"title":{},"body":{"classes/Order.html":{},"miscellaneous/enumerations.html":{}}}],["async",{"_index":12,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/RedisModule.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":177,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"injectables/EmailService.html":{},"coverage.html":{}}}],["auth.dto",{"_index":1258,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["auth.dto.ts",{"_index":565,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["auth.guard",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":705,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/NaverAuthGuard.html":{},"coverage.html":{}}}],["auth.strategy",{"_index":330,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.strategy.ts",{"_index":709,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"coverage.html":{}}}],["auth.strategy.ts:12",{"_index":711,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["auth.strategy.ts:13",{"_index":757,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["auth.strategy.ts:22",{"_index":745,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["auth.strategy.ts:23",{"_index":878,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["auth.strategy.ts:25",{"_index":717,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["auth.strategy.ts:7",{"_index":755,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["auth/auth.controller",{"_index":326,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalAuthStrategy.html":{}}}],["auth/guards/google",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/guards/jwt",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["auth/guards/kakao",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/guards/local",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/guards/naver",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/guards/role.guard",{"_index":1072,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["auth/interfaces/requestwithuser.interface",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["auth/interfaces/tokenpayload.interface",{"_index":41,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["auth/strategies/access",{"_index":327,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategies/google",{"_index":331,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategies/kakao",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategies/local",{"_index":329,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategies/naver",{"_index":333,"title":{},"body":{"modules/AuthModule.html":{}}}],["authcontroller",{"_index":180,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticate(@req",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticate(req",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["authguard",{"_index":707,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/NaverAuthGuard.html":{}}}],["authguard('jwt",{"_index":740,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(provider.google",{"_index":706,"title":{},"body":{"injectables/GoogleAuthGuard.html":{}}}],["authguard(provider.kakao",{"_index":742,"title":{},"body":{"injectables/KakaoAuthGuard.html":{}}}],["authguard(provider.local",{"_index":752,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authguard(provider.naver",{"_index":875,"title":{},"body":{"injectables/NaverAuthGuard.html":{}}}],["authmodule",{"_index":104,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1543,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":258,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["autoloadentities",{"_index":670,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["available",{"_index":1554,"title":{},"body":{"modules.html":{}}}],["await",{"_index":52,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":1535,"title":{},"body":{"index.html":{}}}],["background",{"_index":1598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["basebucket",{"_index":784,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["baseentity",{"_index":439,"title":{"classes/BaseEntity.html":{}},"body":{"classes/BaseEntity.html":{},"entities/Consent.html":{},"entities/Product.html":{},"entities/Profile.html":{},"entities/User.html":{},"coverage.html":{}}}],["bcrypt",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["bcrypt.compare",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(10",{"_index":1300,"title":{},"body":{"entities/User.html":{}}}],["bcrypt.hash(changepassworddto.newpassword",{"_index":1374,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(this.password",{"_index":1302,"title":{},"body":{"entities/User.html":{}}}],["bcryptjs",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["beefree",{"_index":1798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beforeinsert",{"_index":1289,"title":{},"body":{"entities/User.html":{}}}],["beforesavefunction",{"_index":1297,"title":{},"body":{"entities/User.html":{}}}],["binary",{"_index":1085,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["birthday",{"_index":606,"title":{},"body":{"classes/CreateProfileDto.html":{},"entities/Profile.html":{}}}],["block",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bloodtype",{"_index":607,"title":{},"body":{"classes/CreateProfileDto.html":{},"entities/Profile.html":{},"miscellaneous/enumerations.html":{}}}],["bloodtype.type_a",{"_index":631,"title":{},"body":{"classes/CreateProfileDto.html":{},"entities/Profile.html":{}}}],["body",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConsentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/ProfileController.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":499,"title":{},"body":{"entities/Consent.html":{},"classes/CreateConsentDto.html":{},"classes/CreateProductDto.html":{},"classes/PageMetaDto.html":{},"entities/Product.html":{}}}],["bootstrap",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/EmailModule.html":{},"modules/MinioClientModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/ProfileModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["border",{"_index":1608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["box",{"_index":1611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["boy",{"_index":626,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["browse",{"_index":1552,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"modules.html":{}}}],["bucketname",{"_index":802,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["buffer",{"_index":463,"title":{},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{}}}],["bufferedfile",{"_index":459,"title":{"interfaces/BufferedFile.html":{}},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"injectables/MinioClientService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["build",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":1499,"title":{},"body":{"index.html":{}}}],["button",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cache",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["cache_manager",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemanager",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemodule",{"_index":1209,"title":{},"body":{"modules/RedisModule.html":{}}}],["cachemodule.registerasync",{"_index":1212,"title":{},"body":{"modules/RedisModule.html":{}}}],["callbackurl",{"_index":725,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["callhandler",{"_index":1229,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["canactivate(context",{"_index":1571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cascade",{"_index":1275,"title":{},"body":{"entities/User.html":{}}}],["catch",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{}}}],["category",{"_index":582,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{}}}],["categoryname",{"_index":804,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["categoryname1",{"_index":795,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["categoryname1}/${categoryname2}/${filename",{"_index":856,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["categoryname2",{"_index":796,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["categoryname}/${id",{"_index":859,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["categoryname}/${id}/${filename",{"_index":857,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["categoryname}/${id}`.includes(id",{"_index":858,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["categoryname}/${user.id",{"_index":847,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["categoryname}/${user.id}/${filename",{"_index":844,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["categoryname}/${user.id}`.includes(user.id",{"_index":845,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["center",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cfg",{"_index":658,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('postgres_db",{"_index":667,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('postgres_host",{"_index":661,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('postgres_password",{"_index":666,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('postgres_port",{"_index":663,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["cfg.get('postgres_user",{"_index":665,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["changepassword",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassword(@body",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassword(changepassworddto",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassworddto",{"_index":202,"title":{"classes/ChangePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["changepasswordwithtoken",{"_index":1341,"title":{},"body":{"injectables/UserService.html":{}}}],["changepasswordwithtoken(changepassworddto",{"_index":1349,"title":{},"body":{"injectables/UserService.html":{}}}],["chat",{"_index":1784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["check",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkemail",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkemail(@body",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkemail(emailverificationdto",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["class",{"_index":43,"title":{"classes/Auth.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateConsentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"classes/EmailVerificationDto.html":{},"classes/LoginUserDto.html":{},"classes/Order.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"modules/ConsentModule.html":{},"injectables/ConsentService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateConsentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailVerificationDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RedisModule.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":178,"title":{},"body":{"classes/Auth.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateAuthDto.html":{},"classes/CreateConsentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"classes/EmailVerificationDto.html":{},"classes/LoginUserDto.html":{},"classes/Order.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["client",{"_index":773,"title":{},"body":{"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"dependencies.html":{}}}],["client.module",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["client.module.ts",{"_index":769,"title":{},"body":{"modules/MinioClientModule.html":{}}}],["client.service",{"_index":770,"title":{},"body":{"modules/MinioClientModule.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["client.service.ts",{"_index":783,"title":{},"body":{"injectables/MinioClientService.html":{},"coverage.html":{}}}],["client.service.ts:10",{"_index":809,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["client.service.ts:11",{"_index":808,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["client.service.ts:13",{"_index":811,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["client.service.ts:139",{"_index":805,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["client.service.ts:15",{"_index":793,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["client.service.ts:198",{"_index":801,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["client.service.ts:25",{"_index":807,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["client.service.ts:86",{"_index":797,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["client/file.model",{"_index":813,"title":{},"body":{"injectables/MinioClientService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["client/file.model.ts",{"_index":462,"title":{},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["client/minio",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["clientid",{"_index":721,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["clientsecret",{"_index":723,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["cluster_appmodule",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":316,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":317,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":318,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_consentmodule",{"_index":535,"title":{},"body":{"modules/ConsentModule.html":{},"overview.html":{}}}],["cluster_consentmodule_imports",{"_index":536,"title":{},"body":{"modules/ConsentModule.html":{}}}],["cluster_consentmodule_providers",{"_index":537,"title":{},"body":{"modules/ConsentModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":674,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":676,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":675,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_minioclientmodule",{"_index":765,"title":{},"body":{"modules/MinioClientModule.html":{},"overview.html":{}}}],["cluster_minioclientmodule_exports",{"_index":767,"title":{},"body":{"modules/MinioClientModule.html":{},"overview.html":{}}}],["cluster_minioclientmodule_providers",{"_index":766,"title":{},"body":{"modules/MinioClientModule.html":{},"overview.html":{}}}],["cluster_ordermodule",{"_index":926,"title":{},"body":{"modules/OrderModule.html":{},"overview.html":{}}}],["cluster_ordermodule_providers",{"_index":927,"title":{},"body":{"modules/OrderModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":1104,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_imports",{"_index":1106,"title":{},"body":{"modules/ProductModule.html":{}}}],["cluster_productmodule_providers",{"_index":1105,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":1186,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_imports",{"_index":1187,"title":{},"body":{"modules/ProfileModule.html":{}}}],["cluster_profilemodule_providers",{"_index":1188,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1333,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1336,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1335,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1334,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":699,"title":{},"body":{"classes/EmailVerificationDto.html":{}}}],["color",{"_index":1599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":510,"title":{},"body":{"entities/Consent.html":{},"entities/Product.html":{},"entities/Profile.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["column({default",{"_index":500,"title":{},"body":{"entities/Consent.html":{},"entities/Product.html":{}}}],["column({nullable",{"_index":1017,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["column({type",{"_index":1162,"title":{},"body":{"entities/Profile.html":{},"entities/User.html":{}}}],["column({unique",{"_index":1278,"title":{},"body":{"entities/User.html":{}}}],["common/base.entity",{"_index":512,"title":{},"body":{"entities/Consent.html":{},"entities/Product.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["common/constants/order.constant",{"_index":1010,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["common/dtos/page",{"_index":950,"title":{},"body":{"classes/PageDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["common/dtos/page.dto",{"_index":1063,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["common/enums/bloodtype.enum",{"_index":629,"title":{},"body":{"classes/CreateProfileDto.html":{},"entities/Profile.html":{}}}],["common/enums/gender.enum",{"_index":628,"title":{},"body":{"classes/CreateProfileDto.html":{},"entities/Profile.html":{}}}],["common/enums/provider.enum",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{}}}],["common/enums/role.enum",{"_index":1065,"title":{},"body":{"controllers/ProductController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["common/interfaces/page",{"_index":970,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["common/template/verificationemail",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["common/template/welcomesignup",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["compodoc/compodoc",{"_index":1411,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":1577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configmodule",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/MinioClientModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forroot",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":16,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"injectables/UserService.html":{}}}],["configservice.get('access_token_secret",{"_index":50,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["configservice.get('email_password",{"_index":695,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_service",{"_index":692,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_user",{"_index":693,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('google_auth_callback_url",{"_index":726,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('google_auth_client_id",{"_index":722,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('google_auth_client_secret",{"_index":724,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["configservice.get('kakao_auth_callback_url",{"_index":747,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["configservice.get('kakao_auth_client_id",{"_index":746,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["configservice.get('minio_access_key",{"_index":778,"title":{},"body":{"modules/MinioClientModule.html":{}}}],["configservice.get('minio_endpoint",{"_index":776,"title":{},"body":{"modules/MinioClientModule.html":{}}}],["configservice.get('minio_port",{"_index":781,"title":{},"body":{"modules/MinioClientModule.html":{}}}],["configservice.get('minio_secret_key",{"_index":780,"title":{},"body":{"modules/MinioClientModule.html":{}}}],["configservice.get('naver_auth_callback_url",{"_index":882,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["configservice.get('naver_auth_client_id",{"_index":880,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["configservice.get('naver_auth_client_secret",{"_index":881,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["configservice.get('redis_host",{"_index":1213,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_password",{"_index":1215,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_port",{"_index":1216,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_ttl",{"_index":1218,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_user",{"_index":1214,"title":{},"body":{"modules/RedisModule.html":{}}}],["confirmemailverification",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmemailverification(emailverificationdto",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["consectetur",{"_index":1748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consent",{"_index":491,"title":{"entities/Consent.html":{}},"body":{"entities/Consent.html":{},"controllers/ConsentController.html":{},"modules/ConsentModule.html":{},"injectables/ConsentService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"coverage.html":{}}}],["consent.dto",{"_index":529,"title":{},"body":{"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateConsentDto.html":{}}}],["consent.dto.ts",{"_index":567,"title":{},"body":{"classes/CreateConsentDto.html":{},"classes/UpdateConsentDto.html":{},"coverage.html":{}}}],["consent.dto.ts:11",{"_index":572,"title":{},"body":{"classes/CreateConsentDto.html":{}}}],["consent.dto.ts:14",{"_index":570,"title":{},"body":{"classes/CreateConsentDto.html":{}}}],["consent.dto.ts:17",{"_index":569,"title":{},"body":{"classes/CreateConsentDto.html":{}}}],["consent.dto.ts:5",{"_index":574,"title":{},"body":{"classes/CreateConsentDto.html":{}}}],["consent.dto.ts:8",{"_index":573,"title":{},"body":{"classes/CreateConsentDto.html":{}}}],["consent.service",{"_index":527,"title":{},"body":{"controllers/ConsentController.html":{}}}],["consent/consent.controller",{"_index":539,"title":{},"body":{"modules/ConsentModule.html":{}}}],["consent/consent.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["consent/consent.service",{"_index":540,"title":{},"body":{"modules/ConsentModule.html":{}}}],["consent/dto/create",{"_index":528,"title":{},"body":{"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"classes/CreateUserDto.html":{}}}],["consent/entities/consent.entity",{"_index":543,"title":{},"body":{"modules/ConsentModule.html":{},"injectables/ConsentService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["consentcontroller",{"_index":515,"title":{"controllers/ConsentController.html":{}},"body":{"controllers/ConsentController.html":{},"modules/ConsentModule.html":{},"coverage.html":{}}}],["consentmodule",{"_index":105,"title":{"modules/ConsentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConsentModule.html":{},"modules.html":{},"overview.html":{}}}],["consentrepository",{"_index":549,"title":{},"body":{"injectables/ConsentService.html":{}}}],["consentservice",{"_index":526,"title":{"injectables/ConsentService.html":{}},"body":{"controllers/ConsentController.html":{},"modules/ConsentModule.html":{},"injectables/ConsentService.html":{},"coverage.html":{},"overview.html":{}}}],["console.log",{"_index":851,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["console.log('deleted",{"_index":869,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["console.log('no",{"_index":871,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["console.log(err",{"_index":735,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["console.log(ext",{"_index":855,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["const",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConsentService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/ProductService.html":{},"injectables/ProfileService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConsentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/ProductService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":754,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["constructor(configservice",{"_index":15,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["constructor(consentrepository",{"_index":546,"title":{},"body":{"injectables/ConsentService.html":{}}}],["constructor(data",{"_index":943,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(minio",{"_index":791,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["constructor(private",{"_index":532,"title":{},"body":{"controllers/ConsentController.html":{},"injectables/EmailService.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["constructor(productrepository",{"_index":1115,"title":{},"body":{"injectables/ProductService.html":{}}}],["constructor(profilerepository",{"_index":1195,"title":{},"body":{"injectables/ProfileService.html":{}}}],["constructor(undefined",{"_index":962,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["constructor(userrepository",{"_index":1346,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["container",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["content",{"_index":833,"title":{},"body":{"injectables/MinioClientService.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":1231,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":1573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context.switchtohttp().getresponse",{"_index":1245,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["controller",{"_index":56,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('consent",{"_index":531,"title":{},"body":{"controllers/ConsentController.html":{}}}],["controller('order",{"_index":916,"title":{},"body":{"controllers/OrderController.html":{}}}],["controller('product",{"_index":1077,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('profile",{"_index":1183,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller('user",{"_index":1328,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ConsentController.html":{},"modules/ConsentModule.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":1446,"title":{},"body":{"dependencies.html":{}}}],["count",{"_index":1130,"title":{},"body":{"injectables/ProductService.html":{}}}],["country",{"_index":1793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":1386,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":891,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProfileDto.html":{}}}],["create(@body",{"_index":917,"title":{},"body":{"controllers/OrderController.html":{}}}],["create(createorderdto",{"_index":896,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["createauthdto",{"_index":563,"title":{"classes/CreateAuthDto.html":{}},"body":{"classes/CreateAuthDto.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["createconsent",{"_index":517,"title":{},"body":{"controllers/ConsentController.html":{},"injectables/ConsentService.html":{}}}],["createconsent(req",{"_index":519,"title":{},"body":{"controllers/ConsentController.html":{}}}],["createconsent(user",{"_index":550,"title":{},"body":{"injectables/ConsentService.html":{}}}],["createconsentdto",{"_index":520,"title":{"classes/CreateConsentDto.html":{}},"body":{"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"classes/CreateConsentDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateConsentDto.html":{},"coverage.html":{}}}],["createdat",{"_index":442,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createdatecolumn",{"_index":447,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createhash('md5",{"_index":825,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["createinfo",{"_index":1401,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createinfo(status",{"_index":1251,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["createinfo(statuscode",{"_index":1236,"title":{},"body":{"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{}}}],["createorderdto",{"_index":576,"title":{"classes/CreateOrderDto.html":{}},"body":{"classes/CreateOrderDto.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["createproductdto",{"_index":579,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createproductdto.category",{"_index":1142,"title":{},"body":{"injectables/ProductService.html":{}}}],["createproductdto})@apibody({description",{"_index":1048,"title":{},"body":{"controllers/ProductController.html":{}}}],["createproductimg",{"_index":786,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["createproductimg(file",{"_index":794,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["createprofile",{"_index":1172,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["createprofile(req",{"_index":1174,"title":{},"body":{"controllers/ProfileController.html":{}}}],["createprofile(user",{"_index":1198,"title":{},"body":{"injectables/ProfileService.html":{}}}],["createprofiledto",{"_index":601,"title":{"classes/CreateProfileDto.html":{}},"body":{"classes/CreateProfileDto.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["createtransport",{"_index":688,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuser",{"_index":1342,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":1351,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":236,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto})@apibody({description",{"_index":1325,"title":{},"body":{"controllers/UserController.html":{}}}],["crypto",{"_index":814,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["d",{"_index":1308,"title":{},"body":{"entities/User.html":{}}}],["data",{"_index":942,"title":{},"body":{"classes/PageDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["data')@apibody({type",{"_index":1047,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["database",{"_index":79,"title":{},"body":{"controllers/AppController.html":{},"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["database/postgreserrorcodes.enum",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["databasemodule",{"_index":106,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":446,"title":{},"body":{"classes/BaseEntity.html":{},"interfaces/BufferedFile.html":{},"classes/CreateProfileDto.html":{},"interfaces/HasFile.html":{},"entities/Profile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{}}}],["date.now().tostring",{"_index":823,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["declarations",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/EmailModule.html":{},"modules/MinioClientModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/ProfileModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoding",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoration",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"classes/CreateConsentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"classes/EmailVerificationDto.html":{},"classes/LoginUserDto.html":{},"controllers/OrderController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":514,"title":{},"body":{"entities/Consent.html":{},"classes/CreateProfileDto.html":{},"injectables/MinioClientService.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"entities/Profile.html":{},"entities/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":18,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"classes/CreateConsentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"injectables/EmailService.html":{},"classes/EmailVerificationDto.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":873,"title":{},"body":{"injectables/MinioClientService.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{}}}],["delete('/:id",{"_index":1095,"title":{},"body":{"controllers/ProductController.html":{}}}],["delete('/delete",{"_index":1034,"title":{},"body":{"controllers/ProductController.html":{}}}],["delete(':id",{"_index":903,"title":{},"body":{"controllers/OrderController.html":{}}}],["deleteallproducts",{"_index":1028,"title":{},"body":{"controllers/ProductController.html":{}}}],["deleted",{"_index":1153,"title":{},"body":{"injectables/ProductService.html":{}}}],["deletedat",{"_index":443,"title":{},"body":{"classes/BaseEntity.html":{}}}],["deletedatecolumn",{"_index":449,"title":{},"body":{"classes/BaseEntity.html":{}}}],["deletefoldercontents",{"_index":787,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["deletefoldercontents(bucketname",{"_index":799,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["deleteproductbyid",{"_index":1029,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["deleteproductbyid(@param('id",{"_index":1096,"title":{},"body":{"controllers/ProductController.html":{}}}],["deleteproductbyid(id",{"_index":1036,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["deleteproducts",{"_index":1111,"title":{},"body":{"injectables/ProductService.html":{}}}],["deleteresponse",{"_index":1149,"title":{},"body":{"injectables/ProductService.html":{}}}],["deleteresponse.affected",{"_index":1151,"title":{},"body":{"injectables/ProductService.html":{}}}],["deleteresult",{"_index":867,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["dependencies",{"_index":95,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/EmailModule.html":{},"modules/MinioClientModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/ProfileModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":1483,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["description",{"_index":583,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["design",{"_index":1763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["detectors",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":1512,"title":{},"body":{"index.html":{}}}],["digest('hex",{"_index":827,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["diskhealthindicator",{"_index":67,"title":{},"body":{"controllers/AppController.html":{}}}],["display",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["displayname",{"_index":728,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["dnd0311@naver.com",{"_index":638,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"classes/EmailVerificationDto.html":{},"classes/LoginUserDto.html":{},"classes/PageOptionsDto.html":{},"controllers/UserController.html":{}}}],["dnd0311@naver.com'})@type(undefined)@isoptional",{"_index":989,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["docs",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":1387,"title":{},"body":{"coverage.html":{}}}],["documentbuilder",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doecompany123",{"_index":1731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dolor",{"_index":1745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["done",{"_index":715,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["done(null",{"_index":733,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["download",{"_index":1777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":971,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["dto/change",{"_index":1363,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/create",{"_index":1362,"title":{},"body":{"injectables/UserService.html":{}}}],["due",{"_index":1735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":1523,"title":{},"body":{"index.html":{}}}],["eager",{"_index":1274,"title":{},"body":{"entities/User.html":{}}}],["efficient",{"_index":1500,"title":{},"body":{"index.html":{}}}],["eiusmod.thank",{"_index":1752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elit",{"_index":1750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"classes/EmailVerificationDto.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthStrategy.html":{},"classes/PageOptionsDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["email/email.module",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["email/email.service",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"modules/EmailModule.html":{}}}],["email_base_url",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["email_password",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["email_service",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["email_user",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["emaildto",{"_index":210,"title":{"classes/EmailDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/EmailDto.html":{},"coverage.html":{}}}],["emaildto.email",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["emailmodule",{"_index":107,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailservice",{"_index":345,"title":{"injectables/EmailService.html":{}},"body":{"injectables/AuthService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"coverage.html":{},"overview.html":{}}}],["emailverificationdto",{"_index":206,"title":{"classes/EmailVerificationDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EmailVerificationDto.html":{},"coverage.html":{}}}],["encoding",{"_index":464,"title":{},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{}}}],["endpoint",{"_index":775,"title":{},"body":{"modules/MinioClientModule.html":{}}}],["entities",{"_index":492,"title":{},"body":{"entities/Consent.html":{},"modules/DatabaseModule.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"entities/User.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["entities/user.entity",{"_index":1361,"title":{},"body":{"injectables/UserService.html":{}}}],["entity",{"_index":490,"title":{"entities/Consent.html":{},"entities/Product.html":{},"entities/Profile.html":{},"entities/User.html":{}},"body":{"entities/Consent.html":{},"entities/Product.html":{},"entities/Profile.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":669,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enum",{"_index":621,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/PageOptionsDto.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["enumerations",{"_index":1464,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":734,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{}}}],["err.status",{"_index":736,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["error",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MinioClientService.html":{},"injectables/ProductService.html":{},"entities/User.html":{}}}],["error?.code",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["example",{"_index":575,"title":{},"body":{"classes/CreateConsentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"classes/EmailVerificationDto.html":{},"classes/LoginUserDto.html":{},"classes/PageOptionsDto.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["exclude",{"_index":1293,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":1227,"title":{},"body":{"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1367,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["expiresin",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":42,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"interfaces/BufferedFile.html":{},"classes/ChangePasswordDto.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"modules/ConsentModule.html":{},"injectables/ConsentService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateConsentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailVerificationDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"interfaces/HasFile.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUser.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/EmailModule.html":{},"modules/MinioClientModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/ProfileModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":1075,"title":{},"body":{"controllers/ProductController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["ext",{"_index":828,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["extends",{"_index":8,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"interfaces/BufferedFile.html":{},"entities/Consent.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"interfaces/HasFile.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"entities/Product.html":{},"entities/Profile.html":{},"interfaces/RequestWithUser.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":35,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":48,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["f4f4f4",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":501,"title":{},"body":{"entities/Consent.html":{},"classes/CreateConsentDto.html":{},"modules/MinioClientModule.html":{}}}],["family",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["female",{"_index":1480,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fff",{"_index":1607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ffffff",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fieldname",{"_index":465,"title":{},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"interfaces/BufferedFile.html":{},"classes/ChangePasswordDto.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"modules/ConsentModule.html":{},"injectables/ConsentService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateConsentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailVerificationDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"interfaces/HasFile.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUser.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":842,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["file.mimetype",{"_index":834,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["file.mimetype.includes('jpeg",{"_index":819,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["file.mimetype.includes('png",{"_index":820,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["file.originalname.lastindexof",{"_index":830,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["file.originalname.length",{"_index":831,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["file.originalname.substring",{"_index":829,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["filebuffer",{"_index":841,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["filebuffer.length",{"_index":849,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["fileinterceptor",{"_index":1073,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["filename",{"_index":840,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["filepath",{"_index":843,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["filesrc",{"_index":474,"title":{},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{}}}],["find_password_expiration_time",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["find_password_token_secret",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["findall",{"_index":892,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["findone",{"_index":893,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["findone(@param('id",{"_index":920,"title":{},"body":{"controllers/OrderController.html":{}}}],["findone(id",{"_index":899,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["findpassword",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["findpassword(@body",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["findpassword(emaildto",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["findpasswordsendemail",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["findpasswordsendemail(email",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["folderpath",{"_index":800,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["font",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["footer",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forcebgcolor{background",{"_index":1709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format",{"_index":1084,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["found",{"_index":872,"title":{},"body":{"injectables/MinioClientService.html":{},"injectables/ProductService.html":{}}}],["framework",{"_index":1498,"title":{},"body":{"index.html":{}}}],["function",{"_index":850,"title":{},"body":{"injectables/MinioClientService.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["functions",{"_index":1491,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":608,"title":{},"body":{"classes/CreateProfileDto.html":{},"entities/Profile.html":{},"miscellaneous/enumerations.html":{}}}],["gender.male",{"_index":630,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["gender.minority",{"_index":1169,"title":{},"body":{"entities/Profile.html":{}}}],["generateaccesstoken",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(userid",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatenumber",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateotp",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/:id",{"_index":1043,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["get('/all",{"_index":1040,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["get('/google",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/google/callback",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/kakao",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/kakao')@useguards(kakaoauthguard",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/kakao/callback",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/kakao/callback')@useguards(kakaoauthguard",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/naver",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/naver')@useguards(naverauthguard",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/naver/callback",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/naver/callback')@useguards(naverauthguard",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":900,"title":{},"body":{"controllers/OrderController.html":{}}}],["get()@healthcheck",{"_index":62,"title":{},"body":{"controllers/AppController.html":{}}}],["getallproducts",{"_index":1030,"title":{},"body":{"controllers/ProductController.html":{}}}],["getallproducts(pageoptionsdto",{"_index":1039,"title":{},"body":{"controllers/ProductController.html":{}}}],["getallusers",{"_index":1315,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getallusers(pageoptionsdto",{"_index":1318,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getapiserverhealthcheck",{"_index":60,"title":{},"body":{"controllers/AppController.html":{}}}],["getclient",{"_index":810,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["gethello",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getproduct",{"_index":1112,"title":{},"body":{"injectables/ProductService.html":{}}}],["getproduct(id",{"_index":1120,"title":{},"body":{"injectables/ProductService.html":{}}}],["getproductbyid",{"_index":1031,"title":{},"body":{"controllers/ProductController.html":{}}}],["getproductbyid(@param('id",{"_index":1091,"title":{},"body":{"controllers/ProductController.html":{}}}],["getproductbyid(id",{"_index":1042,"title":{},"body":{"controllers/ProductController.html":{}}}],["getproducts",{"_index":1113,"title":{},"body":{"injectables/ProductService.html":{}}}],["getproducts(pageoptionsdto",{"_index":1122,"title":{},"body":{"injectables/ProductService.html":{}}}],["getskip",{"_index":1004,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["getting",{"_index":1494,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":1316,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@param('id",{"_index":1330,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(id",{"_index":1321,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserbyemail",{"_index":1343,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyemail(email",{"_index":1354,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyid",{"_index":1344,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserbyid(id",{"_index":1356,"title":{},"body":{"injectables/UserService.html":{}}}],["good",{"_index":590,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{}}}],["google",{"_index":719,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["google_auth_callback_url",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["google_auth_client_id",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["google_auth_client_secret",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["googleauthguard",{"_index":266,"title":{"injectables/GoogleAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["googleauthstrategy",{"_index":319,"title":{"injectables/GoogleAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["googlelogin",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogincallback",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogincallback(@req",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogincallback(req",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["graph",{"_index":1553,"title":{},"body":{"modules.html":{}}}],["gravatar",{"_index":1291,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["gravatar.url(this.email",{"_index":1304,"title":{},"body":{"entities/User.html":{}}}],["grow",{"_index":1530,"title":{},"body":{"index.html":{}}}],["handle",{"_index":1248,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["hapi/joi",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"classes/PageOptionsDto.html":{},"dependencies.html":{}}}],["hasfile",{"_index":472,"title":{"interfaces/HasFile.html":{}},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"coverage.html":{}}}],["hashedfilename",{"_index":824,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["hashedpassword",{"_index":1373,"title":{},"body":{"injectables/UserService.html":{}}}],["hasnextpage",{"_index":956,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":957,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["header",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["health",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheck",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheckresult",{"_index":69,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheckservice",{"_index":70,"title":{},"body":{"controllers/AppController.html":{}}}],["heap",{"_index":81,"title":{},"body":{"controllers/AppController.html":{}}}],["height",{"_index":609,"title":{},"body":{"classes/CreateProfileDto.html":{},"entities/Profile.html":{},"miscellaneous/variables.html":{}}}],["hello",{"_index":175,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":1540,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hide",{"_index":1653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":660,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["html",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["http://${this.configservice.get('minio_endpoint')}:${this.configservice.get('minio_port')}/${this.configservice.get('minio_bucket')}/${filepath",{"_index":853,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["httpcode",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@get('/google')@useguards(googleauthguard",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@get('/google/callback')@useguards(googleauthguard",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["httpexception('password",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('product",{"_index":1147,"title":{},"body":{"injectables/ProductService.html":{}}}],["httpexception('something",{"_index":1152,"title":{},"body":{"injectables/ProductService.html":{}}}],["httpexception('user",{"_index":1368,"title":{},"body":{"injectables/UserService.html":{}}}],["https",{"_index":1311,"title":{},"body":{"entities/User.html":{}}}],["https://nestjs.com",{"_index":1547,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MinioClientService.html":{},"injectables/ProductService.html":{}}}],["httpstatus.conflict",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["httpstatus.internal_server_error",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.not_found",{"_index":1148,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":444,"title":{},"body":{"classes/BaseEntity.html":{},"interfaces/BufferedFile.html":{},"injectables/ConsentService.html":{},"interfaces/HasFile.html":{},"injectables/MinioClientService.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ProfileService.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":1388,"title":{},"body":{"coverage.html":{}}}],["ilike",{"_index":1381,"title":{},"body":{"injectables/UserService.html":{}}}],["image",{"_index":1050,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["image/jpeg",{"_index":476,"title":{},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"miscellaneous/typealiases.html":{}}}],["image/png",{"_index":475,"title":{},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"miscellaneous/typealiases.html":{}}}],["imageexample",{"_index":597,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["img+div",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implements",{"_index":1243,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["import",{"_index":31,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"classes/ChangePasswordDto.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"modules/ConsentModule.html":{},"injectables/ConsentService.html":{},"classes/CreateConsentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailVerificationDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUser.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["important",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imports",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/MinioClientModule.html":{},"modules/ProductModule.html":{},"modules/ProfileModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"interfaces/BufferedFile.html":{},"classes/ChangePasswordDto.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"classes/CreateConsentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"injectables/EmailService.html":{},"classes/EmailVerificationDto.html":{},"injectables/GoogleAuthStrategy.html":{},"interfaces/HasFile.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/StoredFileMetadata.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":1576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"interfaces/BufferedFile.html":{},"classes/ChangePasswordDto.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"modules/ConsentModule.html":{},"injectables/ConsentService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateConsentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailVerificationDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"interfaces/HasFile.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUser.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inherit",{"_index":1645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initiateemailaddressverification",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["initiateemailaddressverification(email",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/MinioClientModule.html":{},"modules/RedisModule.html":{}}}],["inject(cache_manager",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConsentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/OrderService.html":{},"injectables/ProductService.html":{},"injectables/ProfileService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConsentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/OrderService.html":{},"injectables/ProductService.html":{},"injectables/ProfileService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConsentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/OrderService.html":{},"injectables/ProductService.html":{},"injectables/ProfileService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":554,"title":{},"body":{"injectables/ConsentService.html":{},"injectables/ProductService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["injectrepository(consent",{"_index":555,"title":{},"body":{"injectables/ConsentService.html":{}}}],["injectrepository(product",{"_index":1127,"title":{},"body":{"injectables/ProductService.html":{}}}],["injectrepository(profile",{"_index":1202,"title":{},"body":{"injectables/ProfileService.html":{}}}],["injectrepository(user",{"_index":1364,"title":{},"body":{"injectables/UserService.html":{}}}],["inline",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inner",{"_index":1669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["installation",{"_index":1508,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1510,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":1225,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":1226,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":458,"title":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/PageMetaDtoParameters.html":{},"interfaces/RequestWithUser.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/PageMetaDtoParameters.html":{},"interfaces/RequestWithUser.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":460,"title":{},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/PageMetaDtoParameters.html":{},"interfaces/RequestWithUser.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"interfaces/TokenPayload.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":1292,"title":{},"body":{"entities/User.html":{}}}],["internalservererrorexception(error",{"_index":1312,"title":{},"body":{"entities/User.html":{}}}],["introduction",{"_index":610,"title":{},"body":{"classes/CreateProfileDto.html":{},"entities/Profile.html":{}}}],["invoice",{"_index":1778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iphone",{"_index":588,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{}}}],["iphone16",{"_index":593,"title":{},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{}}}],["ipsum",{"_index":1744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isarray",{"_index":949,"title":{},"body":{"classes/PageDto.html":{}}}],["isarray()@apiproperty({isarray",{"_index":947,"title":{},"body":{"classes/PageDto.html":{}}}],["isemail",{"_index":650,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"classes/EmailVerificationDto.html":{},"classes/LoginUserDto.html":{}}}],["isemail()@apiproperty({example",{"_index":637,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"classes/EmailVerificationDto.html":{},"classes/LoginUserDto.html":{}}}],["isenum",{"_index":1007,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(order",{"_index":1011,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isglobal",{"_index":1219,"title":{},"body":{"modules/RedisModule.html":{}}}],["isint",{"_index":1013,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["ismatched",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":484,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["isoptional",{"_index":1008,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["issale",{"_index":584,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{}}}],["isstring",{"_index":485,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailVerificationDto.html":{},"classes/LoginUserDto.html":{}}}],["isstring()@apiproperty",{"_index":482,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["isstring()@apiproperty({example",{"_index":700,"title":{},"body":{"classes/EmailVerificationDto.html":{}}}],["isstring()@isnotempty()@apiproperty({example",{"_index":640,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(7)@apiproperty({example",{"_index":763,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isstring()@isnotempty()@minlength(7)@matches(/^(?=.*[a",{"_index":642,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(7)@isnotempty()@apiproperty",{"_index":480,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["itemcount",{"_index":958,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["jane",{"_index":1742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jiwoong",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/PageOptionsDto.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["jiwoong'})@type(undefined)@isoptional",{"_index":991,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["joi",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":1537,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":1290,"title":{},"body":{"entities/User.html":{}}}],["jwt",{"_index":38,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/ConsentController.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":264,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":47,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["jwtmodule",{"_index":324,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":334,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["jwtservice",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["kakao",{"_index":730,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["kakao_auth_callback_url",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["kakao_auth_client_id",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["kakaoauthguard",{"_index":268,"title":{"injectables/KakaoAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/KakaoAuthGuard.html":{},"coverage.html":{}}}],["kakaoauthstrategy",{"_index":320,"title":{"injectables/KakaoAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/KakaoAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kakaologin",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaologincallback",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaologincallback(@req",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaologincallback(req",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["kamil",{"_index":1544,"title":{},"body":{"index.html":{}}}],["legend",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/EmailModule.html":{},"modules/MinioClientModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/ProfileModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":1550,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1527,"title":{},"body":{"index.html":{}}}],["local",{"_index":758,"title":{},"body":{"injectables/LocalAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["localauthguard",{"_index":260,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localauthstrategy",{"_index":321,"title":{"injectables/LocalAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logger",{"_index":785,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["logger('miniostorageservice",{"_index":817,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["loginuser",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["loginuser(@body",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(@req",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser(loginuserdto",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuser(req",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuserdto",{"_index":251,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["loginuserdto.password",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuserdto})@useguards(localauthguard",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["lts.1",{"_index":1451,"title":{},"body":{"dependencies.html":{}}}],["mail",{"_index":686,"title":{},"body":{"injectables/EmailService.html":{}}}],["mail.options",{"_index":683,"title":{},"body":{"injectables/EmailService.html":{}}}],["male",{"_index":1479,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["manage",{"_index":1795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manager",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["map",{"_index":1234,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["margin",{"_index":1595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marketing",{"_index":1786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["match",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["matches",{"_index":651,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":653,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":55,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"interfaces/BufferedFile.html":{},"classes/ChangePasswordDto.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"modules/ConsentModule.html":{},"injectables/ConsentService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateConsentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailVerificationDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"interfaces/HasFile.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUser.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(this.itemcount",{"_index":980,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":1603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["max(50",{"_index":1015,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["maximum",{"_index":1001,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["media",{"_index":1765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["memoryhealthindicator",{"_index":71,"title":{},"body":{"controllers/AppController.html":{}}}],["message",{"_index":1239,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["meta",{"_index":837,"title":{},"body":{"injectables/MinioClientService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["meta.dto",{"_index":951,"title":{},"body":{"classes/PageDto.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["meta.dto.ts",{"_index":955,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:12",{"_index":966,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:15",{"_index":968,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:18",{"_index":965,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:21",{"_index":964,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:6",{"_index":967,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:9",{"_index":969,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["metadata",{"_index":832,"title":{},"body":{"injectables/MinioClientService.html":{},"dependencies.html":{}}}],["methods",{"_index":11,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["mimetype",{"_index":466,"title":{},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{}}}],["min(1",{"_index":1014,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minimum",{"_index":1012,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minio",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"dependencies.html":{}}}],["minio_access_key",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["minio_bucket",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["minio_endpoint",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["minio_port",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["minio_secret_key",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["minioclientmodule",{"_index":108,"title":{"modules/MinioClientModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MinioClientModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["minioclientservice",{"_index":768,"title":{"injectables/MinioClientService.html":{}},"body":{"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["miniomodule",{"_index":771,"title":{},"body":{"modules/MinioClientModule.html":{}}}],["miniomodule.registerasync",{"_index":774,"title":{},"body":{"modules/MinioClientModule.html":{}}}],["minioservice",{"_index":792,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["minlength",{"_index":486,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["minlength(7",{"_index":489,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["minority",{"_index":1481,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["miscellaneous",{"_index":1463,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1526,"title":{},"body":{"index.html":{}}}],["mixin(roleguardmixin",{"_index":1575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mm",{"_index":1309,"title":{},"body":{"entities/User.html":{}}}],["mobile",{"_index":1089,"title":{},"body":{"controllers/ProductController.html":{}}}],["mode",{"_index":1516,"title":{},"body":{"index.html":{}}}],["module",{"_index":92,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/MinioClientModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/ProfileModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/MinioClientModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/ProfileModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":94,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"modules/MinioClientModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/ProfileModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1539,"title":{},"body":{"index.html":{}}}],["mso",{"_index":1706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multer",{"_index":1449,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1545,"title":{},"body":{"index.html":{}}}],["name",{"_index":22,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/BufferedFile.html":{},"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"interfaces/HasFile.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["naver",{"_index":879,"title":{},"body":{"injectables/NaverAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["naver_auth_callback_url",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["naver_auth_client_id",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["naver_auth_client_secret",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["naverauthguard",{"_index":270,"title":{"injectables/NaverAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/NaverAuthGuard.html":{},"coverage.html":{}}}],["naverauthstrategy",{"_index":322,"title":{"injectables/NaverAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/NaverAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["naverlogin",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback(@req",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogincallback(req",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["nest",{"_index":1505,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1549,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1233,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":772,"title":{},"body":{"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":32,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConsentController.html":{},"modules/ConsentModule.html":{},"injectables/ConsentService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RedisModule.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/common/cache",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{}}}],["nestjs/config",{"_index":39,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1416,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":325,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1256,"title":{},"body":{"classes/UpdateAuthDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":34,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1074,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"controllers/ConsentController.html":{},"classes/CreateConsentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"classes/EmailVerificationDto.html":{},"classes/LoginUserDto.html":{},"controllers/OrderController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/ProductController.html":{},"controllers/ProfileController.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateProfileDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":542,"title":{},"body":{"modules/ConsentModule.html":{},"injectables/ConsentService.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/OrderService.html":{},"injectables/ProductService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newconsent",{"_index":556,"title":{},"body":{"injectables/ConsentService.html":{}}}],["newpassword",{"_index":479,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["newproduct",{"_index":1143,"title":{},"body":{"injectables/ProductService.html":{}}}],["newprofile",{"_index":1203,"title":{},"body":{"injectables/ProfileService.html":{}}}],["newuser",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/UserService.html":{}}}],["next",{"_index":1228,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["node.js",{"_index":1497,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":689,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":687,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":679,"title":{},"body":{"injectables/EmailService.html":{}}}],["none",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_null_violation",{"_index":1487,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":1360,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception('user",{"_index":1366,"title":{},"body":{"injectables/UserService.html":{}}}],["npm",{"_index":1509,"title":{},"body":{"index.html":{}}}],["null",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["nullable",{"_index":1025,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["number",{"_index":470,"title":{},"body":{"interfaces/BufferedFile.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"interfaces/HasFile.html":{},"injectables/OrderService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"entities/Profile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{}}}],["oauth2",{"_index":720,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["obj",{"_index":863,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["object",{"_index":1083,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["object.assign",{"_index":1250,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["objects",{"_index":870,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["objectslist",{"_index":860,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["objectslist.length",{"_index":865,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["objectslist.push(obj.name",{"_index":864,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["observable",{"_index":1232,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["onetoone",{"_index":511,"title":{},"body":{"entities/Consent.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":507,"title":{},"body":{"entities/Consent.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["open",{"_index":1528,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["optional",{"_index":24,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"interfaces/StoredFileMetadata.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":685,"title":{},"body":{"injectables/EmailService.html":{}}}],["options.dto",{"_index":985,"title":{},"body":{"interfaces/PageMetaDtoParameters.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options.dto.ts",{"_index":986,"title":{},"body":{"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:11",{"_index":996,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:18",{"_index":999,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:29",{"_index":1003,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:34",{"_index":992,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:39",{"_index":990,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:41",{"_index":1005,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["order",{"_index":884,"title":{"classes/Order.html":{}},"body":{"classes/Order.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["order.asc",{"_index":993,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["order.dto",{"_index":913,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/UpdateOrderDto.html":{}}}],["order.dto.ts",{"_index":578,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["order/dto/create",{"_index":912,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["order/dto/update",{"_index":914,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["order/order.controller",{"_index":929,"title":{},"body":{"modules/OrderModule.html":{}}}],["order/order.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["order/order.service",{"_index":911,"title":{},"body":{"controllers/OrderController.html":{},"modules/OrderModule.html":{}}}],["orderby('product.createdat",{"_index":1134,"title":{},"body":{"injectables/ProductService.html":{}}}],["orderby('user.createdat",{"_index":1384,"title":{},"body":{"injectables/UserService.html":{}}}],["ordercontroller",{"_index":889,"title":{"controllers/OrderController.html":{}},"body":{"controllers/OrderController.html":{},"modules/OrderModule.html":{},"coverage.html":{}}}],["ordermodule",{"_index":109,"title":{"modules/OrderModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrderModule.html":{},"modules.html":{},"overview.html":{}}}],["orderservice",{"_index":910,"title":{"injectables/OrderService.html":{}},"body":{"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"coverage.html":{},"overview.html":{}}}],["originalname",{"_index":467,"title":{},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{}}}],["otp",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["out",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/EmailModule.html":{},"modules/MinioClientModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/ProfileModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overfourteen",{"_index":498,"title":{},"body":{"entities/Consent.html":{},"classes/CreateConsentDto.html":{}}}],["overview",{"_index":1555,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1410,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":1596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["page",{"_index":959,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["pagecount",{"_index":960,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":940,"title":{"classes/PageDto.html":{}},"body":{"classes/PageDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["pagedto(entities",{"_index":1140,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["pagemetadto",{"_index":945,"title":{"classes/PageMetaDto.html":{}},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["pagemetadtoparameters",{"_index":963,"title":{"interfaces/PageMetaDtoParameters.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":973,"title":{"classes/PageOptionsDto.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["pageoptionsdto.email",{"_index":1382,"title":{},"body":{"injectables/UserService.html":{}}}],["pageoptionsdto.name",{"_index":1379,"title":{},"body":{"injectables/UserService.html":{}}}],["pageoptionsdto.order",{"_index":1135,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["pageoptionsdto.page",{"_index":975,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.take",{"_index":977,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["param",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":1102,"title":{},"body":{"controllers/ProductController.html":{}}}],["parameters",{"_index":20,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parameters.interface",{"_index":972,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.interface.ts",{"_index":984,"title":{},"body":{"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["parser",{"_index":1425,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":1255,"title":{},"body":{"classes/UpdateAuthDto.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createauthdto",{"_index":1254,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["partialtype(createconsentdto",{"_index":1261,"title":{},"body":{"classes/UpdateConsentDto.html":{}}}],["partialtype(createorderdto",{"_index":1263,"title":{},"body":{"classes/UpdateOrderDto.html":{}}}],["partialtype(createproductdto",{"_index":1265,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createprofiledto",{"_index":1268,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["partialtype(createuserdto",{"_index":1271,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":694,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":37,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":33,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["passportstrategy(strategy",{"_index":9,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/LocalAuthStrategy.html":{}}}],["password",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/RedisModule.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["password.dto",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["password.dto.ts",{"_index":478,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:13",{"_index":483,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:9",{"_index":481,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password123",{"_index":646,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"controllers/UserController.html":{}}}],["patch",{"_index":909,"title":{},"body":{"controllers/OrderController.html":{}}}],["patch(':id",{"_index":907,"title":{},"body":{"controllers/OrderController.html":{}}}],["path",{"_index":91,"title":{},"body":{"controllers/AppController.html":{}}}],["pay",{"_index":1740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":28,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["pg",{"_index":1307,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["phone",{"_index":1086,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["picture",{"_index":729,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["pipe(map((body",{"_index":1249,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["please",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["port",{"_index":662,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MinioClientModule.html":{},"modules/RedisModule.html":{}}}],["post",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/ProfileController.html":{}}}],["post('/check/email",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/create",{"_index":1080,"title":{},"body":{"controllers/ProductController.html":{}}}],["post('/create')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":1046,"title":{},"body":{"controllers/ProductController.html":{}}}],["post('/find/password",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login')@apibody({type",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/send/email",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@useguards(jwtauthguard",{"_index":521,"title":{},"body":{"controllers/ConsentController.html":{},"controllers/ProfileController.html":{}}}],["postgres",{"_index":659,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_host",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_password",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_port",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_user",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["postgreserrorcodes",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcodes.not_null_violation",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["postgreserrorcodes.unique_violation",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["postproduct",{"_index":1114,"title":{},"body":{"injectables/ProductService.html":{}}}],["postproduct(image",{"_index":1124,"title":{},"body":{"injectables/ProductService.html":{}}}],["preferences",{"_index":1796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"controllers/OrderController.html":{},"controllers/ProductController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["price",{"_index":585,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{}}}],["primarygeneratedcolumn",{"_index":455,"title":{},"body":{"classes/BaseEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":451,"title":{},"body":{"classes/BaseEntity.html":{}}}],["private",{"_index":44,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConsentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/ProductService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{}}}],["processing",{"_index":852,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["product",{"_index":854,"title":{"entities/Product.html":{}},"body":{"injectables/MinioClientService.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["product.dto",{"_index":1070,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":581,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:11",{"_index":596,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:13",{"_index":600,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:15",{"_index":592,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:17",{"_index":589,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:5",{"_index":594,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:7",{"_index":591,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:9",{"_index":598,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product/dto/create",{"_index":1069,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{}}}],["product/entities/product.entity",{"_index":1068,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{}}}],["product/product.controller",{"_index":1108,"title":{},"body":{"modules/ProductModule.html":{}}}],["product/product.module",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["product/product.service",{"_index":1067,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["productcontroller",{"_index":1026,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["productimg",{"_index":586,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["production",{"_index":1518,"title":{},"body":{"index.html":{}}}],["productmodule",{"_index":110,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["productrepository",{"_index":1117,"title":{},"body":{"injectables/ProductService.html":{}}}],["products",{"_index":1128,"title":{},"body":{"injectables/ProductService.html":{}}}],["products.length",{"_index":1131,"title":{},"body":{"injectables/ProductService.html":{}}}],["productservice",{"_index":1066,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["profile",{"_index":714,"title":{"entities/Profile.html":{}},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["profile._json",{"_index":883,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["profile._json.kakao_account",{"_index":750,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["profile._json.properties",{"_index":749,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["profile.dto",{"_index":1181,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateProfileDto.html":{}}}],["profile.dto.ts",{"_index":603,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["profile.dto.ts:11",{"_index":623,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.dto.ts:14",{"_index":614,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.dto.ts:17",{"_index":618,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.dto.ts:20",{"_index":625,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.dto.ts:23",{"_index":612,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.dto.ts:30",{"_index":622,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.dto.ts:33",{"_index":627,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.service",{"_index":1179,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profile/dto/create",{"_index":1180,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["profile/entities/profile.entity",{"_index":1190,"title":{},"body":{"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"entities/User.html":{}}}],["profile/profile.controller",{"_index":1191,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile/profile.module",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["profile/profile.service",{"_index":1192,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile_image",{"_index":748,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["profilecontroller",{"_index":1170,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profileimg",{"_index":634,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["profilemodule",{"_index":111,"title":{"modules/ProfileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profilerepository",{"_index":1197,"title":{},"body":{"injectables/ProfileService.html":{}}}],["profileservice",{"_index":1178,"title":{"injectables/ProfileService.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":1496,"title":{},"body":{"index.html":{}}}],["project",{"_index":1529,"title":{},"body":{"index.html":{}}}],["promise",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":441,"title":{"properties.html":{}},"body":{"classes/BaseEntity.html":{},"interfaces/BufferedFile.html":{},"classes/ChangePasswordDto.html":{},"entities/Consent.html":{},"classes/CreateConsentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"injectables/EmailService.html":{},"classes/EmailVerificationDto.html":{},"interfaces/HasFile.html":{},"classes/LoginUserDto.html":{},"injectables/MinioClientService.html":{},"classes/Order.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"entities/Profile.html":{},"interfaces/RequestWithUser.html":{},"interfaces/StoredFileMetadata.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"controllers/UserController.html":{},"properties.html":{}}}],["protocol",{"_index":1310,"title":{},"body":{"entities/User.html":{}}}],["provider",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["provider.google",{"_index":710,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["provider.kakao",{"_index":744,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["provider.local",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["provider.naver",{"_index":877,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["providers",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/EmailModule.html":{},"modules/MinioClientModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/ProfileModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"entities/Consent.html":{},"injectables/MinioClientService.html":{},"entities/Product.html":{},"entities/Profile.html":{},"entities/User.html":{}}}],["put",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"controllers/ProductController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["put('/:id",{"_index":1098,"title":{},"body":{"controllers/ProductController.html":{}}}],["put('/change/password",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["put()@useguards(jwtauthguard",{"_index":524,"title":{},"body":{"controllers/ConsentController.html":{},"controllers/ProfileController.html":{}}}],["query",{"_index":1059,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["querybuilder",{"_index":1132,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["querybuilder.andwhere('user.email",{"_index":1383,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.andwhere('user.name",{"_index":1380,"title":{},"body":{"injectables/UserService.html":{}}}],["querybuilder.getcount",{"_index":1138,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["querybuilder.getrawandentities",{"_index":1139,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["questions",{"_index":1780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["r",{"_index":1306,"title":{},"body":{"entities/User.html":{}}}],["radius",{"_index":1609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["raise",{"_index":1708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["raise:10",{"_index":1707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["randomno",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["read",{"_index":1538,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":45,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["redis",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["redis/redis.module",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_host",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_password",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_ttl",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_user",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["redismodule",{"_index":112,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisstore",{"_index":1210,"title":{},"body":{"modules/RedisModule.html":{}}}],["reflect",{"_index":1460,"title":{},"body":{"dependencies.html":{}}}],["registerproduct",{"_index":1032,"title":{},"body":{"controllers/ProductController.html":{}}}],["registerproduct(productimg",{"_index":1045,"title":{},"body":{"controllers/ProductController.html":{}}}],["remove",{"_index":894,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["remove(@param('id",{"_index":924,"title":{},"body":{"controllers/OrderController.html":{}}}],["remove(id",{"_index":902,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["removes",{"_index":939,"title":{},"body":{"injectables/OrderService.html":{}}}],["repository",{"_index":547,"title":{},"body":{"injectables/ConsentService.html":{},"injectables/ProductService.html":{},"injectables/ProfileService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["request",{"_index":1221,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["requestwithuser",{"_index":197,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"controllers/ProfileController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["res",{"_index":1244,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["res.statuscode",{"_index":1247,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["reset",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/EmailModule.html":{},"modules/MinioClientModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/ProfileModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":1241,"title":{},"body":{"injectables/TransformInterceptor.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":54,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"interfaces/BufferedFile.html":{},"classes/ChangePasswordDto.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"modules/ConsentModule.html":{},"injectables/ConsentService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateConsentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailVerificationDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"interfaces/HasFile.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUser.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":51,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"injectables/EmailService.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MinioClientService.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageOptionsDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"modules/RedisModule.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":29,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returntype",{"_index":1242,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["review",{"_index":1739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rgba(0",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["role",{"_index":1064,"title":{},"body":{"controllers/ProductController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.user",{"_index":1295,"title":{},"body":{"entities/User.html":{}}}],["roleguard",{"_index":1071,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleguardmixin",{"_index":1570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roles",{"_index":1273,"title":{},"body":{"entities/User.html":{}}}],["root/app.controller",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["root/app.service",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["root/minio",{"_index":812,"title":{},"body":{"injectables/MinioClientService.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["rss",{"_index":84,"title":{},"body":{"controllers/AppController.html":{}}}],["run",{"_index":1513,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1235,"title":{},"body":{"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["s",{"_index":1305,"title":{},"body":{"entities/User.html":{}}}],["saltvalue",{"_index":1299,"title":{},"body":{"entities/User.html":{}}}],["sans",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalable",{"_index":1501,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1052,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["scope",{"_index":727,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["secret",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["secretkey",{"_index":779,"title":{},"body":{"modules/MinioClientModule.html":{}}}],["secretorkey",{"_index":49,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["sed",{"_index":1751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sendemail",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendemail(@body",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendemail(emaildto",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendmail",{"_index":680,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":682,"title":{},"body":{"injectables/EmailService.html":{}}}],["seoul",{"_index":611,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["serif",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":1502,"title":{},"body":{"index.html":{}}}],["server_port",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":691,"title":{},"body":{"injectables/EmailService.html":{}}}],["setdescription('jiwoong",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settitle('jiwoong",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setupswagger",{"_index":1405,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setversion('1.0",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shadow",{"_index":1612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":1503,"title":{},"body":{"index.html":{}}}],["signupemail",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signupemail(generatenumber",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupuser",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupuser(@body",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupuser(createuserdto",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupwelcomeemail",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupwelcomeemail(email",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["single",{"_index":1049,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["sit",{"_index":1746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["size",{"_index":468,"title":{},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"miscellaneous/variables.html":{}}}],["sizing",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":987,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["skip(pageoptionsdto.skip",{"_index":1136,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["social",{"_index":1671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["something",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"interfaces/BufferedFile.html":{},"classes/ChangePasswordDto.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"modules/ConsentModule.html":{},"injectables/ConsentService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateConsentDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailDto.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"classes/EmailVerificationDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"interfaces/HasFile.html":{},"injectables/JwtAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"modules/OrderModule.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"modules/RedisModule.html":{},"interfaces/RequestWithUser.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateConsentDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":1532,"title":{},"body":{"index.html":{}}}],["src/.../bloodtype.enum.ts",{"_index":1465,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../file.model.ts",{"_index":1564,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../gender.enum.ts",{"_index":1466,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1492,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order.constant.ts",{"_index":1467,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../postgreserrorcodes.enum.ts",{"_index":1468,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../provider.enum.ts",{"_index":1469,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.enum.ts",{"_index":1470,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.guard.ts",{"_index":1566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.document.ts",{"_index":1567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../transform.interceptor.ts",{"_index":1493,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../verificationemail.ts",{"_index":1568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../welcomesignup.ts",{"_index":1569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:29",{"_index":63,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":173,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":174,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:102",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:110",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:116",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:124",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:130",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:49",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:64",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:69",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:74",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:79",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:86",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:95",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":323,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:103",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:117",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:125",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:28",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:55",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:69",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:78",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:87",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/create",{"_index":564,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":1253,"title":{},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":179,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/guards/google",{"_index":704,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":739,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/kakao",{"_index":741,"title":{},"body":{"injectables/KakaoAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":751,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/naver",{"_index":874,"title":{},"body":{"injectables/NaverAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/role.guard.ts",{"_index":1394,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/interfaces/requestwithuser.interface.ts",{"_index":1220,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/auth/interfaces/tokenpayload.interface.ts",{"_index":1222,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/auth/strategies/access",{"_index":6,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/google",{"_index":708,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/kakao",{"_index":743,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local",{"_index":753,"title":{},"body":{"injectables/LocalAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/naver",{"_index":876,"title":{},"body":{"injectables/NaverAuthStrategy.html":{},"coverage.html":{}}}],["src/common/base.entity.ts",{"_index":440,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/common/base.entity.ts:10",{"_index":452,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/base.entity.ts:13",{"_index":448,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/base.entity.ts:16",{"_index":454,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/base.entity.ts:19",{"_index":450,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/common/constants/order.constant.ts",{"_index":1482,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/dtos/page",{"_index":954,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts",{"_index":941,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/common/dtos/page.dto.ts:11",{"_index":946,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/dtos/page.dto.ts:8",{"_index":948,"title":{},"body":{"classes/PageDto.html":{}}}],["src/common/enums/bloodtype.enum.ts",{"_index":1471,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enums/gender.enum.ts",{"_index":1478,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enums/provider.enum.ts",{"_index":1489,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enums/role.enum.ts",{"_index":1490,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/interceptors/transform.interceptor.ts",{"_index":1224,"title":{},"body":{"injectables/TransformInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/interceptors/transform.interceptor.ts:24",{"_index":1230,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/common/interfaces/page",{"_index":983,"title":{},"body":{"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["src/common/template/verificationemail.ts",{"_index":1402,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/template/welcomesignup.ts",{"_index":1403,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger.document.ts",{"_index":1404,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/consent/consent.controller.ts",{"_index":516,"title":{},"body":{"controllers/ConsentController.html":{},"coverage.html":{}}}],["src/consent/consent.controller.ts:15",{"_index":522,"title":{},"body":{"controllers/ConsentController.html":{}}}],["src/consent/consent.controller.ts:24",{"_index":525,"title":{},"body":{"controllers/ConsentController.html":{}}}],["src/consent/consent.module.ts",{"_index":538,"title":{},"body":{"modules/ConsentModule.html":{}}}],["src/consent/consent.service.ts",{"_index":545,"title":{},"body":{"injectables/ConsentService.html":{},"coverage.html":{}}}],["src/consent/consent.service.ts:10",{"_index":548,"title":{},"body":{"injectables/ConsentService.html":{}}}],["src/consent/consent.service.ts:17",{"_index":551,"title":{},"body":{"injectables/ConsentService.html":{}}}],["src/consent/consent.service.ts:27",{"_index":553,"title":{},"body":{"injectables/ConsentService.html":{}}}],["src/consent/dto/create",{"_index":566,"title":{},"body":{"classes/CreateConsentDto.html":{},"coverage.html":{}}}],["src/consent/dto/update",{"_index":1260,"title":{},"body":{"classes/UpdateConsentDto.html":{},"coverage.html":{}}}],["src/consent/entities/consent.entity.ts",{"_index":493,"title":{},"body":{"entities/Consent.html":{},"coverage.html":{}}}],["src/consent/entities/consent.entity.ts:11",{"_index":506,"title":{},"body":{"entities/Consent.html":{}}}],["src/consent/entities/consent.entity.ts:14",{"_index":505,"title":{},"body":{"entities/Consent.html":{}}}],["src/consent/entities/consent.entity.ts:17",{"_index":504,"title":{},"body":{"entities/Consent.html":{}}}],["src/consent/entities/consent.entity.ts:20",{"_index":503,"title":{},"body":{"entities/Consent.html":{}}}],["src/consent/entities/consent.entity.ts:23",{"_index":502,"title":{},"body":{"entities/Consent.html":{}}}],["src/consent/entities/consent.entity.ts:8",{"_index":509,"title":{},"body":{"entities/Consent.html":{}}}],["src/database/database.module.ts",{"_index":655,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/postgreserrorcodes.enum.ts",{"_index":1484,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/email/email.module.ts",{"_index":677,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service.ts",{"_index":678,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:18",{"_index":684,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":681,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/main.ts",{"_index":1406,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/minio",{"_index":461,"title":{},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"modules/MinioClientModule.html":{},"injectables/MinioClientService.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/order/dto/create",{"_index":577,"title":{},"body":{"classes/CreateOrderDto.html":{},"coverage.html":{}}}],["src/order/dto/update",{"_index":1262,"title":{},"body":{"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["src/order/entities/order.entity.ts",{"_index":885,"title":{},"body":{"classes/Order.html":{},"coverage.html":{}}}],["src/order/entities/order.entity.ts:2",{"_index":888,"title":{},"body":{"classes/Order.html":{}}}],["src/order/order.controller.ts",{"_index":890,"title":{},"body":{"controllers/OrderController.html":{},"coverage.html":{}}}],["src/order/order.controller.ts:22",{"_index":897,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.controller.ts:27",{"_index":898,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.controller.ts:32",{"_index":901,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.controller.ts:37",{"_index":908,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.controller.ts:42",{"_index":904,"title":{},"body":{"controllers/OrderController.html":{}}}],["src/order/order.module.ts",{"_index":928,"title":{},"body":{"modules/OrderModule.html":{}}}],["src/order/order.service.ts",{"_index":930,"title":{},"body":{"injectables/OrderService.html":{},"coverage.html":{}}}],["src/order/order.service.ts:11",{"_index":932,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/order/order.service.ts:15",{"_index":933,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/order/order.service.ts:19",{"_index":935,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/order/order.service.ts:23",{"_index":934,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/order/order.service.ts:7",{"_index":931,"title":{},"body":{"injectables/OrderService.html":{}}}],["src/product/dto/create",{"_index":580,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/product/dto/update",{"_index":1264,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/product/entities/product.entity.ts",{"_index":1016,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/product/entities/product.entity.ts:10",{"_index":1019,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:13",{"_index":1023,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:16",{"_index":1022,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:19",{"_index":1024,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:22",{"_index":1020,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:25",{"_index":1018,"title":{},"body":{"entities/Product.html":{}}}],["src/product/entities/product.entity.ts:7",{"_index":1021,"title":{},"body":{"entities/Product.html":{}}}],["src/product/product.controller.ts",{"_index":1027,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/product/product.controller.ts:103",{"_index":1035,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:110",{"_index":1038,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:157",{"_index":1058,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:34",{"_index":1041,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:88",{"_index":1053,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.controller.ts:97",{"_index":1044,"title":{},"body":{"controllers/ProductController.html":{}}}],["src/product/product.module.ts",{"_index":1107,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/product/product.service.ts",{"_index":1110,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/product/product.service.ts:13",{"_index":1116,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:20",{"_index":1123,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:35",{"_index":1125,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:49",{"_index":1121,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:57",{"_index":1119,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:65",{"_index":1118,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/product/product.service.ts:73",{"_index":1126,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/profile/dto/create",{"_index":602,"title":{},"body":{"classes/CreateProfileDto.html":{},"coverage.html":{}}}],["src/profile/dto/update",{"_index":1267,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["src/profile/entities/profile.entity.ts",{"_index":1158,"title":{},"body":{"entities/Profile.html":{},"coverage.html":{}}}],["src/profile/entities/profile.entity.ts:10",{"_index":1168,"title":{},"body":{"entities/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:18",{"_index":1164,"title":{},"body":{"entities/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:21",{"_index":1160,"title":{},"body":{"entities/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:24",{"_index":1161,"title":{},"body":{"entities/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:27",{"_index":1165,"title":{},"body":{"entities/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:30",{"_index":1159,"title":{},"body":{"entities/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:37",{"_index":1163,"title":{},"body":{"entities/Profile.html":{}}}],["src/profile/entities/profile.entity.ts:40",{"_index":1166,"title":{},"body":{"entities/Profile.html":{}}}],["src/profile/profile.controller.ts",{"_index":1171,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/profile/profile.controller.ts:16",{"_index":1175,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.controller.ts:25",{"_index":1177,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/profile/profile.module.ts",{"_index":1189,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/profile/profile.service.ts",{"_index":1194,"title":{},"body":{"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/profile/profile.service.ts:10",{"_index":1196,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:17",{"_index":1199,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/profile/profile.service.ts:27",{"_index":1201,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/redis/redis.module.ts",{"_index":1208,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/user/dto/change",{"_index":477,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/user/dto/create",{"_index":632,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/email",{"_index":697,"title":{},"body":{"classes/EmailVerificationDto.html":{},"coverage.html":{}}}],["src/user/dto/email.dto.ts",{"_index":672,"title":{},"body":{"classes/EmailDto.html":{},"coverage.html":{}}}],["src/user/dto/email.dto.ts:7",{"_index":673,"title":{},"body":{"classes/EmailDto.html":{}}}],["src/user/dto/login",{"_index":761,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":1270,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts",{"_index":1272,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:16",{"_index":1280,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:19",{"_index":1279,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:23",{"_index":1282,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:27",{"_index":1284,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:35",{"_index":1285,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:45",{"_index":1288,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:52",{"_index":1277,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:59",{"_index":1283,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":1314,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:34",{"_index":1320,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:42",{"_index":1322,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:83",{"_index":1326,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":1337,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1340,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:22",{"_index":1347,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:32",{"_index":1357,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:41",{"_index":1355,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:48",{"_index":1352,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:54",{"_index":1350,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:67",{"_index":1353,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:93",{"_index":1359,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":1514,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1517,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1519,"title":{},"body":{"index.html":{}}}],["started",{"_index":1495,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1507,"title":{},"body":{"index.html":{}}}],["state",{"_index":1791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":1389,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":886,"title":{},"body":{"classes/Order.html":{}}}],["status",{"_index":1246,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["statuscode",{"_index":1238,"title":{},"body":{"injectables/TransformInterceptor.html":{},"miscellaneous/functions.html":{}}}],["stay",{"_index":1541,"title":{},"body":{"index.html":{}}}],["stock",{"_index":587,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{}}}],["store",{"_index":1211,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["storedfile",{"_index":471,"title":{"interfaces/StoredFile.html":{}},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"coverage.html":{}}}],["storedfilemetadata",{"_index":473,"title":{"interfaces/StoredFileMetadata.html":{}},"body":{"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"coverage.html":{}}}],["strategy",{"_index":36,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["stream",{"_index":861,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["street",{"_index":1732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["streetcity",{"_index":1790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"interfaces/BufferedFile.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"classes/EmailVerificationDto.html":{},"injectables/GoogleAuthStrategy.html":{},"interfaces/HasFile.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["sub",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subject",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["subscribed",{"_index":732,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["success",{"_index":1240,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["successfully",{"_index":1154,"title":{},"body":{"injectables/ProductService.html":{}}}],["sup",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["super",{"_index":46,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["super.canactivate(context",{"_index":1572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["support",{"_index":1533,"title":{},"body":{"index.html":{},"modules.html":{},"miscellaneous/variables.html":{}}}],["svg",{"_index":1551,"title":{},"body":{"modules.html":{}}}],["swaggermodule.createdocument(app",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('/api",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":671,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["t",{"_index":944,"title":{},"body":{"classes/PageDto.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["t96",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t#messageviewbody",{"_index":1648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t.desktop_hide",{"_index":1651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t.image_block",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t@media",{"_index":1665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t",{"_index":1673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t.desktop_hide",{"_index":1667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t.icons",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t.mobile_hide",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t.row",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t.social_block.desktop_hide",{"_index":1670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t.stack",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t",{"_index":1712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t",{"_index":1713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t",{"_index":1714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8202",{"_index":1728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t#1234date",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$565",{"_index":1736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t1234",{"_index":1789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t",{"_index":1754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t",{"_index":1788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100",{"_index":1761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$500.00",{"_index":1771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$565.00",{"_index":1776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$65.00",{"_index":1773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203",{"_index":1769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t1",{"_index":1760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcontent",{"_index":1766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tgrand",{"_index":1774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tppc",{"_index":1767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tprice",{"_index":1757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tqty",{"_index":1756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tseo",{"_index":1759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tservice",{"_index":1755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tsocial",{"_index":1764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tsubtotal",{"_index":1770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttaxes",{"_index":1772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttotal",{"_index":1758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\twebsite",{"_index":1762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdesigned",{"_index":1797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tbill",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdear",{"_index":1741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdue",{"_index":1737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\thave",{"_index":1779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tinvoice",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlorem",{"_index":1743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tmailcomet",{"_index":1785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tunsubscribe",{"_index":1794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\twe",{"_index":1781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tamount",{"_index":1734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\tdisplay",{"_index":1672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\tfont",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\theight",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\tmargin",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\tmax",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\tmin",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\toverflow",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\tpadding",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\ttext",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\t\\twidth",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\tbox",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\tcolor",{"_index":1644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\tdisplay",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\tfont",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\tline",{"_index":1650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\tmargin",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\tmax",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\tmso",{"_index":1652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\toverflow",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\tpadding",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\t\\ttext",{"_index":1647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\ta[x",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\tbody",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\tp",{"_index":1649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\tsub",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t\\tsup",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":1409,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["table.icons",{"_index":1668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1408,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":961,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["take(pageoptionsdto.take",{"_index":1137,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["td",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["td.pad",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["td.pad>div",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["temp_filename",{"_index":822,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["terminusmodule",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":1522,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1525,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1524,"title":{},"body":{"index.html":{}}}],["testing",{"_index":838,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["tests",{"_index":1521,"title":{},"body":{"index.html":{}}}],["text",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["thanks",{"_index":1531,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":76,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.confirmemailverification",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.findpasswordsendemail(emaildto.email",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.generateaccesstoken(user.id",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.initiateemailaddressverification",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.loginuser",{"_index":760,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["this.authservice.loginuser(loginuserdto",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signupuser(createuserdto",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signupwelcomeemail(createuserdto.email",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.basebucket",{"_index":798,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["this.cachemanager.set(email",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.client.listobjects(bucketname",{"_index":862,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["this.client.putobject",{"_index":848,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["this.client.removeobjects",{"_index":868,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["this.configservice.get('access_token_expiration_time",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('access_token_secret",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('email_base_url')}/change/password?token=${token",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('find_password_expiration_time",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('find_password_token_secret",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.configservice.get('minio_bucket",{"_index":818,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["this.consentrepository.create",{"_index":557,"title":{},"body":{"injectables/ConsentService.html":{}}}],["this.consentrepository.save(newconsent",{"_index":558,"title":{},"body":{"injectables/ConsentService.html":{}}}],["this.consentrepository.update",{"_index":561,"title":{},"body":{"injectables/ConsentService.html":{}}}],["this.consentservice.createconsent(req.user",{"_index":533,"title":{},"body":{"controllers/ConsentController.html":{}}}],["this.consentservice.updateconsentbyuser",{"_index":534,"title":{},"body":{"controllers/ConsentController.html":{}}}],["this.data",{"_index":952,"title":{},"body":{"classes/PageDto.html":{}}}],["this.deletefoldercontents",{"_index":846,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["this.diskhealthindicator.checkstorage('disk",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["this.emailservice.sendmail",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generateotp",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getuserbyemail(email",{"_index":1372,"title":{},"body":{"injectables/UserService.html":{}}}],["this.hasnextpage",{"_index":982,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":981,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.healthcheckservice.check",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["this.itemcount",{"_index":978,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.jwtservice.sign(payload",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(changepassworddto.token",{"_index":1371,"title":{},"body":{"injectables/UserService.html":{}}}],["this.logger",{"_index":816,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["this.memoryhealthindicator.checkheap('memory",{"_index":80,"title":{},"body":{"controllers/AppController.html":{}}}],["this.memoryhealthindicator.checkrss('memory",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["this.meta",{"_index":953,"title":{},"body":{"classes/PageDto.html":{}}}],["this.minio.client",{"_index":815,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["this.minioclientservice.createproductimg",{"_index":1141,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.minioclientservice.uploadproductimg",{"_index":1155,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.minioclientservice.uploadprofileimg",{"_index":1385,"title":{},"body":{"injectables/UserService.html":{}}}],["this.nodemailertransport",{"_index":690,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":696,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.orderservice.create(createorderdto",{"_index":918,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.orderservice.findall",{"_index":919,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.orderservice.findone(+id",{"_index":921,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.orderservice.remove(+id",{"_index":925,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.orderservice.update(+id",{"_index":923,"title":{},"body":{"controllers/OrderController.html":{}}}],["this.page",{"_index":974,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.pagecount",{"_index":979,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.password",{"_index":1301,"title":{},"body":{"entities/User.html":{}}}],["this.productrepository.create",{"_index":1144,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.createquerybuilder('product",{"_index":1133,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.delete",{"_index":1150,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.find",{"_index":1129,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.findoneby",{"_index":1146,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.save(newproduct",{"_index":1145,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productrepository.update(id",{"_index":1156,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.productservice.deleteproductbyid(id",{"_index":1097,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.deleteproducts",{"_index":1093,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.getproduct(id",{"_index":1092,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.getproducts(pageoptionsdto",{"_index":1079,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.postproduct(productimg",{"_index":1090,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.productservice.updateproductbyid",{"_index":1103,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.profileimg",{"_index":1303,"title":{},"body":{"entities/User.html":{}}}],["this.profilerepository.create",{"_index":1204,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profilerepository.save(newprofile",{"_index":1205,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profilerepository.update",{"_index":1206,"title":{},"body":{"injectables/ProfileService.html":{}}}],["this.profileservice.createprofile(req.user",{"_index":1184,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.updateprofilebyuser",{"_index":1185,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.provider",{"_index":1298,"title":{},"body":{"entities/User.html":{}}}],["this.take",{"_index":976,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.typeormhealthindicator.pingcheck('database",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["this.userrepository.create(createuserdto",{"_index":1369,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.createquerybuilder('user",{"_index":1378,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":1377,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":1365,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":1370,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(user.id",{"_index":1375,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.changepasswordwithtoken(changepassworddto",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.createuser",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getallusers(pageoptionsdto",{"_index":1329,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserbyemail(email",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["this.userservice.getuserbyemail(loginuserdto.email",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuserbyid(id",{"_index":1331,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserbyid(payload.userid",{"_index":53,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["this.userservice.getuserbyid(user.id",{"_index":560,"title":{},"body":{"injectables/ConsentService.html":{},"injectables/ProfileService.html":{}}}],["this.userservice.updateuserinfobytoken",{"_index":1332,"title":{},"body":{"controllers/UserController.html":{}}}],["thresholdpercent",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["throw",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/ProductService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["to:jane",{"_index":1730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{}}}],["token.strategy",{"_index":328,"title":{},"body":{"modules/AuthModule.html":{}}}],["token.strategy.ts",{"_index":7,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:10",{"_index":19,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["token.strategy.ts:21",{"_index":27,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["tokenpayload",{"_index":26,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["top",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["total",{"_index":1775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["touch",{"_index":1542,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["transformer",{"_index":1009,"title":{},"body":{"classes/PageOptionsDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":1223,"title":{"injectables/TransformInterceptor.html":{}},"body":{"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["true",{"_index":571,"title":{},"body":{"classes/CreateConsentDto.html":{},"classes/CreateProductDto.html":{},"modules/DatabaseModule.html":{},"injectables/MinioClientService.html":{},"classes/PageDto.html":{},"entities/Product.html":{},"modules/RedisModule.html":{},"entities/User.html":{}}}],["true})@exclude",{"_index":1281,"title":{},"body":{"entities/User.html":{}}}],["true})@joincolumn",{"_index":1276,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{}}}],["tsup",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ttl",{"_index":1217,"title":{},"body":{"modules/RedisModule.html":{}}}],["twitter",{"_index":1548,"title":{},"body":{"index.html":{}}}],["type",{"_index":23,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseEntity.html":{},"interfaces/BufferedFile.html":{},"classes/ChangePasswordDto.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"classes/CreateConsentDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/EmailDto.html":{},"injectables/EmailService.html":{},"classes/EmailVerificationDto.html":{},"injectables/GoogleAuthStrategy.html":{},"interfaces/HasFile.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"classes/Order.html":{},"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{},"interfaces/TokenPayload.html":{},"injectables/TransformInterceptor.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type_a",{"_index":1472,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["type_ab",{"_index":1477,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["type_b",{"_index":1473,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["type_o",{"_index":1475,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":1562,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":456,"title":{},"body":{"classes/BaseEntity.html":{},"entities/Consent.html":{},"injectables/ConsentService.html":{},"entities/Product.html":{},"injectables/ProductService.html":{},"entities/Profile.html":{},"injectables/ProfileService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormhealthindicator",{"_index":72,"title":{},"body":{"controllers/AppController.html":{}}}],["typeormmodule",{"_index":541,"title":{},"body":{"modules/ConsentModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/ProfileModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([consent",{"_index":544,"title":{},"body":{"modules/ConsentModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1109,"title":{},"body":{"modules/ProductModule.html":{}}}],["typeormmodule.forfeature([profile",{"_index":1193,"title":{},"body":{"modules/ProfileModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1339,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":656,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1257,"title":{},"body":{"classes/UpdateAuthDto.html":{},"classes/UpdateOrderDto.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/bcryptjs",{"_index":1422,"title":{},"body":{"dependencies.html":{}}}],["types/cookie",{"_index":1424,"title":{},"body":{"dependencies.html":{}}}],["types/gravatar",{"_index":1427,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":1429,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":1431,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":1433,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1435,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1506,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":620,"title":{},"body":{"classes/CreateProfileDto.html":{},"controllers/ProductController.html":{},"entities/Profile.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["undefined})@exclude",{"_index":1287,"title":{},"body":{"entities/User.html":{}}}],["undefined})@isenum(order)@isoptional",{"_index":995,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["unique",{"_index":1294,"title":{},"body":{"entities/User.html":{}}}],["unique_violation",{"_index":1485,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":1520,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":30,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MinioClientService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1561,"title":{},"body":{"properties.html":{}}}],["update",{"_index":895,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["update(@param('id",{"_index":922,"title":{},"body":{"controllers/OrderController.html":{}}}],["update(id",{"_index":905,"title":{},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{}}}],["update(temp_filename",{"_index":826,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["updateauthdto",{"_index":1252,"title":{"classes/UpdateAuthDto.html":{}},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["updateconsentbyuser",{"_index":518,"title":{},"body":{"controllers/ConsentController.html":{},"injectables/ConsentService.html":{}}}],["updateconsentbyuser(req",{"_index":523,"title":{},"body":{"controllers/ConsentController.html":{}}}],["updateconsentbyuser(user",{"_index":552,"title":{},"body":{"injectables/ConsentService.html":{}}}],["updateconsentdto",{"_index":1259,"title":{"classes/UpdateConsentDto.html":{}},"body":{"classes/UpdateConsentDto.html":{},"coverage.html":{}}}],["updated",{"_index":1376,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedat",{"_index":445,"title":{},"body":{"classes/BaseEntity.html":{},"interfaces/BufferedFile.html":{},"interfaces/HasFile.html":{},"interfaces/StoredFile.html":{},"interfaces/StoredFileMetadata.html":{}}}],["updatedatecolumn",{"_index":453,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updatedproduct",{"_index":1157,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateorderdto",{"_index":906,"title":{"classes/UpdateOrderDto.html":{}},"body":{"controllers/OrderController.html":{},"injectables/OrderService.html":{},"classes/UpdateOrderDto.html":{},"coverage.html":{}}}],["updateproductbyid",{"_index":1033,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["updateproductbyid(id",{"_index":1055,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["updateproductdto",{"_index":1056,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updateprofilebyuser",{"_index":1173,"title":{},"body":{"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["updateprofilebyuser(req",{"_index":1176,"title":{},"body":{"controllers/ProfileController.html":{}}}],["updateprofilebyuser(user",{"_index":1200,"title":{},"body":{"injectables/ProfileService.html":{}}}],["updateprofiledto",{"_index":1266,"title":{"classes/UpdateProfileDto.html":{}},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["updates",{"_index":938,"title":{},"body":{"injectables/OrderService.html":{}}}],["updateuserbytoken",{"_index":1317,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuserbytoken(req",{"_index":1323,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuserdto",{"_index":1269,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserinfobytoken",{"_index":1345,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserinfobytoken(user",{"_index":1358,"title":{},"body":{"injectables/UserService.html":{}}}],["uploadedfile",{"_index":1060,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["uploading",{"_index":821,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["uploadproductimg",{"_index":788,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["uploadproductimg(id",{"_index":803,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["uploadprofileimg",{"_index":789,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["uploadprofileimg(user",{"_index":806,"title":{},"body":{"injectables/MinioClientService.html":{}}}],["url",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["usefactory",{"_index":657,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/MinioClientModule.html":{},"modules/RedisModule.html":{}}}],["useguards",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"controllers/ProductController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["useguards(googleauthguard",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConsentController.html":{},"controllers/ProfileController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@put()@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":1324,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(kakaoauthguard",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(naverauthguard",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(roleguard(role.admin",{"_index":1094,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@delete('/:id",{"_index":1037,"title":{},"body":{"controllers/ProductController.html":{}}}],["useguards(undefined)@get('/all",{"_index":1319,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/:id')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":1057,"title":{},"body":{"controllers/ProductController.html":{}}}],["useinterceptors",{"_index":1061,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(fileinterceptor('image",{"_index":1081,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":285,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Consent.html":{},"controllers/ConsentController.html":{},"injectables/ConsentService.html":{},"injectables/EmailService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/MinioClientService.html":{},"injectables/NaverAuthStrategy.html":{},"entities/Profile.html":{},"injectables/ProfileService.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.consent",{"_index":508,"title":{},"body":{"entities/Consent.html":{}}}],["user.dto",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":633,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:13",{"_index":764,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:17",{"_index":641,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":639,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:29",{"_index":647,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:33",{"_index":648,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":649,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:39",{"_index":636,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":762,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.password",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.profile",{"_index":1167,"title":{},"body":{"entities/Profile.html":{}}}],["user.provider",{"_index":731,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["user/dto/change",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/dto/create",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{}}}],["user/dto/email",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user/dto/email.dto",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/dto/login",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user/entities/user.entity",{"_index":513,"title":{},"body":{"entities/Consent.html":{},"injectables/ConsentService.html":{},"injectables/MinioClientService.html":{},"entities/Profile.html":{},"injectables/ProfileService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.controller",{"_index":1338,"title":{},"body":{"modules/UserModule.html":{}}}],["user/user.module",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/ProfileModule.html":{}}}],["user/user.service",{"_index":40,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConsentService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user?.roles.includes(role",{"_index":1574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usercontroller",{"_index":1313,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/TokenPayload.html":{}}}],["userinfo",{"_index":559,"title":{},"body":{"injectables/ConsentService.html":{},"injectables/ProfileService.html":{}}}],["userinfo.consent.id",{"_index":562,"title":{},"body":{"injectables/ConsentService.html":{}}}],["userinfo.profile.id",{"_index":1207,"title":{},"body":{"injectables/ProfileService.html":{}}}],["usermodule",{"_index":113,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/ProfileModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":664,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["usernamefield",{"_index":759,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["userrepository",{"_index":1348,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":17,"title":{"injectables/UserService.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConsentService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/ProfileService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usessl",{"_index":782,"title":{},"body":{"modules/MinioClientModule.html":{}}}],["validate",{"_index":13,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["validate(_accesstoken",{"_index":712,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["validate(email",{"_index":756,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["validate(payload",{"_index":25,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validationschema",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":487,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailDto.html":{},"classes/EmailVerificationDto.html":{},"classes/LoginUserDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"dependencies.html":{}}}],["value",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MinioClientService.html":{},"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1395,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1565,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["verification.dto",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verification.dto.ts",{"_index":698,"title":{},"body":{"classes/EmailVerificationDto.html":{},"coverage.html":{}}}],["verification.dto.ts:11",{"_index":702,"title":{},"body":{"classes/EmailVerificationDto.html":{}}}],["verification.dto.ts:7",{"_index":703,"title":{},"body":{"classes/EmailVerificationDto.html":{}}}],["verifycallback",{"_index":716,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["version",{"_index":1559,"title":{},"body":{"properties.html":{}}}],["via",{"_index":1783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1515,"title":{},"body":{"index.html":{}}}],["website",{"_index":1546,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["welcomesignupemail",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["welcomesignupemail(email",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["well",{"_index":1100,"title":{},"body":{"controllers/ProductController.html":{}}}],["went",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["white",{"_index":1710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["width",{"_index":1604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["width:670px",{"_index":1666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["works",{"_index":1099,"title":{},"body":{"controllers/ProductController.html":{}}}],["world",{"_index":176,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["wrong",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["x",{"_index":835,"title":{},"body":{"injectables/MinioClientService.html":{},"controllers/ProductController.html":{}}}],["yes",{"_index":1054,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["you'd",{"_index":1536,"title":{},"body":{"index.html":{}}}],["you,your",{"_index":1753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z\\d$@$!%*#?&]{8",{"_index":654,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z\\d$@$!%*#?&]{8,}$/)@apiproperty({example",{"_index":645,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[$@$!%*#?&])[a",{"_index":644,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":643,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConsentModule.html":{},"modules/EmailModule.html":{},"modules/MinioClientModule.html":{},"modules/OrderModule.html":{},"modules/ProductModule.html":{},"modules/ProfileModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/access-token.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/access-token.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/access-token.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { UserService } from '@user/user.service';\nimport { TokenPayload } from '@auth/interfaces/tokenPayload.interface';\n//jwt자체를 검증하는 단계이다\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      // 토큰 위치를 헤드에 놓겠다. 베어러토큰방식이다\n      secretOrKey: configService.get('ACCESS_TOKEN_SECRET'),\n    });\n  }\n  async validate(payload: TokenPayload) {\n    return await this.userService.getUserById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getAPIServerHealthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAPIServerHealthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAPIServerHealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from '@root/app.service';\nimport {\n  DiskHealthIndicator,\n  HealthCheck,\n  HealthCheckResult,\n  HealthCheckService,\n  MemoryHealthIndicator,\n  TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly appService: AppService,\n    private readonly healthCheckService: HealthCheckService,\n    private typeOrmHealthIndicator: TypeOrmHealthIndicator,\n    private memoryHealthIndicator: MemoryHealthIndicator,\n    private diskHealthIndicator: DiskHealthIndicator,\n  ) {}\n\n  // @Get()\n  // getHello(): string {\n  //   return this.appService.getHello();\n  // }\n\n  @Get()\n  @HealthCheck()\n  async getAPIServerHealthCheck(): Promise {\n    return await this.healthCheckService.check([\n      () => this.typeOrmHealthIndicator.pingCheck('database'),\n      // database 모듈에 핑을 날린다\n      () =>\n        this.memoryHealthIndicator.checkHeap('memory heap', 300 * 1024 * 1024),\n      // 300 메가 이상으로 RSS 메모리가 올라가지 않게 해준다.\n      () =>\n        this.memoryHealthIndicator.checkRSS('memory RSS', 300 * 1024 * 1024),\n      // 50퍼센트 이상의 저장공간이 되지 못하게 한다.\n      () =>\n        this.diskHealthIndicator.checkStorage('disk health', {\n          thresholdPercent: 0.5,\n          path: '/',\n        }),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConsentModule\n\nConsentModule\n\nAppModule -->\n\nConsentModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nMinioClientModule\n\nMinioClientModule\n\nAppModule -->\n\nMinioClientModule->AppModule\n\n\n\n\n\nOrderModule\n\nOrderModule\n\nAppModule -->\n\nOrderModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConsentModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            MinioClientModule\n                        \n                        \n                            OrderModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            ProfileModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\nimport { DatabaseModule } from '@database/database.module';\nimport { UserModule } from '@user/user.module';\nimport { ProductModule } from '@product/product.module';\nimport { AuthModule } from '@auth/auth.module';\nimport { OrderModule } from '@order/order.module';\nimport { EmailModule } from '@email/email.module';\nimport { RedisModule } from '@redis/redis.module';\nimport { AppController } from '@root/app.controller';\nimport { AppService } from '@root/app.service';\nimport { ConsentModule } from './consent/consent.module';\nimport { ProfileModule } from './profile/profile.module';\nimport { MinioClientModule } from './minio-client/minio-client.module';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        SERVER_PORT: Joi.number().required(),\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n        ACCESS_TOKEN_SECRET: Joi.string().required(),\n        ACCESS_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        EMAIL_SERVICE: Joi.string().required(),\n        EMAIL_USER: Joi.string().required(),\n        EMAIL_PASSWORD: Joi.string().required(),\n        FIND_PASSWORD_TOKEN_SECRET: Joi.string().required(),\n        FIND_PASSWORD_EXPIRATION_TIME: Joi.string().required(),\n        EMAIL_BASE_URL: Joi.string().required(),\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        REDIS_TTL: Joi.number().required(),\n        // REDIS_USER: Joi.string().required(),\n        // REDIS_PASSWORD: Joi.string().required(),\n        GOOGLE_AUTH_CLIENT_ID: Joi.string().required(),\n        GOOGLE_AUTH_CLIENT_SECRET: Joi.string().required(),\n        GOOGLE_AUTH_CALLBACK_URL: Joi.string().required(),\n        KAKAO_AUTH_CLIENT_ID: Joi.string().required(),\n        KAKAO_AUTH_CALLBACK_URL: Joi.string().required(),\n        NAVER_AUTH_CLIENT_ID: Joi.string().required(),\n        NAVER_AUTH_CLIENT_SECRET: Joi.string().required(),\n        NAVER_AUTH_CALLBACK_URL: Joi.string().required(),\n        MINIO_ENDPOINT: Joi.string().required(),\n        MINIO_PORT: Joi.number().required(),\n        MINIO_ACCESS_KEY: Joi.string().required(),\n        MINIO_SECRET_KEY: Joi.string().required(),\n        MINIO_BUCKET: Joi.string().required(),\n      }),\n    }),\n    TerminusModule,\n    DatabaseModule,\n    UserModule,\n    ProductModule,\n    OrderModule,\n    AuthModule,\n    EmailModule,\n    RedisModule,\n    ConsentModule,\n    ProfileModule,\n    MinioClientModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                authenticate\n                            \n                            \n                                    \n                                    Async\n                                changePassword\n                            \n                            \n                                    \n                                    Async\n                                checkEmail\n                            \n                            \n                                    \n                                    Async\n                                findPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                googleLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                googleLoginCallback\n                            \n                            \n                                    \n                                    \n                                    Async\n                                kakaoLogin\n                            \n                            \n                                    \n                                    \n                                    Async\n                                kakaoLoginCallback\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                loginUser\n                            \n                            \n                                    \n                                    \n                                    Async\n                                naverLogin\n                            \n                            \n                                    \n                                    \n                                    Async\n                                naverLoginCallback\n                            \n                            \n                                    \n                                    Async\n                                sendEmail\n                            \n                            \n                                    \n                                    Async\n                                signupUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@Get()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(changePasswordDto: ChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/change/password')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changePasswordDto\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkEmail(emailVerificationDto: EmailVerificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/check/email')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                emailVerificationDto\n                                            \n                                                            EmailVerificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPassword(emailDto: EmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/find/password')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                emailDto\n                                            \n                                                            EmailDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Get('/google')@UseGuards(GoogleAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:95\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        googleLoginCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLoginCallback(req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@Get('/google/callback')@UseGuards(GoogleAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        kakaoLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    kakaoLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/kakao')@UseGuards(KakaoAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        kakaoLoginCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    kakaoLoginCallback(req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/kakao/callback')@UseGuards(KakaoAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginUser(req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')@ApiBody({type: LoginUserDto})@UseGuards(LocalAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        naverLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    naverLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/naver')@UseGuards(NaverAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:124\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        naverLoginCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    naverLoginCallback(req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/naver/callback')@UseGuards(NaverAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmail(emailDto: EmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/send/email')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                emailDto\n                                            \n                                                            EmailDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        signupUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signupUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Put,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\n\nimport { ApiBearerAuth, ApiBody, ApiTags } from '@nestjs/swagger';\nimport { UserService } from '@user/user.service';\nimport { CreateUserDto } from '@user/dto/create-user.dto';\nimport { LoginUserDto } from '@user/dto/login-user.dto';\nimport { EmailDto } from '@user/dto/email.dto';\nimport { ChangePasswordDto } from '@user/dto/change-password.dto';\nimport { EmailVerificationDto } from '@user/dto/email-verification.dto';\nimport { AuthService } from '@auth/auth.service';\nimport { LocalAuthGuard } from '@auth/guards/local-auth.guard';\nimport { RequestWithUser } from '@auth/interfaces/requestWithUser.interface';\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard';\nimport { GoogleAuthGuard } from '@auth/guards/google-auth.guard';\nimport { KakaoAuthGuard } from '@auth/guards/kakao-auth.guard';\nimport { NaverAuthGuard } from '@auth/guards/naver-auth.guard';\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n  ) {}\n\n  // 회원가입\n  @Post('/signup')\n  async signupUser(@Body() createUserDto: CreateUserDto) {\n    const newUser = await this.authService.signupUser(createUserDto);\n    // await this.authService.signupWelcomeEmail(createUserDto.email);\n    return newUser;\n  }\n  //browser 안에서 사용자가 입력하는 것은 body이고 url에서 입력할 변수명은 param을 사용한다.\n\n  // 로그인\n  @Post('/login')\n  @ApiBody({ type: LoginUserDto })\n  @UseGuards(LocalAuthGuard)\n  async loginUser(@Req() req: RequestWithUser) {\n    const user = req.user;\n    const token = await this.authService.generateAccessToken(user.id);\n    return { user, token };\n  }\n  // async loginUser(@Body() loginUserDto: LoginUserDto) {\n  //   const user = await this.authService.loginUser(loginUserDto);\n  //   const token = await this.authService.generateAccessToken(user.id);\n  //   return { user, token };\n  // }\n\n  @ApiBearerAuth()\n  //스웨거 상에서 헤더에 토큰이 있단 걸 알려줘서 프로그램이 알아듣게 함\n  @Get()\n  @UseGuards(JwtAuthGuard)\n  async authenticate(@Req() req: RequestWithUser) {\n    return await req.user;\n  }\n\n  @Post('/find/password')\n  async findPassword(@Body() emailDto: EmailDto) {\n    return await this.authService.findPasswordSendEmail(emailDto.email);\n  }\n\n  @Put('/change/password')\n  async changePassword(@Body() changePasswordDto: ChangePasswordDto) {\n    return await this.userService.changePasswordWithToken(changePasswordDto);\n  }\n\n  @Post('/send/email')\n  async sendEmail(@Body() emailDto: EmailDto) {\n    return await this.authService.initiateEmailAddressVerification(\n      emailDto.email,\n    );\n  }\n\n  @Post('/check/email')\n  async checkEmail(@Body() emailVerificationDto: EmailVerificationDto) {\n    return await this.authService.confirmEmailVerification(\n      emailVerificationDto,\n    );\n  }\n\n  @HttpCode(200)\n  @Get('/google')\n  @UseGuards(GoogleAuthGuard)\n  async googleLogin() {\n    return HttpStatus.OK;\n  }\n\n  @HttpCode(200)\n  @Get('/google/callback')\n  @UseGuards(GoogleAuthGuard)\n  async googleLoginCallback(@Req() req: RequestWithUser) {\n    const user = req.user;\n    const token = await this.authService.generateAccessToken(user.id);\n    return { user, token };\n  }\n\n  @Get('/kakao')\n  @UseGuards(KakaoAuthGuard)\n  async kakaoLogin() {\n    return HttpStatus.OK;\n  }\n\n  @Get('/kakao/callback')\n  @UseGuards(KakaoAuthGuard)\n  async kakaoLoginCallback(@Req() req: RequestWithUser) {\n    const user = req.user;\n    const token = await this.authService.generateAccessToken(user.id);\n    return { user, token };\n  }\n\n  @Get('/naver')\n  @UseGuards(NaverAuthGuard)\n  async naverLogin() {\n    return HttpStatus.OK;\n  }\n\n  @Get('/naver/callback')\n  @UseGuards(NaverAuthGuard)\n  async naverLoginCallback(@Req() req: RequestWithUser) {\n    const user = req.user;\n    const token = await this.authService.generateAccessToken(user.id);\n    return { user, token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nEmailModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\nKakaoAuthStrategy\n\nKakaoAuthStrategy\n\nAuthModule -->\n\nKakaoAuthStrategy->AuthModule\n\n\n\n\n\nLocalAuthStrategy\n\nLocalAuthStrategy\n\nAuthModule -->\n\nLocalAuthStrategy->AuthModule\n\n\n\n\n\nNaverAuthStrategy\n\nNaverAuthStrategy\n\nAuthModule -->\n\nNaverAuthStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            GoogleAuthStrategy\n                        \n                        \n                            KakaoAuthStrategy\n                        \n                        \n                            LocalAuthStrategy\n                        \n                        \n                            NaverAuthStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule } from '@nestjs/config';\nimport { UserModule } from '@user/user.module';\nimport { EmailModule } from '@email/email.module';\nimport { AuthController } from '@auth/auth.controller';\nimport { AuthService } from '@auth/auth.service';\nimport { AccessTokenStrategy } from '@auth/strategies/access-token.strategy';\nimport { LocalAuthStrategy } from '@auth/strategies/local-auth.strategy';\nimport { GoogleAuthStrategy } from '@auth/strategies/google-auth.strategy';\nimport { KakaoAuthStrategy } from '@auth/strategies/kakao-auth.strategy';\nimport { NaverAuthStrategy } from '@auth/strategies/naver-auth.strategy';\n\n@Module({\n  imports: [UserModule, JwtModule.register({}), ConfigModule, EmailModule],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalAuthStrategy,\n    AccessTokenStrategy,\n    GoogleAuthStrategy,\n    KakaoAuthStrategy,\n    NaverAuthStrategy,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmEmailVerification\n                            \n                            \n                                    Async\n                                findPasswordSendEmail\n                            \n                            \n                                    Public\n                                generateAccessToken\n                            \n                            \n                                generateOTP\n                            \n                            \n                                    Async\n                                initiateEmailAddressVerification\n                            \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                    Async\n                                signupUser\n                            \n                            \n                                    Async\n                                signupWelcomeEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, configService: ConfigService, emailService: EmailService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        confirmEmailVerification\n                        \n                    \n                \n            \n            \n                \n                        \n                    confirmEmailVerification(emailVerificationDto: EmailVerificationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                emailVerificationDto\n                                            \n                                                            EmailVerificationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findPasswordSendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPasswordSendEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateOTP\n                        \n                    \n                \n            \n            \n                \ngenerateOTP()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:117\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        initiateEmailAddressVerification\n                        \n                    \n                \n            \n            \n                \n                        \n                    initiateEmailAddressVerification(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginUser(loginUserDto: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signupUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signupUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signupWelcomeEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    signupWelcomeEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcryptjs';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { CACHE_MANAGER } from '@nestjs/common/cache';\nimport { Cache } from 'cache-manager';\nimport { UserService } from '@user/user.service';\nimport { CreateUserDto } from '@user/dto/create-user.dto';\nimport { Provider } from '@common/enums/provider.enum';\nimport { PostgresErrorCodes } from '@database/postgresErrorCodes.enum';\nimport { LoginUserDto } from '@user/dto/login-user.dto';\nimport { signupEmail } from '@common/template/verificationEmail';\nimport { EmailVerificationDto } from '@user/dto/email-verification.dto';\nimport { EmailService } from '@email/email.service';\nimport { TokenPayload } from '@auth/interfaces/tokenPayload.interface';\nimport welcomeSignupEmail from '@common/template/welcomeSignup';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailService: EmailService,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n  ) {}\n\n  async signupUser(createUserDto: CreateUserDto) {\n    // return await this.userService.createUser(createUserDto);\n    try {\n      return await this.userService.createUser({\n        ...createUserDto,\n        provider: Provider.LOCAL,\n      });\n    } catch (error) {\n      if (error?.code === PostgresErrorCodes.unique_violation) {\n        throw new HttpException(\n          'User with that email already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      } else if (error?.code === PostgresErrorCodes.not_null_violation) {\n        throw new HttpException(\n          'please check not null body value',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      throw new HttpException(\n        'Something went wrong',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  // 이메일 유무 체크 -> 패스워드 매칭 유무(with password decoding)\n  async loginUser(loginUserDto: LoginUserDto) {\n    // 이메일 유무 체크\n    const user = await this.userService.getUserByEmail(loginUserDto.email);\n    // 패스워드 매칭 유무\n    const isMatched = await bcrypt.compare(\n      loginUserDto.password,\n      user.password,\n    );\n    if (!isMatched) {\n      throw new HttpException('Password do not match', HttpStatus.CONFLICT);\n    }\n    return user;\n  }\n\n  public generateAccessToken(userId: string) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('ACCESS_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get('ACCESS_TOKEN_EXPIRATION_TIME')}`,\n    });\n    return token;\n  }\n\n  async signupWelcomeEmail(email: string) {\n    await this.emailService.sendMail({\n      to: email,\n      subject: 'Welcome to Jiwoong world',\n      html: welcomeSignupEmail(email),\n    });\n    return 'Please check your email';\n  }\n\n  async findPasswordSendEmail(email: string) {\n    const payload: any = { email };\n    const user = await this.userService.getUserByEmail(email);\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('FIND_PASSWORD_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get('FIND_PASSWORD_EXPIRATION_TIME')}`,\n    });\n    const url = `${this.configService.get('EMAIL_BASE_URL')}/change/password?token=${token}`;\n    await this.emailService.sendMail({\n      to: email,\n      subject: 'Jiwoong World Password 변경',\n      text: `비밀번호 찾기 ${url}`,\n    });\n    return 'Please check your email';\n  }\n\n  async initiateEmailAddressVerification(email: string) {\n    // 랜덤 번호 생성\n    const generateNumber = this.generateOTP();\n    // redis에 저장\n    await this.cacheManager.set(email, generateNumber);\n    // 이메일 전송\n    await this.emailService.sendMail({\n      to: email,\n      subject: 'Jiwoong - Verification Email Address',\n      html: signupEmail(generateNumber),\n    });\n    return 'Please check your email';\n  }\n\n  generateOTP() {\n    let OTP = '';\n    for (let i = 1; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/base.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createdAt\n                            \n                            \n                                    \n                                    Public\n                                deletedAt\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/base.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CreateDateColumn,\n  DeleteDateColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport abstract class BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  public id: string;\n\n  @CreateDateColumn()\n  public createdAt: Date;\n\n  @UpdateDateColumn()\n  public updatedAt: Date;\n\n  @DeleteDateColumn()\n  public deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BufferedFile.html":{"url":"interfaces/BufferedFile.html","title":"interface - BufferedFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BufferedFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/minio-client/file.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            buffer\n                                        \n                                \n                                \n                                        \n                                            encoding\n                                        \n                                \n                                \n                                        \n                                            fieldname\n                                        \n                                \n                                \n                                        \n                                            mimetype\n                                        \n                                \n                                \n                                        \n                                            originalname\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buffer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buffer:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mimetype:         AppMimeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AppMimeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        originalname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        originalname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BufferedFile {\n  fieldname: string;\n  originalname: string;\n  encoding: string;\n  mimetype: AppMimeType;\n  size: number;\n  buffer: Buffer;\n}\n\nexport interface StoredFile extends HasFile, StoredFileMetadata {}\n\nexport interface HasFile {\n  file: Buffer | string;\n}\n\nexport interface StoredFileMetadata {\n  id: string;\n  name: string;\n  encoding: string;\n  mimetype: AppMimeType;\n  size: number;\n  updatedAt: Date;\n  fileSrc?: string;\n}\n\nexport type AppMimeType = 'image/png' | 'image/jpeg';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(7)@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/change-password.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/change-password.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ChangePasswordDto {\n  @IsString()\n  @MinLength(7)\n  @IsNotEmpty()\n  @ApiProperty()\n  newPassword: string;\n\n  @IsString()\n  @ApiProperty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Consent.html":{"url":"entities/Consent.html","title":"entity - Consent","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Consent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/consent/entities/consent.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                agreeOfETC\n                            \n                            \n                                    \n                                    Public\n                                agreeOfMarketing\n                            \n                            \n                                    \n                                    Public\n                                agreeOfPersonalInfo\n                            \n                            \n                                    \n                                    Public\n                                agreeOfTerm\n                            \n                            \n                                    \n                                    Public\n                                overFourteen\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        agreeOfETC\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/consent/entities/consent.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        agreeOfMarketing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/consent/entities/consent.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        agreeOfPersonalInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/consent/entities/consent.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        agreeOfTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/consent/entities/consent.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        overFourteen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/consent/entities/consent.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.consent)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/consent/entities/consent.entity.ts:8\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne } from 'typeorm';\nimport { BaseEntity } from '@common/base.entity';\nimport { User } from '@user/entities/user.entity';\n\n@Entity()\nexport class Consent extends BaseEntity {\n  @OneToOne(() => User, (user: User) => user.consent)\n  public user?: User;\n\n  @Column({ default: false })\n  public overFourteen: boolean;\n\n  @Column({ default: false })\n  public agreeOfTerm: boolean;\n\n  @Column({ default: false })\n  public agreeOfPersonalInfo: boolean;\n\n  @Column({ default: false })\n  public agreeOfMarketing: boolean;\n\n  @Column({ default: false })\n  public agreeOfETC: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConsentController.html":{"url":"controllers/ConsentController.html","title":"controller - ConsentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConsentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/consent/consent.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                consent\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createConsent\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateConsentByUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createConsent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createConsent(req: RequestWithUser, createConsentDto: CreateConsentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/consent/consent.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createConsentDto\n                                            \n                                                            CreateConsentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateConsentByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateConsentByUser(req: RequestWithUser, createConsentDto: CreateConsentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/consent/consent.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createConsentDto\n                                            \n                                                            CreateConsentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Put, Req, UseGuards } from '@nestjs/common';\nimport { ConsentService } from './consent.service';\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard';\nimport { RequestWithUser } from '@auth/interfaces/requestWithUser.interface';\nimport { CreateConsentDto } from '@consent/dto/create-consent.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Consent')\n@Controller('consent')\nexport class ConsentController {\n  constructor(private readonly consentService: ConsentService) {}\n\n  @Post()\n  @UseGuards(JwtAuthGuard) // 헤더에 jwt로 로그인 유무체크(return user정보) 결국 유저정보를 가져오기 위한수단\n  async createConsent(\n    @Req() req: RequestWithUser,\n    @Body() createConsentDto: CreateConsentDto,\n  ) {\n    return await this.consentService.createConsent(req.user, createConsentDto);\n  }\n\n  @Put()\n  @UseGuards(JwtAuthGuard)\n  async updateConsentByUser(\n    @Req() req: RequestWithUser,\n    @Body() createConsentDto: CreateConsentDto,\n  ) {\n    return await this.consentService.updateConsentByUser(\n      req.user,\n      createConsentDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConsentModule.html":{"url":"modules/ConsentModule.html","title":"module - ConsentModule","body":"\n                   \n\n\n\n\n    Modules\n    ConsentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConsentModule\n\n\n\ncluster_ConsentModule_imports\n\n\n\ncluster_ConsentModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nConsentModule\n\nConsentModule\n\nConsentModule -->\n\nUserModule->ConsentModule\n\n\n\n\n\nConsentService\n\nConsentService\n\nConsentModule -->\n\nConsentService->ConsentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/consent/consent.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConsentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConsentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConsentController } from '@consent/consent.controller';\nimport { ConsentService } from '@consent/consent.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Consent } from '@consent/entities/consent.entity';\nimport { UserModule } from '@user/user.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Consent]), UserModule],\n  controllers: [ConsentController],\n  providers: [ConsentService],\n})\nexport class ConsentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConsentService.html":{"url":"injectables/ConsentService.html","title":"injectable - ConsentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConsentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/consent/consent.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConsent\n                            \n                            \n                                    Async\n                                updateConsentByUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(consentRepository: Repository, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/consent/consent.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        consentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createConsent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createConsent(user: User, createConsentDto: CreateConsentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/consent/consent.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createConsentDto\n                                            \n                                                            CreateConsentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateConsentByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateConsentByUser(user: User, createConsentDto: CreateConsentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/consent/consent.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createConsentDto\n                                            \n                                                            CreateConsentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Consent } from '@consent/entities/consent.entity';\nimport { Repository } from 'typeorm';\nimport { User } from '@user/entities/user.entity';\nimport { CreateConsentDto } from '@consent/dto/create-consent.dto';\nimport { UserService } from '@user/user.service';\n\n@Injectable()\nexport class ConsentService {\n  constructor(\n    @InjectRepository(Consent)\n    private readonly consentRepository: Repository,\n    private readonly userService: UserService,\n  ) {}\n\n  async createConsent(user: User, createConsentDto: CreateConsentDto) {\n    const newConsent = await this.consentRepository.create({\n      ...createConsentDto,\n      user,\n    });\n    // createConsentDto를 포함한 모든 부분이란 뜻이다.\n    await this.consentRepository.save(newConsent);\n    return newConsent;\n  }\n\n  async updateConsentByUser(user: User, createConsentDto: CreateConsentDto) {\n    const userInfo = await this.userService.getUserById(user.id);\n    return await this.consentRepository.update(\n      { id: userInfo.consent.id },\n      createConsentDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateAuthDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConsentDto.html":{"url":"classes/CreateConsentDto.html","title":"class - CreateConsentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConsentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/consent/dto/create-consent.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                agreeOfETC\n                            \n                            \n                                    \n                                agreeOfMarketing\n                            \n                            \n                                    \n                                agreeOfPersonalInfo\n                            \n                            \n                                    \n                                agreeOfTerm\n                            \n                            \n                                    \n                                overFourteen\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        agreeOfETC\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/consent/dto/create-consent.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        agreeOfMarketing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/consent/dto/create-consent.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        agreeOfPersonalInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/consent/dto/create-consent.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        agreeOfTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/consent/dto/create-consent.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        overFourteen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/consent/dto/create-consent.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateConsentDto {\n  @ApiProperty({ example: true })\n  overFourteen: boolean;\n\n  @ApiProperty({ example: true })\n  agreeOfTerm: boolean;\n\n  @ApiProperty({ example: true })\n  agreeOfPersonalInfo: boolean;\n\n  @ApiProperty({ example: false })\n  agreeOfMarketing: boolean;\n\n  @ApiProperty({ example: false })\n  agreeOfETC: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrderDto.html":{"url":"classes/CreateOrderDto.html","title":"class - CreateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/dto/create-order.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateOrderDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                isSale\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                    Optional\n                                productImg\n                            \n                            \n                                    \n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'iphone'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'good'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isSale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'true'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Iphone16'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '15000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        productImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'imageExample'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '4'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/dto/create-product.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateProductDto {\n  @ApiProperty({ example: 'Iphone16' })\n  name: string;\n  @ApiProperty({ example: 'good' })\n  description: string;\n  @ApiProperty({ example: 'imageExample' })\n  productImg?: string;\n  @ApiProperty({ example: '15000' })\n  price: number;\n  @ApiProperty({ example: '4' })\n  stock: number;\n  @ApiProperty({ example: 'true' })\n  isSale: boolean;\n  @ApiProperty({ example: 'iphone' })\n  category: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProfileDto.html":{"url":"classes/CreateProfileDto.html","title":"class - CreateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/dto/create-profile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addressOfHome\n                            \n                            \n                                    \n                                age\n                            \n                            \n                                    \n                                birthday\n                            \n                            \n                                    \n                                bloodType\n                            \n                            \n                                    \n                                gender\n                            \n                            \n                                    \n                                height\n                            \n                            \n                                    \n                                introduction\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addressOfHome\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Seoul'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/create-profile.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 26})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/create-profile.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        birthday\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '1999-03-11'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/create-profile.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bloodType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BloodType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'BloodType', default: undefined, enum: BloodType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/create-profile.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Gender\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Gender', default: undefined, enum: Gender})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/create-profile.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 184})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/create-profile.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        introduction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'I am a boy'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/dto/create-profile.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Gender } from '@common/enums/gender.enum';\nimport { BloodType } from '@common/enums/bloodtype.enum';\n\nexport class CreateProfileDto {\n  @ApiProperty({\n    description: 'Gender',\n    default: Gender.MALE,\n    enum: Gender,\n  })\n  gender: Gender;\n\n  @ApiProperty({ example: 26 })\n  age: number;\n\n  @ApiProperty({ example: '1999-03-11' })\n  birthday: Date;\n\n  @ApiProperty({ example: 184 })\n  height: number;\n\n  @ApiProperty({ example: 'Seoul' })\n  addressOfHome: string;\n\n  @ApiProperty({\n    description: 'BloodType',\n    default: BloodType.TYPE_A,\n    enum: BloodType,\n  })\n  bloodType: BloodType;\n\n  @ApiProperty({ example: 'I am a boy' })\n  introduction: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                consent\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Optional\n                                profileImg\n                            \n                            \n                                    \n                                    Optional\n                                provider\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        consent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Consent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: CreateConsentDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({example: 'dnd0311@naver.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({example: 'Jiwoong'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)@ApiProperty({example: 'password123@'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        profileImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Provider\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Provider } from '@common/enums/provider.enum';\nimport { Consent } from '@consent/entities/consent.entity';\nimport { CreateConsentDto } from '@consent/dto/create-consent.dto';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'Jiwoong' })\n  name: string;\n\n  @IsEmail()\n  @ApiProperty({ example: 'dnd0311@naver.com' })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  //최소 8 자, 최소 하나의 문자, 하나의 숫자 및 하나의 특수 문자 :\n  @MinLength(7)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/)\n  @ApiProperty({ example: 'password123@' })\n  password?: string;\n  //소셜로그인을 위해서\n\n  @IsString()\n  profileImg?: string;\n\n  @IsString()\n  provider?: Provider;\n\n  @ApiProperty({ type: CreateConsentDto })\n  consent?: Consent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (cfg: ConfigService) => ({\n        type: 'postgres',\n        host: cfg.get('POSTGRES_HOST'),\n        port: cfg.get('POSTGRES_PORT'),\n        username: cfg.get('POSTGRES_USER'),\n        password: cfg.get('POSTGRES_PASSWORD'),\n        database: cfg.get('POSTGRES_DB'),\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        autoLoadEntities: true,\n        synchronize: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailDto.html":{"url":"classes/EmailDto.html","title":"class - EmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/email.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({example: 'dnd0311@naver.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/email.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class EmailDto {\n  @IsEmail()\n  @ApiProperty({ example: 'dnd0311@naver.com' })\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailService } from '@email/email.service';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [EmailService],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n                    \n                        \n                            Defined in src/email/email.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        Mail.Options\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport Mail from 'nodemailer/lib/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { createTransport } from 'nodemailer';\n\n@Injectable()\nexport class EmailService {\n  private nodemailerTransport: Mail;\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      service: configService.get('EMAIL_SERVICE'),\n      auth: {\n        user: configService.get('EMAIL_USER'),\n        pass: configService.get('EMAIL_PASSWORD'),\n      },\n    });\n  }\n  sendMail(options: Mail.Options) {\n    return this.nodemailerTransport.sendMail(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailVerificationDto.html":{"url":"classes/EmailVerificationDto.html","title":"class - EmailVerificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailVerificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/email-verification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                code\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({example: '000000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/email-verification.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({example: 'dnd0311@naver.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/email-verification.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class EmailVerificationDto {\n  @IsEmail()\n  @ApiProperty({ example: 'dnd0311@naver.com' })\n  email: string;\n\n  @IsString()\n  @ApiProperty({ example: '000000' })\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthGuard.html":{"url":"injectables/GoogleAuthGuard.html","title":"injectable - GoogleAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/google-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.GOOGLE)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@common/enums/provider.enum';\n\n@Injectable()\nexport class GoogleAuthGuard extends AuthGuard(Provider.GOOGLE) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthStrategy.html":{"url":"injectables/GoogleAuthStrategy.html","title":"injectable - GoogleAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/google-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.GOOGLE,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/google-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(_accessToken: string, _refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/google-auth.strategy.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                        VerifyCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth2';\nimport { ConfigService } from '@nestjs/config';\nimport { Provider } from '@common/enums/provider.enum';\nimport { UserService } from '@user/user.service';\n\n@Injectable()\nexport class GoogleAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.GOOGLE,\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      clientID: configService.get('GOOGLE_AUTH_CLIENT_ID'),\n      clientSecret: configService.get('GOOGLE_AUTH_CLIENT_SECRET'),\n      callbackURL: configService.get('GOOGLE_AUTH_CALLBACK_URL'),\n      scope: ['profile', 'email'],\n    });\n  }\n\n  async validate(\n    _accessToken: string,\n    _refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ) {\n    //name, email, provider\n\n    const { provider, displayName, email, picture } = profile;\n    try {\n      // 이메일 유무 체크\n      const user = await this.userService.getUserByEmail(email);\n\n      // 기존 가입된 정보가 있다면 provider로 체크해줌으로써 니가 어디에 가입했었지를 체크해준다(google이나 kakao같은 걸로 됐는지를 본다)\n      if (user.provider !== provider) {\n        throw new HttpException(\n          `You are already subscribed to ${user.provider}`,\n          HttpStatus.CONFLICT,\n        );\n      }\n      done(null, user);\n    } catch (err) {\n      console.log(err);\n      if (err.status === 404) {\n        // 유저정보가 없다는 뜻이니 회원가입이 우선된다.\n        const newUser = await this.userService.createUser({\n          name: displayName,\n          email,\n          provider,\n          profileImg: picture,\n        });\n        done(null, newUser);\n      } else if (err.status === 409) {\n        throw new HttpException(\n          'Your email already exists',\n          HttpStatus.CONFLICT,\n        );\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HasFile.html":{"url":"interfaces/HasFile.html","title":"interface - HasFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HasFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/minio-client/file.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            file\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        file\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        file:     Buffer | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer | string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BufferedFile {\n  fieldname: string;\n  originalname: string;\n  encoding: string;\n  mimetype: AppMimeType;\n  size: number;\n  buffer: Buffer;\n}\n\nexport interface StoredFile extends HasFile, StoredFileMetadata {}\n\nexport interface HasFile {\n  file: Buffer | string;\n}\n\nexport interface StoredFileMetadata {\n  id: string;\n  name: string;\n  encoding: string;\n  mimetype: AppMimeType;\n  size: number;\n  updatedAt: Date;\n  fileSrc?: string;\n}\n\nexport type AppMimeType = 'image/png' | 'image/jpeg';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KakaoAuthGuard.html":{"url":"injectables/KakaoAuthGuard.html","title":"injectable - KakaoAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KakaoAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/kakao-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.KAKAO)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@common/enums/provider.enum';\n\n@Injectable()\nexport class KakaoAuthGuard extends AuthGuard(Provider.KAKAO) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KakaoAuthStrategy.html":{"url":"injectables/KakaoAuthStrategy.html","title":"injectable - KakaoAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KakaoAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/kakao-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.KAKAO,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/kakao-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(_accessToken: string, _refreshToken: string, profile: any, done: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/kakao-auth.strategy.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-kakao';\nimport { ConfigService } from '@nestjs/config';\nimport { Provider } from '@common/enums/provider.enum';\nimport { UserService } from '@user/user.service';\n\n@Injectable()\nexport class KakaoAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.KAKAO,\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      clientID: configService.get('KAKAO_AUTH_CLIENT_ID'),\n      callbackURL: configService.get('KAKAO_AUTH_CALLBACK_URL'),\n    });\n  }\n  async validate(\n    _accessToken: string,\n    _refreshToken: string,\n    profile: any,\n    done: any,\n  ) {\n    const { provider, displayName } = profile;\n    const { profile_image } = profile._json.properties;\n    const { email } = profile._json.kakao_account;\n\n    try {\n      const user = await this.userService.getUserByEmail(email);\n      if (user.provider !== provider) {\n        throw new HttpException(\n          `You are already subscribed to ${user.provider}`,\n          HttpStatus.CONFLICT,\n        );\n      }\n      done(null, user);\n    } catch (err) {\n      if (err.status === 404) {\n        const newUser = await this.userService.createUser({\n          name: displayName,\n          email,\n          provider,\n          profileImg: profile_image,\n        });\n        done(null, newUser);\n      } else if (err.status === 409) {\n        throw new HttpException(\n          'Your email already exists',\n          HttpStatus.CONFLICT,\n        );\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.LOCAL)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@common/enums/provider.enum';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard(Provider.LOCAL) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthStrategy.html":{"url":"injectables/LocalAuthStrategy.html","title":"injectable - LocalAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local-auth.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local-auth.strategy.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '@auth/auth.service';\n\n@Injectable()\nexport class LocalAuthStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n  async validate(email: string, password: string) {\n    return await this.authService.loginUser({ email, password });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({example: 'dnd0311@naver.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)@ApiProperty({example: 'password123@'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginUserDto {\n  @IsEmail()\n  @ApiProperty({ example: 'dnd0311@naver.com' })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  @ApiProperty({ example: 'password123@' })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MinioClientModule.html":{"url":"modules/MinioClientModule.html","title":"module - MinioClientModule","body":"\n                   \n\n\n\n\n    Modules\n    MinioClientModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MinioClientModule\n\n\n\ncluster_MinioClientModule_providers\n\n\n\ncluster_MinioClientModule_exports\n\n\n\n\nMinioClientService \n\nMinioClientService \n\n\n\nMinioClientModule\n\nMinioClientModule\n\nMinioClientService  -->\n\nMinioClientModule->MinioClientService \n\n\n\n\n\nMinioClientService\n\nMinioClientService\n\nMinioClientModule -->\n\nMinioClientService->MinioClientModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/minio-client/minio-client.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MinioClientService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MinioClientService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MinioClientService } from './minio-client.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MinioModule } from 'nestjs-minio-client';\n\n@Module({\n  imports: [\n    ConfigModule,\n    MinioModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        endPoint: configService.get('MINIO_ENDPOINT'),\n        accessKey: configService.get('MINIO_ACCESS_KEY'),\n        secretKey: configService.get('MINIO_SECRET_KEY'),\n        port: configService.get('MINIO_PORT'),\n        useSSL: false,\n      }),\n    }),\n  ],\n  providers: [MinioClientService],\n  exports: [MinioClientService],\n})\nexport class MinioClientModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioClientService.html":{"url":"injectables/MinioClientService.html","title":"injectable - MinioClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/minio-client/minio-client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                baseBucket\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createProductImg\n                            \n                            \n                                    Public\n                                    Async\n                                deleteFolderContents\n                            \n                            \n                                    Public\n                                    Async\n                                uploadProductImg\n                            \n                            \n                                    Public\n                                    Async\n                                uploadProfileImg\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    client\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(minio: MinioService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/minio-client/minio-client.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        minio\n                                                  \n                                                        \n                                                                    MinioService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createProductImg\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProductImg(file: BufferedFile, categoryName1: string, categoryName2: string, baseBucket: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/minio-client/minio-client.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                            BufferedFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                categoryName1\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                categoryName2\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                baseBucket\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.baseBucket\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteFolderContents\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFolderContents(bucketName, folderPath)\n                \n            \n\n\n                    \n                        \n                            Defined in src/minio-client/minio-client.service.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                bucketName\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                folderPath\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadProductImg\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadProductImg(id: string, file: BufferedFile, categoryName: string, baseBucket: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/minio-client/minio-client.service.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                file\n                                            \n                                                            BufferedFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                categoryName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                baseBucket\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.baseBucket\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadProfileImg\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadProfileImg(user: User, file: BufferedFile, categoryName: string, baseBucket: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/minio-client/minio-client.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                file\n                                            \n                                                            BufferedFile\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                categoryName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                baseBucket\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.baseBucket\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseBucket\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/minio-client/minio-client.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/minio-client/minio-client.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        client\n                    \n                \n\n                \n                    \n                        getclient()\n                    \n                \n                            \n                                \n                                    Defined in src/minio-client/minio-client.service.ts:13\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { MinioService } from 'nestjs-minio-client';\nimport { ConfigService } from '@nestjs/config';\nimport { User } from '@user/entities/user.entity';\nimport { BufferedFile } from '@root/minio-client/file.model';\nimport * as crypto from 'crypto';\n\n@Injectable()\nexport class MinioClientService {\n  private readonly logger: Logger;\n  private readonly baseBucket: string;\n\n  public get client() {\n    return this.minio.client;\n  }\n\n  constructor(\n    private readonly minio: MinioService,\n    private readonly configService: ConfigService,\n  ) {\n    this.logger = new Logger('MinioStorageService');\n    this.baseBucket = this.configService.get('MINIO_BUCKET');\n  }\n\n  public async uploadProfileImg(\n    user: User,\n    file: BufferedFile,\n    categoryName: string,\n    baseBucket: string = this.baseBucket,\n  ) {\n    if (!(file.mimetype.includes('jpeg') || file.mimetype.includes('png'))) {\n      throw new HttpException(\n        'Error uploading file type error',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const temp_filename = Date.now().toString();\n    const hashedFileName = crypto\n      .createHash('md5')\n      .update(temp_filename)\n      .digest('hex');\n\n    const ext = file.originalname.substring(\n      file.originalname.lastIndexOf('.'),\n      file.originalname.length,\n    );\n\n    const metaData = {\n      'Content-Type': file.mimetype,\n      'X-Amz-Meta-Testing': 1234,\n    };\n\n    const filename = hashedFileName + ext;\n    const fileBuffer = file.buffer;\n    const filePath = `${categoryName}/${user.id}/${filename}`;\n\n    // 같은 이름이 존재할 시 삭제 로직\n    if (`${categoryName}/${user.id}`.includes(user.id)) {\n      await this.deleteFolderContents(\n        this.baseBucket,\n        `${categoryName}/${user.id}/`,\n      );\n    }\n\n    // 파일 첨부\n    this.client.putObject(\n      baseBucket,\n      filePath,\n      fileBuffer,\n      fileBuffer.length,\n      metaData,\n      function (err) {\n        console.log('=======================', err);\n        if (err) {\n          throw new HttpException(\n            'Error uploading processing error',\n            HttpStatus.BAD_REQUEST,\n          );\n        }\n      },\n    );\n    return `http://${this.configService.get('MINIO_ENDPOINT')}:${this.configService.get('MINIO_PORT')}/${this.configService.get('MINIO_BUCKET')}/${filePath}`;\n  }\n\n  public async createProductImg(\n    file: BufferedFile,\n    categoryName1: string,\n    categoryName2: string,\n    baseBucket: string = this.baseBucket,\n  ) {\n    if (!(file.mimetype.includes('jpeg') || file.mimetype.includes('png'))) {\n      throw new HttpException(\n        'Error uploading product file type error',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const temp_filename = Date.now().toString();\n    const hashedFileName = crypto\n      .createHash('md5')\n      .update(temp_filename)\n      .digest('hex');\n\n    const ext = file.originalname.substring(\n      file.originalname.lastIndexOf('.'),\n      file.originalname.length,\n    );\n    console.log(ext);\n\n    const metaData = {\n      'Content-Type': file.mimetype,\n      'X-Amz-Meta-Testing': 1234,\n    };\n\n    const filename = hashedFileName + ext;\n    const fileBuffer = file.buffer;\n    const filePath = `${categoryName1}/${categoryName2}/${filename}`;\n\n    this.client.putObject(\n      baseBucket,\n      filePath,\n      fileBuffer,\n      fileBuffer.length,\n      metaData,\n      function (err) {\n        console.log('+++++++++++++++++', err);\n        if (err) {\n          throw new HttpException(\n            'Error uploading processing product error',\n            HttpStatus.BAD_REQUEST,\n          );\n        }\n      },\n    );\n    return `http://${this.configService.get('MINIO_ENDPOINT')}:${this.configService.get('MINIO_PORT')}/${this.configService.get('MINIO_BUCKET')}/${filePath}`;\n  }\n\n  public async uploadProductImg(\n    id: string,\n    file: BufferedFile,\n    categoryName: string,\n    baseBucket: string = this.baseBucket,\n  ) {\n    if (!(file.mimetype.includes('jpeg') || file.mimetype.includes('png'))) {\n      throw new HttpException(\n        'Error uploading product file type error',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const temp_filename = Date.now().toString();\n    const hashedFileName = crypto\n      .createHash('md5')\n      .update(temp_filename)\n      .digest('hex');\n\n    const ext = file.originalname.substring(\n      file.originalname.lastIndexOf('.'),\n      file.originalname.length,\n    );\n\n    const metaData = {\n      'Content-Type': file.mimetype,\n      'X-Amz-Meta-Testing': 1234,\n    };\n\n    const filename = hashedFileName + ext;\n    const fileBuffer = file.buffer;\n    const filePath = `${categoryName}/${id}/${filename}`;\n\n    if (`${categoryName}/${id}`.includes(id)) {\n      await this.deleteFolderContents(\n        this.baseBucket,\n        `${categoryName}/${id}/`,\n      );\n    }\n\n    this.client.putObject(\n      baseBucket,\n      filePath,\n      fileBuffer,\n      fileBuffer.length,\n      metaData,\n      function (err) {\n        console.log('+++++++++++++++++', err);\n        if (err) {\n          throw new HttpException(\n            'Error uploading processing product error',\n            HttpStatus.BAD_REQUEST,\n          );\n        }\n      },\n    );\n    return `http://${this.configService.get('MINIO_ENDPOINT')}:${this.configService.get('MINIO_PORT')}/${this.configService.get('MINIO_BUCKET')}/${filePath}`;\n  }\n\n  public async deleteFolderContents(bucketName, folderPath) {\n    const objectsList = [];\n    const stream = await this.client.listObjects(bucketName, folderPath, true);\n    for await (const obj of stream) {\n      objectsList.push(obj.name);\n    }\n\n    if (objectsList.length > 0) {\n      const deleteResult = await this.client.removeObjects(\n        bucketName,\n        objectsList,\n      );\n      console.log('Deleted objects', deleteResult);\n    } else {\n      console.log('No objects found to delete');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NaverAuthGuard.html":{"url":"injectables/NaverAuthGuard.html","title":"injectable - NaverAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NaverAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/naver-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.NAVER)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@common/enums/provider.enum';\n\n@Injectable()\nexport class NaverAuthGuard extends AuthGuard(Provider.NAVER) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NaverAuthStrategy.html":{"url":"injectables/NaverAuthStrategy.html","title":"injectable - NaverAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NaverAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/naver-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.NAVER,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/naver-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(_accessToken: string, _refreshToken: string, profile: any, done: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/naver-auth.strategy.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-naver';\nimport { ConfigService } from '@nestjs/config';\nimport { Provider } from '@common/enums/provider.enum';\nimport { UserService } from '@user/user.service';\n\n@Injectable()\nexport class NaverAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.NAVER,\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      clientID: configService.get('NAVER_AUTH_CLIENT_ID'),\n      clientSecret: configService.get('NAVER_AUTH_CLIENT_SECRET'),\n      callbackURL: configService.get('NAVER_AUTH_CALLBACK_URL'),\n    });\n  }\n  async validate(\n    _accessToken: string,\n    _refreshToken: string,\n    profile: any,\n    done: any,\n  ) {\n    const { provider, displayName } = profile;\n    const { email, profile_image } = profile._json;\n\n    try {\n      const user = await this.userService.getUserByEmail(email);\n      if (user.provider !== provider) {\n        throw new HttpException(\n          `You are already subscribed to ${user.provider}`,\n          HttpStatus.CONFLICT,\n        );\n      }\n      done(null, user);\n    } catch (err) {\n      if (err.status === 404) {\n        const newUser = await this.userService.createUser({\n          name: displayName,\n          email,\n          provider,\n          profileImg: profile_image,\n        });\n        done(null, newUser);\n      } else if (err.status === 409) {\n        throw new HttpException(\n          'This email already exists',\n          HttpStatus.CONFLICT,\n        );\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Order.html":{"url":"classes/Order.html","title":"class - Order","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Order\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/entities/order.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                ASC\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        ASC\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order\n\n                    \n                \n                    \n                        \n                                Defined in src/order/entities/order.entity.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Order {\n  static ASC: Order;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OrderController.html":{"url":"controllers/OrderController.html","title":"controller - OrderController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OrderController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/order.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                order\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createOrderDto: CreateOrderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateOrderDto: UpdateOrderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/order/order.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateOrderDto\n                                            \n                                                            UpdateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\n\nimport { ApiTags } from '@nestjs/swagger';\nimport { OrderService } from '@order/order.service';\nimport { CreateOrderDto } from '@order/dto/create-order.dto';\nimport { UpdateOrderDto } from '@order/dto/update-order.dto';\n\n@ApiTags('Order')\n@Controller('order')\nexport class OrderController {\n  constructor(private readonly orderService: OrderService) {}\n\n  @Post()\n  create(@Body() createOrderDto: CreateOrderDto) {\n    return this.orderService.create(createOrderDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.orderService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.orderService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateOrderDto: UpdateOrderDto) {\n    return this.orderService.update(+id, updateOrderDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.orderService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrderModule.html":{"url":"modules/OrderModule.html","title":"module - OrderModule","body":"\n                   \n\n\n\n\n    Modules\n    OrderModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OrderModule\n\n\n\ncluster_OrderModule_providers\n\n\n\n\nOrderService\n\nOrderService\n\n\n\nOrderModule\n\nOrderModule\n\nOrderModule -->\n\nOrderService->OrderModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/order/order.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OrderService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OrderController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OrderController } from '@order/order.controller';\nimport { OrderService } from '@order/order.service';\n\n@Module({\n  controllers: [OrderController],\n  providers: [OrderService],\n})\nexport class OrderModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrderService.html":{"url":"injectables/OrderService.html","title":"injectable - OrderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OrderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/order.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createOrderDto: CreateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateOrderDto: UpdateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/order/order.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateOrderDto\n                                            \n                                                            UpdateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateOrderDto } from '@order/dto/create-order.dto';\nimport { UpdateOrderDto } from '@order/dto/update-order.dto';\n\n@Injectable()\nexport class OrderService {\n  create(createOrderDto: CreateOrderDto) {\n    return 'This action adds a new order';\n  }\n\n  findAll() {\n    return `This action returns all order`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} order`;\n  }\n\n  update(id: number, updateOrderDto: UpdateOrderDto) {\n    return `This action updates a #${id} order`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} order`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                data\n                            \n                            \n                                    \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page.dto.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { PageMetaDto } from '@common/dtos/page-meta.dto';\n\nexport class PageDto {\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  readonly data: T[];\n\n  @ApiProperty({ type: () => PageMetaDto })\n  readonly meta: PageMetaDto;\n\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-meta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    \n                                    Readonly\n                                page\n                            \n                            \n                                    \n                                    Readonly\n                                pageCount\n                            \n                            \n                                    \n                                    Readonly\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaDtoParameters)\n                    \n                \n                        \n                            \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaDtoParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-meta.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { PageMetaDtoParameters } from '@common/interfaces/page-meta-dto-parameters.interface';\n\nexport class PageMetaDto {\n  @ApiProperty()\n  readonly page: number;\n\n  @ApiProperty()\n  readonly take: number;\n\n  @ApiProperty()\n  readonly itemCount: number;\n\n  @ApiProperty()\n  readonly pageCount: number;\n\n  @ApiProperty()\n  readonly hasPreviousPage: boolean;\n\n  @ApiProperty()\n  readonly hasNextPage: boolean;\n\n  constructor({ pageOptionsDto, itemCount }: PageMetaDtoParameters) {\n    this.page = pageOptionsDto.page;\n    this.take = pageOptionsDto.take;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.take);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaDtoParameters.html":{"url":"interfaces/PageMetaDtoParameters.html","title":"interface - PageMetaDtoParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaDtoParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/page-meta-dto-parameters.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from '@common/dtos/page-options.dto';\n\nexport interface PageMetaDtoParameters {\n  pageOptionsDto: PageOptionsDto;\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/page-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                order\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'dnd0311@naver.com'})@Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jiwoong'})@Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order\n\n                    \n                \n                \n                    \n                        Default value : Order.ASC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: Order, default: undefined})@IsEnum(Order)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 50, default: 10})@Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/page-options.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dtos/page-options.dto.ts:41\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsEnum, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { number, string } from '@hapi/joi';\nimport { Order } from '@common/constants/order.constant';\n\nexport class PageOptionsDto {\n  @ApiPropertyOptional({ enum: Order, default: Order.ASC })\n  @IsEnum(Order)\n  @IsOptional()\n  readonly order?: Order = Order.ASC;\n\n  @ApiPropertyOptional({ minimum: 1, default: 1 })\n  @Type(() => number)\n  // @IsInt()\n  // @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 50,\n    default: 10,\n  })\n  @Type(() => number)\n  // @Min(1)\n  // @Max(50)\n  @IsOptional()\n  readonly take?: number = 10;\n\n  @ApiPropertyOptional({ example: 'Jiwoong' })\n  @Type(() => String)\n  @IsOptional()\n  readonly name?: string;\n\n  @ApiPropertyOptional({ example: 'dnd0311@naver.com' })\n  @Type(() => String)\n  @IsOptional()\n  readonly email?: string;\n\n  get skip(): number {\n    return (this.page - 1) * this.take;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/entities/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                category\n                            \n                            \n                                    \n                                    Public\n                                description\n                            \n                            \n                                    \n                                    Public\n                                isSale\n                            \n                            \n                                    \n                                    Public\n                                name\n                            \n                            \n                                    \n                                    Public\n                                price\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                productImg\n                            \n                            \n                                    \n                                    Public\n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isSale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        productImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/product/entities/product.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\nimport { BaseEntity } from '@common/base.entity';\n\n@Entity()\nexport class Product extends BaseEntity {\n  @Column()\n  public name: string;\n\n  @Column()\n  public description: string;\n\n  @Column({ nullable: true })\n  public productImg?: string;\n\n  @Column()\n  public price: number;\n\n  @Column()\n  public stock: number;\n\n  @Column({ default: true })\n  public isSale: boolean;\n\n  @Column({ nullable: true })\n  public category: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deleteAllProducts\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteProductById\n                            \n                            \n                                    \n                                    Async\n                                getAllProducts\n                            \n                            \n                                    \n                                    Async\n                                getProductById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                registerProduct\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateProductById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAllProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete')\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:103\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProductById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllProducts(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pageOptionsDto\n                                            \n                                                            PageOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProductById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        registerProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerProduct(productImg?: BufferedFile, createProductDto?: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiBody({type: CreateProductDto})@ApiBody({description: 'A single image file with additional product data', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productImg\n                                            \n                                                            BufferedFile\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProductById(id: string, productImg?: BufferedFile, updateProductDto?: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/:id')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiBody({type: CreateProductDto})@ApiBody({description: 'A single image file with additional product data', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/product/product.controller.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productImg\n                                            \n                                                            BufferedFile\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Query,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\n\nimport { ApiBearerAuth, ApiBody, ApiConsumes, ApiTags } from '@nestjs/swagger';\nimport { PageOptionsDto } from '@common/dtos/page-options.dto';\nimport { PageDto } from '@common/dtos/page.dto';\nimport { Role } from '@common/enums/role.enum';\nimport { ProductService } from '@product/product.service';\nimport { Product } from '@product/entities/product.entity';\nimport { CreateProductDto } from '@product/dto/create-product.dto';\nimport RoleGuard from '@auth/guards/role.guard';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { BufferedFile } from '@root/minio-client/file.model';\n\n@ApiBearerAuth()\n@ApiTags('Product')\n@Controller('product')\nexport class ProductController {\n  constructor(private readonly productService: ProductService) {}\n\n  // product 전체를 불러오는 api\n  @Get('/all')\n  async getAllProducts(\n    @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return await this.productService.getProducts(pageOptionsDto);\n  }\n\n  // product를 등록하는 api\n  @Post('/create')\n  @UseInterceptors(FileInterceptor('image'))\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({ type: CreateProductDto })\n  @ApiBody({\n    description: 'A single image file with additional product data',\n    schema: {\n      type: 'object',\n      properties: {\n        image: {\n          type: 'string',\n          format: 'binary',\n          description: 'Product image file',\n        },\n\n        name: {\n          type: 'string',\n          description: 'Name of the product',\n          example: 'IPhone16',\n        },\n\n        description: {\n          type: 'string',\n          description: 'Description of the product',\n          example: 'This phone is good',\n        },\n\n        price: {\n          type: 'number',\n          description: 'Price of the product',\n          example: '640000',\n        },\n\n        stock: {\n          type: 'number',\n          description: 'Stock of the product',\n          example: '100',\n        },\n\n        category: {\n          type: 'string',\n          description: 'Category of product',\n          example: 'Mobile',\n        },\n      },\n    },\n  })\n  async registerProduct(\n    @UploadedFile() productImg?: BufferedFile,\n    @Body() createProductDto?: CreateProductDto,\n  ) {\n    return await this.productService.postProduct(productImg, createProductDto);\n  }\n\n  // product 상세 정보를 가져오는 api\n  @Get('/:id')\n  async getProductById(@Param('id') id: string) {\n    return await this.productService.getProduct(id);\n  }\n\n  //모든 product를 삭제하는 api\n  @Delete('/delete')\n  async deleteAllProducts() {\n    return await this.productService.deleteProducts();\n  }\n\n  // product의 id에 해당되는 데이터를 삭제하는 api\n  @UseGuards(RoleGuard(Role.ADMIN))\n  @Delete('/:id')\n  async deleteProductById(@Param('id') id: string) {\n    return await this.productService.deleteProductById(id);\n  }\n\n  // product의 id에 해당하는 데이터를 수정하는 api\n  @UseGuards(RoleGuard(Role.ADMIN))\n  @Put('/:id')\n  @UseInterceptors(FileInterceptor('image'))\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({ type: CreateProductDto })\n  @ApiBody({\n    description: 'A single image file with additional product data',\n    schema: {\n      type: 'object',\n      properties: {\n        image: {\n          type: 'string',\n          format: 'binary',\n          description: 'Product image file',\n        },\n\n        name: {\n          type: 'string',\n          description: 'Name of the product',\n          example: 'IPhone',\n        },\n\n        description: {\n          type: 'string',\n          description: 'Description of the product',\n          example: 'This phone works well',\n        },\n\n        price: {\n          type: 'number',\n          description: 'Price of the product',\n          example: '5000',\n        },\n\n        stock: {\n          type: 'number',\n          description: 'Stock of the product',\n          example: '10',\n        },\n      },\n    },\n  })\n  async updateProductById(\n    @Param('id') id: string,\n    @UploadedFile() productImg?: BufferedFile,\n    @Body() updateProductDto?: CreateProductDto,\n    //CreateProductDto는 내가 바꿀 내용을 가져오게 한다. 그리고 updateproductDto는 모든지 바꿀수 있는 변수 x라고 생각하면 된다.\n  ) {\n    return await this.productService.updateProductById(\n      id,\n      productImg,\n      updateProductDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_ProductModule_imports\n\n\n\n\nMinioClientModule\n\nMinioClientModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nMinioClientModule->ProductModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MinioClientModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ProductController } from '@product/product.controller';\nimport { ProductService } from '@product/product.service';\nimport { Product } from '@product/entities/product.entity';\nimport { MinioClientModule } from '@root/minio-client/minio-client.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product]), MinioClientModule],\n  controllers: [ProductController],\n  providers: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/product.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteProductById\n                            \n                            \n                                    Async\n                                deleteProducts\n                            \n                            \n                                    Async\n                                getProduct\n                            \n                            \n                                    Async\n                                getProducts\n                            \n                            \n                                    Async\n                                postProduct\n                            \n                            \n                                    Async\n                                updateProductById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productRepository: Repository, minioClientService: MinioClientService)\n                    \n                \n                        \n                            \n                                Defined in src/product/product.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        minioClientService\n                                                  \n                                                        \n                                                                        MinioClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProductById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProducts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProduct(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProducts(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pageOptionsDto\n                                            \n                                                            PageOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        postProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    postProduct(image?: BufferedFile, createProductDto?: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                image\n                                            \n                                                            BufferedFile\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProductById(id: string, image?: BufferedFile, updateProductDto?: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/product/product.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                            BufferedFile\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { PageOptionsDto } from '@common/dtos/page-options.dto';\nimport { PageDto } from '@common/dtos/page.dto';\nimport { PageMetaDto } from '@common/dtos/page-meta.dto';\nimport { Product } from '@product/entities/product.entity';\nimport { CreateProductDto } from '@product/dto/create-product.dto';\nimport { MinioClientService } from '@root/minio-client/minio-client.service';\nimport { BufferedFile } from '@root/minio-client/file.model';\n\n@Injectable()\nexport class ProductService {\n  constructor(\n    @InjectRepository(Product)\n    private readonly productRepository: Repository,\n    private readonly minioClientService: MinioClientService,\n  ) {}\n\n  async getProducts(pageOptionsDto: PageOptionsDto): Promise> {\n    // const products = await this.productRepository.find();\n    // return { count: products.length, data: products };\n    const queryBuilder = this.productRepository.createQueryBuilder('product');\n    queryBuilder\n      .orderBy('product.createdAt', pageOptionsDto.order)\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take);\n\n    const itemCount = await queryBuilder.getCount();\n    const { entities } = await queryBuilder.getRawAndEntities();\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async postProduct(image?: BufferedFile, createProductDto?: CreateProductDto) {\n    const productImg = await this.minioClientService.createProductImg(\n      image,\n      'product',\n      createProductDto.category,\n    );\n    const newProduct = await this.productRepository.create({\n      productImg,\n      ...createProductDto,\n    });\n    await this.productRepository.save(newProduct);\n    return newProduct;\n  }\n\n  async getProduct(id: string) {\n    const product = await this.productRepository.findOneBy({ id });\n    if (!product) {\n      throw new HttpException('Product not found', HttpStatus.NOT_FOUND);\n    }\n    return product;\n  }\n\n  async deleteProducts() {\n    const deleteResponse = await this.productRepository.delete({});\n    if (deleteResponse.affected === 0) {\n      throw new HttpException('Something new Error', HttpStatus.BAD_REQUEST);\n    }\n    return 'Deleted all Products';\n  }\n\n  async deleteProductById(id: string) {\n    const deleteResponse = await this.productRepository.delete({ id });\n    if (!deleteResponse.affected) {\n      throw new HttpException('Product not found', HttpStatus.NOT_FOUND);\n    }\n    return 'Product deleted successfully.';\n  }\n\n  async updateProductById(\n    id: string,\n    image?: BufferedFile,\n    updateProductDto?: CreateProductDto,\n  ) {\n    const productImg = await this.minioClientService.uploadProductImg(\n      id,\n      image,\n      'Product',\n    );\n    await this.productRepository.update(id, {\n      ...updateProductDto,\n      productImg,\n    });\n    const updatedProduct = await this.productRepository.findOneBy({ id });\n    if (updatedProduct) {\n      return updatedProduct;\n    }\n    throw new HttpException('Product not found', HttpStatus.NOT_FOUND);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Profile.html":{"url":"entities/Profile.html","title":"entity - Profile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/entities/profile.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                addressOfHome\n                            \n                            \n                                    \n                                    Public\n                                age\n                            \n                            \n                                    \n                                    Public\n                                birthday\n                            \n                            \n                                    \n                                    Public\n                                bloodType\n                            \n                            \n                                    \n                                    Public\n                                gender\n                            \n                            \n                                    \n                                    Public\n                                height\n                            \n                            \n                                    \n                                    Public\n                                introduction\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        addressOfHome\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        birthday\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        bloodType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BloodType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: BloodType, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Gender\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Gender, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        height\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        introduction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.profile)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/profile/entities/profile.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne } from 'typeorm';\nimport { BaseEntity } from '@common/base.entity';\nimport { User } from '@user/entities/user.entity';\nimport { Gender } from '@common/enums/gender.enum';\nimport { BloodType } from '@common/enums/bloodtype.enum';\n\n@Entity()\nexport class Profile extends BaseEntity {\n  @OneToOne(() => User, (user: User) => user.profile)\n  public user?: User;\n\n  // 성별, 나이, 생년월일, 키, 주소, 혈액형, 자기소개\n  @Column({\n    type: 'enum',\n    enum: Gender,\n    default: Gender.MINORITY,\n  })\n  public gender: Gender;\n\n  @Column()\n  public age: number;\n\n  @Column()\n  public birthday: Date;\n\n  @Column()\n  public height: number;\n\n  @Column()\n  public addressOfHome: string;\n\n  @Column({\n    type: 'enum',\n    enum: BloodType,\n    default: BloodType.TYPE_A,\n  })\n  public bloodType: BloodType;\n\n  @Column()\n  public introduction: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profile\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createProfile\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateProfileByUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProfile(req: RequestWithUser, createProfileDto: CreateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/profile/profile.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createProfileDto\n                                            \n                                                            CreateProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateProfileByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfileByUser(req: RequestWithUser, createProfileDto: CreateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/profile/profile.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createProfileDto\n                                            \n                                                            CreateProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Put, Req, UseGuards } from '@nestjs/common';\nimport { ProfileService } from './profile.service';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard';\nimport { RequestWithUser } from '@auth/interfaces/requestWithUser.interface';\nimport { CreateProfileDto } from '@profile/dto/create-profile.dto';\n\n@ApiBearerAuth()\n@ApiTags('Profile')\n@Controller('profile')\nexport class ProfileController {\n  constructor(private readonly profileService: ProfileService) {}\n\n  @Post()\n  @UseGuards(JwtAuthGuard)\n  async createProfile(\n    @Req() req: RequestWithUser,\n    @Body() createProfileDto: CreateProfileDto,\n  ) {\n    return await this.profileService.createProfile(req.user, createProfileDto);\n  }\n\n  @Put()\n  @UseGuards(JwtAuthGuard)\n  async updateProfileByUser(\n    @Req() req: RequestWithUser,\n    @Body() createProfileDto: CreateProfileDto,\n  ) {\n    return await this.profileService.updateProfileByUser(\n      req.user,\n      createProfileDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_imports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nProfileModule\n\nProfileModule\n\nProfileModule -->\n\nUserModule->ProfileModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Profile } from '@profile/entities/profile.entity';\nimport { ProfileController } from '@profile/profile.controller';\nimport { ProfileService } from '@profile/profile.service';\nimport { UserModule } from '@user/user.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Profile]), UserModule],\n  controllers: [ProfileController],\n  providers: [ProfileService],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/profile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProfile\n                            \n                            \n                                    Async\n                                updateProfileByUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profileRepository: Repository, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/profile/profile.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProfile(user: User, createProfileDto: CreateProfileDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/profile/profile.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createProfileDto\n                                            \n                                                            CreateProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfileByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfileByUser(user: User, createProfileDto: CreateProfileDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/profile/profile.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createProfileDto\n                                            \n                                                            CreateProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Profile } from '@profile/entities/profile.entity';\nimport { Repository } from 'typeorm';\nimport { User } from '@user/entities/user.entity';\nimport { CreateProfileDto } from '@profile/dto/create-profile.dto';\nimport { UserService } from '@user/user.service';\n\n@Injectable()\nexport class ProfileService {\n  constructor(\n    @InjectRepository(Profile)\n    private readonly profileRepository: Repository,\n    private readonly userService: UserService,\n  ) {}\n\n  async createProfile(user: User, createProfileDto: CreateProfileDto) {\n    const newProfile = await this.profileRepository.create({\n      ...createProfileDto,\n      user,\n    });\n\n    await this.profileRepository.save(newProfile);\n    return newProfile;\n  }\n\n  async updateProfileByUser(user: User, createProfileDto: CreateProfileDto) {\n    const userInfo = await this.userService.getUserById(user.id);\n    return await this.profileRepository.update(\n      { id: userInfo.profile.id },\n      createProfileDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CacheModule } from '@nestjs/common/cache';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as redisStore from 'cache-manager-redis-store';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          store: redisStore,\n          host: configService.get('REDIS_HOST'),\n          // username: configService.get('REDIS_USER'),\n          // password: configService.get('REDIS_PASSWORD'),\n          port: configService.get('REDIS_PORT'),\n          ttl: configService.get('REDIS_TTL'),\n        };\n      },\n      isGlobal: true,\n    }),\n  ],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/requestWithUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { User } from '@user/entities/user.entity';\n\nexport interface RequestWithUser extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StoredFile.html":{"url":"interfaces/StoredFile.html","title":"interface - StoredFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StoredFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/minio-client/file.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            HasFile\n                            StoredFileMetadata\n            \n\n\n\n\n    \n\n\n    \n        export interface BufferedFile {\n  fieldname: string;\n  originalname: string;\n  encoding: string;\n  mimetype: AppMimeType;\n  size: number;\n  buffer: Buffer;\n}\n\nexport interface StoredFile extends HasFile, StoredFileMetadata {}\n\nexport interface HasFile {\n  file: Buffer | string;\n}\n\nexport interface StoredFileMetadata {\n  id: string;\n  name: string;\n  encoding: string;\n  mimetype: AppMimeType;\n  size: number;\n  updatedAt: Date;\n  fileSrc?: string;\n}\n\nexport type AppMimeType = 'image/png' | 'image/jpeg';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StoredFileMetadata.html":{"url":"interfaces/StoredFileMetadata.html","title":"interface - StoredFileMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StoredFileMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/minio-client/file.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            encoding\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fileSrc\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            mimetype\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fileSrc\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fileSrc:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mimetype:         AppMimeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AppMimeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface BufferedFile {\n  fieldname: string;\n  originalname: string;\n  encoding: string;\n  mimetype: AppMimeType;\n  size: number;\n  buffer: Buffer;\n}\n\nexport interface StoredFile extends HasFile, StoredFileMetadata {}\n\nexport interface HasFile {\n  file: Buffer | string;\n}\n\nexport interface StoredFileMetadata {\n  id: string;\n  name: string;\n  encoding: string;\n  mimetype: AppMimeType;\n  size: number;\n  updatedAt: Date;\n  fileSrc?: string;\n}\n\nexport type AppMimeType = 'image/png' | 'image/jpeg';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/transform.interceptor.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { map, Observable } from 'rxjs';\n\nexport function createInfo(statusCode: number = 200) {\n  return {\n    statusCode,\n    message: 'success',\n  };\n}\n\nexport type Response = ReturnType & {\n  body: T;\n};\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    const res = context.switchToHttp().getResponse();\n    const status = res.statusCode;\n    return next\n      .handle()\n      .pipe(map((body) => Object.assign({}, createInfo(status), { body })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAuthDto.html":{"url":"classes/UpdateAuthDto.html","title":"class - UpdateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-auth.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateAuthDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAuthDto } from './create-auth.dto';\n\nexport class UpdateAuthDto extends PartialType(CreateAuthDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConsentDto.html":{"url":"classes/UpdateConsentDto.html","title":"class - UpdateConsentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConsentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/consent/dto/update-consent.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateConsentDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateConsentDto } from './create-consent.dto';\n\nexport class UpdateConsentDto extends PartialType(CreateConsentDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateOrderDto.html":{"url":"classes/UpdateOrderDto.html","title":"class - UpdateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/order/dto/update-order.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateOrderDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateOrderDto } from './create-order.dto';\n\nexport class UpdateOrderDto extends PartialType(CreateOrderDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/product/dto/update-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateProductDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateProductDto } from '@product/dto/create-product.dto';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/profile/dto/update-profile.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateProfileDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProfileDto } from './create-profile.dto';\n\nexport class UpdateProfileDto extends PartialType(CreateProfileDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from '@user/dto/create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                consent\n                            \n                            \n                                    \n                                    Public\n                                email\n                            \n                            \n                                    \n                                    Public\n                                name\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    Public\n                                profile\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                profileImg\n                            \n                            \n                                    \n                                    Public\n                                provider\n                            \n                            \n                                    \n                                    \n                                    Public\n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        consent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Consent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {eager: true, cascade: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        profile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Profile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {eager: true, cascade: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        profileImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Provider\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Provider, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, array: true, default: undefined})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BeforeInsert, Column, Entity, OneToOne, JoinColumn } from 'typeorm';\nimport * as bcrypt from 'bcryptjs';\nimport * as gravatar from 'gravatar';\nimport { InternalServerErrorException } from '@nestjs/common';\nimport { Exclude } from 'class-transformer';\nimport { BaseEntity } from '@common/base.entity';\nimport { Provider } from '@common/enums/provider.enum';\nimport { Role } from '@common/enums/role.enum';\nimport { Consent } from '@consent/entities/consent.entity';\nimport { Profile } from '@profile/entities/profile.entity';\n\n@Entity()\nexport class User extends BaseEntity {\n  // name, email, password,\n  @Column()\n  public name: string;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public password?: string;\n  //소셜로그인 시 패스워드 안 넣어도 되게 하기 위해서\n\n  @Column()\n  public profileImg?: string;\n  // ?는 있어도 그만 없어도 그만이라는 뜻이다. optional\n\n  @Column({\n    type: 'enum',\n    enum: Provider,\n    default: Provider.LOCAL,\n  })\n  public provider: Provider;\n\n  @Column({\n    type: 'enum',\n    enum: Role,\n    array: true,\n    default: [Role.USER],\n    //동시에 할 수 있을 때는 array를 사용해준다. user이자 admin이 될 수 있기 때문이다.\n  })\n  @Exclude()\n  public roles: Role[];\n\n  @OneToOne(() => Consent, {\n    eager: true,\n    cascade: true,\n  })\n  @JoinColumn()\n  public consent: Consent;\n\n  @OneToOne(() => Profile, {\n    eager: true,\n    cascade: true,\n  })\n  @JoinColumn()\n  public profile: Profile;\n\n  @BeforeInsert()\n  async beforeSaveFunction() {\n    try {\n      if (this.provider !== Provider.LOCAL) {\n        return;\n      } else {\n        // password 암호화\n        const saltValue = await bcrypt.genSalt(10);\n        this.password = await bcrypt.hash(this.password, saltValue);\n\n        //profile 이미지 자동생성\n        this.profileImg = gravatar.url(this.email, {\n          s: '200',\n          r: 'pg',\n          d: 'mm',\n          protocol: 'https',\n        });\n      }\n    } catch (error) {\n      throw new InternalServerErrorException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    \n                                    Async\n                                getUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateUserByToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/all')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pageOptionsDto\n                                            \n                                                            PageOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateUserByToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserByToken(req: RequestWithUser, profileImg?: BufferedFile, updateUserDto?: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put()@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiBody({type: CreateUserDto})@ApiBody({description: 'A single image file with additional user data', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profileImg\n                                            \n                                                            BufferedFile\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Put,\n  Query,\n  Req,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiBody, ApiConsumes, ApiTags } from '@nestjs/swagger';\nimport { Role } from '@common/enums/role.enum';\nimport { PageOptionsDto } from '@common/dtos/page-options.dto';\nimport { PageDto } from '@common/dtos/page.dto';\nimport { UserService } from '@user/user.service';\nimport RoleGuard from '@auth/guards/role.guard';\nimport { User } from '@user/entities/user.entity';\nimport { JwtAuthGuard } from '@auth/guards/jwt-auth.guard';\nimport { RequestWithUser } from '@auth/interfaces/requestWithUser.interface';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { BufferedFile } from '@root/minio-client/file.model';\nimport { CreateUserDto } from '@user/dto/create-user.dto';\n\n@ApiBearerAuth()\n@ApiTags('User')\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @UseGuards(RoleGuard(Role.ADMIN))\n  @Get('/all')\n  async getAllUsers(\n    @Query() pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    return await this.userService.getAllUsers(pageOptionsDto);\n  }\n\n  // 관리자가 아이디로 유저를 찾을 경우\n  @Get('/:id')\n  async getUser(@Param('id') id: string) {\n    return await this.userService.getUserById(id);\n  }\n\n  //수정할 떄\n  @UseGuards(JwtAuthGuard)\n  @Put()\n  @UseInterceptors(FileInterceptor('image'))\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({ type: CreateUserDto })\n  @ApiBody({\n    description: 'A single image file with additional user data',\n    schema: {\n      type: 'object',\n      properties: {\n        image: {\n          type: 'string',\n          format: 'binary',\n          description: 'Profile image file',\n        },\n\n        name: {\n          type: 'string',\n          description: 'Name of the user',\n          example: 'Jiwoong',\n        },\n\n        email: {\n          type: 'string',\n          description: 'Email address of the user',\n          example: 'dnd0311@naver.com',\n        },\n\n        // password: {\n        //   type: 'string',\n        //   description: 'Password of the user',\n        //   example: 'password123@',\n        // },\n      },\n    },\n  })\n  async updateUserByToken(\n    @Req() req: RequestWithUser,\n    @UploadedFile() profileImg?: BufferedFile,\n    @Body() updateUserDto?: CreateUserDto,\n  ) {\n    return await this.userService.updateUserInfoByToken(\n      req.user,\n      profileImg,\n      updateUserDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\n\nMinioClientModule\n\nMinioClientModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nMinioClientModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MinioClientModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule } from '@nestjs/config';\nimport { UserController } from '@user/user.controller';\nimport { UserService } from '@user/user.service';\nimport { User } from '@user/entities/user.entity';\nimport { MinioClientModule } from '@root/minio-client/minio-client.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    JwtModule.register({}),\n    ConfigModule,\n    MinioClientModule,\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePasswordWithToken\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                updateUserInfoByToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, jwtService: JwtService, configService: ConfigService, minioClientService: MinioClientService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        minioClientService\n                                                  \n                                                        \n                                                                        MinioClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePasswordWithToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePasswordWithToken(changePasswordDto: ChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changePasswordDto\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pageOptionsDto\n                                            \n                                                            PageOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserInfoByToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserInfoByToken(user: User, image?: BufferedFile, updateUserDto?: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                image\n                                            \n                                                            BufferedFile\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcryptjs';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { PageOptionsDto } from '@common/dtos/page-options.dto';\nimport { PageDto } from '@common/dtos/page.dto';\nimport { PageMetaDto } from '@common/dtos/page-meta.dto';\nimport { BufferedFile } from '@root/minio-client/file.model';\nimport { MinioClientService } from '@root/minio-client/minio-client.service';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly minioClientService: MinioClientService,\n  ) {}\n\n  // id 기반으로 유저를 찾는 로직\n  async getUserById(id: string) {\n    const user = await this.userRepository.findOneBy({ id });\n    if (!user) {\n      throw new NotFoundException('User does not exist');\n    }\n    return user;\n  }\n\n  // email 기반으로 유저를 찾는 로직\n  async getUserByEmail(email: string) {\n    const user = await this.userRepository.findOneBy({ email });\n    if (user) return user;\n    throw new HttpException('User does not exist', HttpStatus.NOT_FOUND);\n  }\n\n  // 유저를 등록하는 로직\n  async createUser(createUserDto: CreateUserDto) {\n    const newUser = await this.userRepository.create(createUserDto);\n    await this.userRepository.save(newUser);\n    return newUser;\n  }\n\n  async changePasswordWithToken(changePasswordDto: ChangePasswordDto) {\n    const { email } = await this.jwtService.verify(changePasswordDto.token, {\n      secret: this.configService.get('FIND_PASSWORD_TOKEN_SECRET'),\n    });\n    const user = await this.getUserByEmail(email);\n    const hashedPassword = await bcrypt.hash(changePasswordDto.newPassword, 10);\n    await this.userRepository.update(user.id, {\n      password: hashedPassword,\n    });\n    return 'Updated password';\n  }\n\n  //전제 유저를 가져오는 로직\n  async getAllUsers(pageOptionsDto: PageOptionsDto): Promise> {\n    // return await this.userRepository.find();\n    const queryBuilder = this.userRepository.createQueryBuilder('user');\n\n    if (pageOptionsDto.name) {\n      queryBuilder.andWhere('user.name ILIKE :name', {\n        name: `%${pageOptionsDto.name}%`,\n      });\n    }\n\n    if (pageOptionsDto.email) {\n      queryBuilder.andWhere('user.email ILIKE :email', {\n        email: `%${pageOptionsDto.email}%`,\n      });\n    }\n\n    queryBuilder\n      .orderBy('user.createdAt', pageOptionsDto.order)\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take);\n    const itemCount = await queryBuilder.getCount();\n    const { entities } = await queryBuilder.getRawAndEntities();\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n    return new PageDto(entities, pageMetaDto);\n  }\n\n  async updateUserInfoByToken(\n    user: User,\n    image?: BufferedFile,\n    updateUserDto?: CreateUserDto,\n  ) {\n    const profileImg = await this.minioClientService.uploadProfileImg(\n      user,\n      image,\n      'Profile',\n    );\n\n    return await this.userRepository.update(user.id, {\n      ...updateUserDto,\n      profileImg,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/dto/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/update-auth.dto.ts\n            \n            class\n            UpdateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/google-auth.guard.ts\n            \n            injectable\n            GoogleAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/kakao-auth.guard.ts\n            \n            injectable\n            KakaoAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/naver-auth.guard.ts\n            \n            injectable\n            NaverAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/role.guard.ts\n            \n            variable\n            RoleGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interfaces/requestWithUser.interface.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interfaces/tokenPayload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/access-token.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/google-auth.strategy.ts\n            \n            injectable\n            GoogleAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/kakao-auth.strategy.ts\n            \n            injectable\n            KakaoAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local-auth.strategy.ts\n            \n            injectable\n            LocalAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/naver-auth.strategy.ts\n            \n            injectable\n            NaverAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/dtos/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/common/dtos/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/common/dtos/page.dto.ts\n            \n            class\n            PageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            function\n            createInfo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interfaces/page-meta-dto-parameters.interface.ts\n            \n            interface\n            PageMetaDtoParameters\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/template/verificationEmail.ts\n            \n            variable\n            signupEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/template/welcomeSignup.ts\n            \n            variable\n            welcomeSignupEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/swagger.document.ts\n            \n            variable\n            setupSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/consent/consent.controller.ts\n            \n            controller\n            ConsentController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/consent/consent.service.ts\n            \n            injectable\n            ConsentService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/consent/dto/create-consent.dto.ts\n            \n            class\n            CreateConsentDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/consent/dto/update-consent.dto.ts\n            \n            class\n            UpdateConsentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/consent/entities/consent.entity.ts\n            \n            entity\n            Consent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/minio-client/file.model.ts\n            \n            interface\n            BufferedFile\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/minio-client/file.model.ts\n            \n            interface\n            HasFile\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/minio-client/file.model.ts\n            \n            interface\n            StoredFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/minio-client/file.model.ts\n            \n            interface\n            StoredFileMetadata\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/minio-client/minio-client.service.ts\n            \n            injectable\n            MinioClientService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/order/dto/create-order.dto.ts\n            \n            class\n            CreateOrderDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/order/dto/update-order.dto.ts\n            \n            class\n            UpdateOrderDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/order/entities/order.entity.ts\n            \n            class\n            Order\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/order/order.controller.ts\n            \n            controller\n            OrderController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/order/order.service.ts\n            \n            injectable\n            OrderService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/entities/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/profile/dto/create-profile.dto.ts\n            \n            class\n            CreateProfileDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/profile/dto/update-profile.dto.ts\n            \n            class\n            UpdateProfileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/profile/entities/profile.entity.ts\n            \n            entity\n            Profile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/email-verification.dto.ts\n            \n            class\n            EmailVerificationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/email.dto.ts\n            \n            class\n            EmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/terminus : ^10.2.3\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/bcryptjs : ^2.4.6\n        \n            @types/cookie-parser : ^1.4.7\n        \n            @types/gravatar : ^1.8.6\n        \n            @types/hapi__joi : ^17.1.14\n        \n            @types/multer : ^1.4.12\n        \n            @types/nodemailer : ^6.4.15\n        \n            @types/passport-google-oauth2 : ^0.1.8\n        \n            @types/passport-jwt : ^4.0.1\n        \n            @types/passport-kakao : ^1.0.3\n        \n            @types/passport-local : ^1.0.38\n        \n            @types/passport-naver : ^1.0.4\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : ^4.1.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.6\n        \n            gravatar : ^1.8.2\n        \n            multer : ^1.4.5-lts.1\n        \n            nestjs-minio-client : ^2.2.0\n        \n            nodemailer : ^6.9.14\n        \n            passport : ^0.7.0\n        \n            passport-google-oauth2 : ^0.2.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-kakao : ^1.0.1\n        \n            passport-local : ^1.0.0\n        \n            passport-naver : ^1.0.6\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BloodType   (src/.../bloodtype.enum.ts)\n                        \n                        \n                            Gender   (src/.../gender.enum.ts)\n                        \n                        \n                            Order   (src/.../order.constant.ts)\n                        \n                        \n                            PostgresErrorCodes   (src/.../postgresErrorCodes.enum.ts)\n                        \n                        \n                            Provider   (src/.../provider.enum.ts)\n                        \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/bloodtype.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        BloodType\n                    \n                \n                        \n                            \n                                 TYPE_A\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 TYPE_B\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 TYPE_O\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n                        \n                            \n                                 TYPE_AB\n                            \n                        \n                        \n                            \n                                Value : 4\n                            \n                        \n            \n        \n\n    src/common/enums/gender.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Gender\n                    \n                \n                        \n                            \n                                 MALE\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 FEMALE\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 MINORITY\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n            \n        \n\n    src/common/constants/order.constant.ts\n    \n        \n            \n                \n                    \n                        \n                        Order\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/database/postgresErrorCodes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCodes\n                    \n                \n                        \n                            \n                                 unique_violation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n                        \n                            \n                                 not_null_violation\n                            \n                        \n                        \n                            \n                                Value : 23502\n                            \n                        \n            \n        \n\n    src/common/enums/provider.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Provider\n                    \n                \n                        \n                            \n                                 LOCAL\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n                        \n                            \n                                 NAVER\n                            \n                        \n                        \n                            \n                                Value : naver\n                            \n                        \n                        \n                            \n                                 KAKAO\n                            \n                        \n                        \n                            \n                                Value : kakao\n                            \n                        \n            \n        \n\n    src/common/enums/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createInfo   (src/.../transform.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/common/interceptors/transform.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createInfo\n                        \n                    \n                \n            \n            \n                \ncreateInfo(statusCode: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                statusCode\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    200\n                                            \n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConsentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MinioClientModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrderModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConsentModule\n\n\n\ncluster_ConsentModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_MinioClientModule\n\n\n\ncluster_MinioClientModule_exports\n\n\n\ncluster_MinioClientModule_providers\n\n\n\ncluster_OrderModule\n\n\n\ncluster_OrderModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConsentModule\n\nConsentModule\n\nAppModule -->\n\nConsentModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAuthModule -->\n\nEmailModule->AuthModule\n\n\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nMinioClientModule\n\nMinioClientModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nMinioClientModule->ProductModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nMinioClientModule->UserModule\n\n\n\nAppModule -->\n\nMinioClientModule->AppModule\n\n\n\n\n\nMinioClientService \n\nMinioClientService \n\nMinioClientService  -->\n\nMinioClientModule->MinioClientService \n\n\n\n\n\nOrderModule\n\nOrderModule\n\nAppModule -->\n\nOrderModule->AppModule\n\n\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nProfileModule\n\nProfileModule\n\nAppModule -->\n\nProfileModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nConsentModule -->\n\nUserModule->ConsentModule\n\n\n\nProfileModule -->\n\nUserModule->ProfileModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\nKakaoAuthStrategy\n\nKakaoAuthStrategy\n\nAuthModule -->\n\nKakaoAuthStrategy->AuthModule\n\n\n\n\n\nLocalAuthStrategy\n\nLocalAuthStrategy\n\nAuthModule -->\n\nLocalAuthStrategy->AuthModule\n\n\n\n\n\nNaverAuthStrategy\n\nNaverAuthStrategy\n\nAuthModule -->\n\nNaverAuthStrategy->AuthModule\n\n\n\n\n\nConsentService\n\nConsentService\n\nConsentModule -->\n\nConsentService->ConsentModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nMinioClientService\n\nMinioClientService\n\nMinioClientModule -->\n\nMinioClientService->MinioClientModule\n\n\n\n\n\nOrderService\n\nOrderService\n\nOrderModule -->\n\nOrderService->OrderModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    22 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppMimeType   (src/.../file.model.ts)\n                        \n                        \n                            Response   (src/.../transform.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/minio-client/file.model.ts\n    \n    \n        \n            \n                \n                    \n                    AppMimeType\n                \n            \n            \n                \n                        \"image/png\" | \"image/jpeg\"\n\n                \n            \n        \n    \n    src/common/interceptors/transform.interceptor.ts\n    \n    \n        \n            \n                \n                    \n                    Response\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RoleGuard   (src/.../role.guard.ts)\n                        \n                        \n                            setupSwagger   (src/.../swagger.document.ts)\n                        \n                        \n                            signupEmail   (src/.../verificationEmail.ts)\n                        \n                        \n                            welcomeSignupEmail   (src/.../welcomeSignup.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/guards/role.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role: Role): Type => {\n  class RoleGuardMixin extends JwtAuthGuard {\n    async canActivate(context: ExecutionContext) {\n      await super.canActivate(context);\n\n      const req = context.switchToHttp().getRequest();\n      const user = req.user;\n      return user?.roles.includes(role);\n    }\n  }\n  return mixin(RoleGuardMixin);\n}\n                    \n                \n\n\n        \n    \n\n    src/config/swagger.document.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (app: INestApplication) => {\n  const config = new DocumentBuilder()\n    .setTitle('Jiwoong api')\n    .setDescription('Jiwoong open api')\n    .addBearerAuth()\n    .setVersion('1.0')\n    .addTag('Jiwoong')\n    .build();\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('/api-docs', app, document);\n}\n                    \n                \n\n\n        \n    \n\n    src/common/template/verificationEmail.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        signupEmail\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (randomNo) => `\n  \n  \n    \n      \n      \n      Jiwoong World 회원가입 인증\n      \n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n        .container {\n            max-width: 600px;\n            margin: auto;\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n        .header {\n            font-size: 24px;\n            text-align: center;\n            color: #007bff;\n        }\n        .content {\n            margin-top: 20px;\n        }\n        .footer {\n            margin-top: 40px;\n            text-align: center;\n            font-size: 12px;\n            color: #aaa;\n        }\n        .button {\n            display: inline-block;\n            margin-top: 20px;\n            padding: 10px 20px;\n            background-color: #007bff;\n            color: #ffffff;\n            text-decoration: none;\n            border-radius: 5px;\n        }\n    \n    \n    \n      \n          Jiwoong World 회원가입 인증\n          \n              안녕하세요,\n              Jiwoong World 에 가입해 주셔서 감사합니다. 아래의 인증 번호를 회원가입 페이지에 입력하여 회원가입 절차를 완료해 주세요.\n               인증 번호: ${randomNo} \n              이 번호는 귀하의 이메일 주소를 인증하는 데 사용됩니다.\n\n              만약 인증 번호를 요청하지 않았다면, 이 메일을 무시해 주세요.\n          \n          \n              Jiwoong World 팀 드림\n              궁금하신 사항이 있으시면 언제든지 저희 고객지원 센터로 문의해 주세요.\n          \n      \n    \n  \n\n`\n                    \n                \n\n\n        \n    \n\n    src/common/template/welcomeSignup.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        welcomeSignupEmail\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (email) => `\n\n\n\n\n\\t\n\\t\n\\t96\n\\t\n\\t\\t* {\n\\t\\t\\tbox-sizing: border-box;\n\\t\\t}\n\n\\t\\tbody {\n\\t\\t\\tmargin: 0;\n\\t\\t\\tpadding: 0;\n\\t\\t}\n\n\\t\\ta[x-apple-data-detectors] {\n\\t\\t\\tcolor: inherit !important;\n\\t\\t\\ttext-decoration: inherit !important;\n\\t\\t}\n\n\\t\\t#MessageViewBody a {\n\\t\\t\\tcolor: inherit;\n\\t\\t\\ttext-decoration: none;\n\\t\\t}\n\n\\t\\tp {\n\\t\\t\\tline-height: inherit\n\\t\\t}\n\n\\t\\t.desktop_hide,\n\\t\\t.desktop_hide table {\n\\t\\t\\tmso-hide: all;\n\\t\\t\\tdisplay: none;\n\\t\\t\\tmax-height: 0px;\n\\t\\t\\toverflow: hidden;\n\\t\\t}\n\n\\t\\t.image_block img+div {\n\\t\\t\\tdisplay: none;\n\\t\\t}\n\n\\t\\tsup,\n\\t\\tsub {\n\\t\\t\\tline-height: 0;\n\\t\\t\\tfont-size: 75%;\n\\t\\t}\n\n\\t\\t@media (max-width:670px) {\n\n\\t\\t\\t.desktop_hide table.icons-inner,\n\\t\\t\\t.social_block.desktop_hide .social-table {\n\\t\\t\\t\\tdisplay: inline-block !important;\n\\t\\t\\t}\n\n\\t\\t\\t.icons-inner {\n\\t\\t\\t\\ttext-align: center;\n\\t\\t\\t}\n\n\\t\\t\\t.icons-inner td {\n\\t\\t\\t\\tmargin: 0 auto;\n\\t\\t\\t}\n\n\\t\\t\\t.mobile_hide {\n\\t\\t\\t\\tdisplay: none;\n\\t\\t\\t}\n\n\\t\\t\\t.row-content {\n\\t\\t\\t\\twidth: 100% !important;\n\\t\\t\\t}\n\n\\t\\t\\t.stack .column {\n\\t\\t\\t\\twidth: 100%;\n\\t\\t\\t\\tdisplay: block;\n\\t\\t\\t}\n\n\\t\\t\\t.mobile_hide {\n\\t\\t\\t\\tmin-height: 0;\n\\t\\t\\t\\tmax-height: 0;\n\\t\\t\\t\\tmax-width: 0;\n\\t\\t\\t\\toverflow: hidden;\n\\t\\t\\t\\tfont-size: 0px;\n\\t\\t\\t}\n\n\\t\\t\\t.desktop_hide,\n\\t\\t\\t.desktop_hide table {\n\\t\\t\\t\\tdisplay: table !important;\n\\t\\t\\t\\tmax-height: none !important;\n\\t\\t\\t}\n\n\\t\\t\\t.row-3 .column-1 .block-3.spacer_block {\n\\t\\t\\t\\theight: 20px !important;\n\\t\\t\\t}\n\n\\t\\t\\t.row-3 .column-1 .block-2.paragraph_block td.pad>div {\n\\t\\t\\t\\ttext-align: center !important;\n\\t\\t\\t\\tfont-size: 16px !important;\n\\t\\t\\t}\n\n\\t\\t\\t.row-3 .column-2 .block-1.paragraph_block td.pad>div {\n\\t\\t\\t\\ttext-align: center !important;\n\\t\\t\\t\\tfont-size: 14px !important;\n\\t\\t\\t}\n\n\\t\\t\\t.row-3 .column-1 .block-1.paragraph_block td.pad,\n\\t\\t\\t.row-3 .column-2 .block-1.paragraph_block td.pad {\n\\t\\t\\t\\tpadding: 0 !important;\n\\t\\t\\t}\n\n\\t\\t\\t.row-4 .column-1 .block-3.paragraph_block td.pad>div,\n\\t\\t\\t.row-7 .column-1 .block-3.paragraph_block td.pad>div {\n\\t\\t\\t\\ttext-align: center !important;\n\\t\\t\\t}\n\n\\t\\t\\t.row-4 .column-1 .block-3.paragraph_block td.pad,\n\\t\\t\\t.row-7 .column-1 .block-3.paragraph_block td.pad {\n\\t\\t\\t\\tpadding: 5px !important;\n\\t\\t\\t}\n\n\\t\\t\\t.row-3 .column-1 .block-1.paragraph_block td.pad>div {\n\\t\\t\\t\\ttext-align: center !important;\n\\t\\t\\t\\tfont-size: 36px !important;\n\\t\\t\\t}\n\n\\t\\t\\t.row-5 .column-1 .block-3.paragraph_block td.pad>div {\n\\t\\t\\t\\tfont-size: 15px !important;\n\\t\\t\\t}\n\n\\t\\t\\t.row-7 .column-1 .block-2.paragraph_block td.pad>div {\n\\t\\t\\t\\ttext-align: center !important;\n\\t\\t\\t\\tfont-size: 32px !important;\n\\t\\t\\t}\n\n\\t\\t\\t.row-7 .column-1 .block-2.paragraph_block td.pad {\n\\t\\t\\t\\tpadding: 5px 5px 0 !important;\n\\t\\t\\t}\n\n\\t\\t\\t.row-9 .column-1 .block-1.spacer_block {\n\\t\\t\\t\\theight: 40px !important;\n\\t\\t\\t}\n\n\\t\\t\\t.row-3 .column-1 {\n\\t\\t\\t\\tpadding: 30px 30px 0 !important;\n\\t\\t\\t}\n\n\\t\\t\\t.row-3 .column-2 {\n\\t\\t\\t\\tpadding: 0 30px !important;\n\\t\\t\\t}\n\\t\\t}\n\\tsup, sub { font-size: 100% !important; } sup { mso-text-raise:10% } sub { mso-text-raise:-10% } .forceBgColor{background-color: white !important}\n\n\n\n\\t\n\\t\\t\n\\t\\t\\t\nWelcome to ${email} \n\n\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tInvoice\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t#1234Date: 07/01/2024\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8202;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tBill to:Jane DoeCompany123 Street Adressjanedoe@example.com\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8202;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tAmount due:\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$565\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tDue on 07/15/2024.\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\n\n\n\nREVIEW AND PAY\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tDear Jane,\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod.Thank you,Your name\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tService\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tQty\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tPrice\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTotal\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSEO\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t1\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tWebsite Design\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t1\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSocial Media\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t1\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tContent\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t1\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tPPC Ads\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t1\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSubtotal\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$500.00\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTaxes (%)\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$65.00\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tGRAND TOTAL\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$565.00\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tService\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tQty\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tPrice\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTotal\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSEO\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t1\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tWebsite Design\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t1\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSocial Media\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t1\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tContent\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t1\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tPPC Ads\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t1\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$100\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tSubtotal\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$500.00\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTaxes (%)\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$65.00\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8203;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tGRAND TOTAL\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$565.00\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\n\n\n\nDOWNLOAD INVOICE\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tHave questions?\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tWe have answers. Get in touch with us via email, phone or support chat.\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\n\n\n\nGET IN TOUCH\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8202;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tMAILCOMET MARKETING AGENCY\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t1234 Example StreetCity, State 01234, Country\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tUnsubscribe or Manage Preferences\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t&#8202;\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tDesigned with Beefree\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\\t\n\\t\\t\\t\\t\n\\t\\t\\t\n\\t\\t\n\\t\n\n\n\n`\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
